#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ViewWidth(object):
    NARROW = 0
    NORMAL = 1
    WIDE = 2

    _VALUES_TO_NAMES = {
        0: "NARROW",
        1: "NORMAL",
        2: "WIDE",
    }

    _NAMES_TO_VALUES = {
        "NARROW": 0,
        "NORMAL": 1,
        "WIDE": 2,
    }


class AgentType(object):
    PlayerT = 0
    CoachT = 1
    TrainerT = 2

    _VALUES_TO_NAMES = {
        0: "PlayerT",
        1: "CoachT",
        2: "TrainerT",
    }

    _NAMES_TO_VALUES = {
        "PlayerT": 0,
        "CoachT": 1,
        "TrainerT": 2,
    }


class Side(object):
    UNKNOWN = 0
    LEFT = 1
    RIGHT = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "LEFT",
        2: "RIGHT",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "LEFT": 1,
        "RIGHT": 2,
    }


class LoggerLevel(object):
    NoneLevel = 0
    SYSTEM = 1
    SENSOR = 2
    WORLD = 4
    ACTION = 8
    INTERCEPT = 16
    KICK = 32
    HOLD = 64
    DRIBBLE = 128
    PASS = 256
    CROSS = 512
    SHOOT = 1024
    CLEAR = 2048
    BLOCK = 4096
    MARK = 8192
    POSITIONING = 16384
    ROLE = 32768
    TEAM = 65536
    COMMUNICATION = 131072
    ANALYZER = 262144
    ACTION_CHAIN = 524288
    PLAN = 1048576

    _VALUES_TO_NAMES = {
        0: "NoneLevel",
        1: "SYSTEM",
        2: "SENSOR",
        4: "WORLD",
        8: "ACTION",
        16: "INTERCEPT",
        32: "KICK",
        64: "HOLD",
        128: "DRIBBLE",
        256: "PASS",
        512: "CROSS",
        1024: "SHOOT",
        2048: "CLEAR",
        4096: "BLOCK",
        8192: "MARK",
        16384: "POSITIONING",
        32768: "ROLE",
        65536: "TEAM",
        131072: "COMMUNICATION",
        262144: "ANALYZER",
        524288: "ACTION_CHAIN",
        1048576: "PLAN",
    }

    _NAMES_TO_VALUES = {
        "NoneLevel": 0,
        "SYSTEM": 1,
        "SENSOR": 2,
        "WORLD": 4,
        "ACTION": 8,
        "INTERCEPT": 16,
        "KICK": 32,
        "HOLD": 64,
        "DRIBBLE": 128,
        "PASS": 256,
        "CROSS": 512,
        "SHOOT": 1024,
        "CLEAR": 2048,
        "BLOCK": 4096,
        "MARK": 8192,
        "POSITIONING": 16384,
        "ROLE": 32768,
        "TEAM": 65536,
        "COMMUNICATION": 131072,
        "ANALYZER": 262144,
        "ACTION_CHAIN": 524288,
        "PLAN": 1048576,
    }


class InterceptActionType(object):
    UNKNOWN_Intercept_Action_Type = 0
    OMNI_DASH = 1
    TURN_FORWARD_DASH = 2
    TURN_BACKWARD_DASH = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN_Intercept_Action_Type",
        1: "OMNI_DASH",
        2: "TURN_FORWARD_DASH",
        3: "TURN_BACKWARD_DASH",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN_Intercept_Action_Type": 0,
        "OMNI_DASH": 1,
        "TURN_FORWARD_DASH": 2,
        "TURN_BACKWARD_DASH": 3,
    }


class GameModeType(object):
    BeforeKickOff = 0
    TimeOver = 1
    PlayOn = 2
    KickOff_ = 3
    KickIn_ = 4
    FreeKick_ = 5
    CornerKick_ = 6
    GoalKick_ = 7
    AfterGoal_ = 8
    OffSide_ = 9
    PenaltyKick_ = 10
    FirstHalfOver = 11
    Pause = 12
    Human = 13
    FoulCharge_ = 14
    FoulPush_ = 15
    FoulMultipleAttacker_ = 16
    FoulBallOut_ = 17
    BackPass_ = 18
    FreeKickFault_ = 19
    CatchFault_ = 20
    IndFreeKick_ = 21
    PenaltySetup_ = 22
    PenaltyReady_ = 23
    PenaltyTaken_ = 24
    PenaltyMiss_ = 25
    PenaltyScore_ = 26
    IllegalDefense_ = 27
    PenaltyOnfield_ = 28
    PenaltyFoul_ = 29
    GoalieCatch_ = 30
    ExtendHalf = 31
    MODE_MAX = 32

    _VALUES_TO_NAMES = {
        0: "BeforeKickOff",
        1: "TimeOver",
        2: "PlayOn",
        3: "KickOff_",
        4: "KickIn_",
        5: "FreeKick_",
        6: "CornerKick_",
        7: "GoalKick_",
        8: "AfterGoal_",
        9: "OffSide_",
        10: "PenaltyKick_",
        11: "FirstHalfOver",
        12: "Pause",
        13: "Human",
        14: "FoulCharge_",
        15: "FoulPush_",
        16: "FoulMultipleAttacker_",
        17: "FoulBallOut_",
        18: "BackPass_",
        19: "FreeKickFault_",
        20: "CatchFault_",
        21: "IndFreeKick_",
        22: "PenaltySetup_",
        23: "PenaltyReady_",
        24: "PenaltyTaken_",
        25: "PenaltyMiss_",
        26: "PenaltyScore_",
        27: "IllegalDefense_",
        28: "PenaltyOnfield_",
        29: "PenaltyFoul_",
        30: "GoalieCatch_",
        31: "ExtendHalf",
        32: "MODE_MAX",
    }

    _NAMES_TO_VALUES = {
        "BeforeKickOff": 0,
        "TimeOver": 1,
        "PlayOn": 2,
        "KickOff_": 3,
        "KickIn_": 4,
        "FreeKick_": 5,
        "CornerKick_": 6,
        "GoalKick_": 7,
        "AfterGoal_": 8,
        "OffSide_": 9,
        "PenaltyKick_": 10,
        "FirstHalfOver": 11,
        "Pause": 12,
        "Human": 13,
        "FoulCharge_": 14,
        "FoulPush_": 15,
        "FoulMultipleAttacker_": 16,
        "FoulBallOut_": 17,
        "BackPass_": 18,
        "FreeKickFault_": 19,
        "CatchFault_": 20,
        "IndFreeKick_": 21,
        "PenaltySetup_": 22,
        "PenaltyReady_": 23,
        "PenaltyTaken_": 24,
        "PenaltyMiss_": 25,
        "PenaltyScore_": 26,
        "IllegalDefense_": 27,
        "PenaltyOnfield_": 28,
        "PenaltyFoul_": 29,
        "GoalieCatch_": 30,
        "ExtendHalf": 31,
        "MODE_MAX": 32,
    }


class ThriftVector2D(object):
    """
    Attributes:
     - x
     - y
     - dist
     - angle

    """


    def __init__(self, x=None, y=None, dist=None, angle=None,):
        self.x = x
        self.y = y
        self.dist = dist
        self.angle = angle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThriftVector2D')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.dist is not None:
            oprot.writeFieldBegin('dist', TType.DOUBLE, 3)
            oprot.writeDouble(self.dist)
            oprot.writeFieldEnd()
        if self.angle is not None:
            oprot.writeFieldBegin('angle', TType.DOUBLE, 4)
            oprot.writeDouble(self.angle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Ball(object):
    """
    Attributes:
     - position
     - relative_position
     - seen_position
     - heard_position
     - velocity
     - seen_velocity
     - heard_velocity
     - pos_count
     - seen_pos_count
     - heard_pos_count
     - vel_count
     - seen_vel_count
     - heard_vel_count
     - lost_count
     - ghost_count
     - dist_from_self
     - angle_from_self

    """


    def __init__(self, position=None, relative_position=None, seen_position=None, heard_position=None, velocity=None, seen_velocity=None, heard_velocity=None, pos_count=None, seen_pos_count=None, heard_pos_count=None, vel_count=None, seen_vel_count=None, heard_vel_count=None, lost_count=None, ghost_count=None, dist_from_self=None, angle_from_self=None,):
        self.position = position
        self.relative_position = relative_position
        self.seen_position = seen_position
        self.heard_position = heard_position
        self.velocity = velocity
        self.seen_velocity = seen_velocity
        self.heard_velocity = heard_velocity
        self.pos_count = pos_count
        self.seen_pos_count = seen_pos_count
        self.heard_pos_count = heard_pos_count
        self.vel_count = vel_count
        self.seen_vel_count = seen_vel_count
        self.heard_vel_count = heard_vel_count
        self.lost_count = lost_count
        self.ghost_count = ghost_count
        self.dist_from_self = dist_from_self
        self.angle_from_self = angle_from_self

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.relative_position = ThriftVector2D()
                    self.relative_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.seen_position = ThriftVector2D()
                    self.seen_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.heard_position = ThriftVector2D()
                    self.heard_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.velocity = ThriftVector2D()
                    self.velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.seen_velocity = ThriftVector2D()
                    self.seen_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.heard_velocity = ThriftVector2D()
                    self.heard_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.seen_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.heard_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.seen_vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.heard_vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.lost_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.ghost_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.dist_from_self = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.angle_from_self = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ball')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.relative_position is not None:
            oprot.writeFieldBegin('relative_position', TType.STRUCT, 2)
            self.relative_position.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_position is not None:
            oprot.writeFieldBegin('seen_position', TType.STRUCT, 3)
            self.seen_position.write(oprot)
            oprot.writeFieldEnd()
        if self.heard_position is not None:
            oprot.writeFieldBegin('heard_position', TType.STRUCT, 4)
            self.heard_position.write(oprot)
            oprot.writeFieldEnd()
        if self.velocity is not None:
            oprot.writeFieldBegin('velocity', TType.STRUCT, 5)
            self.velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_velocity is not None:
            oprot.writeFieldBegin('seen_velocity', TType.STRUCT, 6)
            self.seen_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.heard_velocity is not None:
            oprot.writeFieldBegin('heard_velocity', TType.STRUCT, 7)
            self.heard_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.pos_count is not None:
            oprot.writeFieldBegin('pos_count', TType.I32, 8)
            oprot.writeI32(self.pos_count)
            oprot.writeFieldEnd()
        if self.seen_pos_count is not None:
            oprot.writeFieldBegin('seen_pos_count', TType.I32, 9)
            oprot.writeI32(self.seen_pos_count)
            oprot.writeFieldEnd()
        if self.heard_pos_count is not None:
            oprot.writeFieldBegin('heard_pos_count', TType.I32, 10)
            oprot.writeI32(self.heard_pos_count)
            oprot.writeFieldEnd()
        if self.vel_count is not None:
            oprot.writeFieldBegin('vel_count', TType.I32, 11)
            oprot.writeI32(self.vel_count)
            oprot.writeFieldEnd()
        if self.seen_vel_count is not None:
            oprot.writeFieldBegin('seen_vel_count', TType.I32, 12)
            oprot.writeI32(self.seen_vel_count)
            oprot.writeFieldEnd()
        if self.heard_vel_count is not None:
            oprot.writeFieldBegin('heard_vel_count', TType.I32, 13)
            oprot.writeI32(self.heard_vel_count)
            oprot.writeFieldEnd()
        if self.lost_count is not None:
            oprot.writeFieldBegin('lost_count', TType.I32, 14)
            oprot.writeI32(self.lost_count)
            oprot.writeFieldEnd()
        if self.ghost_count is not None:
            oprot.writeFieldBegin('ghost_count', TType.I32, 15)
            oprot.writeI32(self.ghost_count)
            oprot.writeFieldEnd()
        if self.dist_from_self is not None:
            oprot.writeFieldBegin('dist_from_self', TType.DOUBLE, 16)
            oprot.writeDouble(self.dist_from_self)
            oprot.writeFieldEnd()
        if self.angle_from_self is not None:
            oprot.writeFieldBegin('angle_from_self', TType.DOUBLE, 17)
            oprot.writeDouble(self.angle_from_self)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Player(object):
    """
    Attributes:
     - position
     - seen_position
     - heard_position
     - velocity
     - seen_velocity
     - pos_count
     - seen_pos_count
     - heard_pos_count
     - vel_count
     - seen_vel_count
     - ghost_count
     - dist_from_self
     - angle_from_self
     - id
     - side
     - uniform_number
     - uniform_number_count
     - is_goalie
     - body_direction
     - body_direction_count
     - face_direction
     - face_direction_count
     - point_to_direction
     - point_to_direction_count
     - is_kicking
     - dist_from_ball
     - angle_from_ball
     - ball_reach_steps
     - is_tackling
     - type_id

    """


    def __init__(self, position=None, seen_position=None, heard_position=None, velocity=None, seen_velocity=None, pos_count=None, seen_pos_count=None, heard_pos_count=None, vel_count=None, seen_vel_count=None, ghost_count=None, dist_from_self=None, angle_from_self=None, id=None, side=None, uniform_number=None, uniform_number_count=None, is_goalie=None, body_direction=None, body_direction_count=None, face_direction=None, face_direction_count=None, point_to_direction=None, point_to_direction_count=None, is_kicking=None, dist_from_ball=None, angle_from_ball=None, ball_reach_steps=None, is_tackling=None, type_id=None,):
        self.position = position
        self.seen_position = seen_position
        self.heard_position = heard_position
        self.velocity = velocity
        self.seen_velocity = seen_velocity
        self.pos_count = pos_count
        self.seen_pos_count = seen_pos_count
        self.heard_pos_count = heard_pos_count
        self.vel_count = vel_count
        self.seen_vel_count = seen_vel_count
        self.ghost_count = ghost_count
        self.dist_from_self = dist_from_self
        self.angle_from_self = angle_from_self
        self.id = id
        self.side = side
        self.uniform_number = uniform_number
        self.uniform_number_count = uniform_number_count
        self.is_goalie = is_goalie
        self.body_direction = body_direction
        self.body_direction_count = body_direction_count
        self.face_direction = face_direction
        self.face_direction_count = face_direction_count
        self.point_to_direction = point_to_direction
        self.point_to_direction_count = point_to_direction_count
        self.is_kicking = is_kicking
        self.dist_from_ball = dist_from_ball
        self.angle_from_ball = angle_from_ball
        self.ball_reach_steps = ball_reach_steps
        self.is_tackling = is_tackling
        self.type_id = type_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.seen_position = ThriftVector2D()
                    self.seen_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.heard_position = ThriftVector2D()
                    self.heard_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.velocity = ThriftVector2D()
                    self.velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.seen_velocity = ThriftVector2D()
                    self.seen_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.seen_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.heard_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.seen_vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.ghost_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.dist_from_self = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.angle_from_self = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.uniform_number_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.is_goalie = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.body_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.face_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.face_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.point_to_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.point_to_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.is_kicking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.dist_from_ball = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.angle_from_ball = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.ball_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.is_tackling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.type_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Player')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_position is not None:
            oprot.writeFieldBegin('seen_position', TType.STRUCT, 2)
            self.seen_position.write(oprot)
            oprot.writeFieldEnd()
        if self.heard_position is not None:
            oprot.writeFieldBegin('heard_position', TType.STRUCT, 3)
            self.heard_position.write(oprot)
            oprot.writeFieldEnd()
        if self.velocity is not None:
            oprot.writeFieldBegin('velocity', TType.STRUCT, 4)
            self.velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_velocity is not None:
            oprot.writeFieldBegin('seen_velocity', TType.STRUCT, 5)
            self.seen_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.pos_count is not None:
            oprot.writeFieldBegin('pos_count', TType.I32, 6)
            oprot.writeI32(self.pos_count)
            oprot.writeFieldEnd()
        if self.seen_pos_count is not None:
            oprot.writeFieldBegin('seen_pos_count', TType.I32, 7)
            oprot.writeI32(self.seen_pos_count)
            oprot.writeFieldEnd()
        if self.heard_pos_count is not None:
            oprot.writeFieldBegin('heard_pos_count', TType.I32, 8)
            oprot.writeI32(self.heard_pos_count)
            oprot.writeFieldEnd()
        if self.vel_count is not None:
            oprot.writeFieldBegin('vel_count', TType.I32, 9)
            oprot.writeI32(self.vel_count)
            oprot.writeFieldEnd()
        if self.seen_vel_count is not None:
            oprot.writeFieldBegin('seen_vel_count', TType.I32, 10)
            oprot.writeI32(self.seen_vel_count)
            oprot.writeFieldEnd()
        if self.ghost_count is not None:
            oprot.writeFieldBegin('ghost_count', TType.I32, 11)
            oprot.writeI32(self.ghost_count)
            oprot.writeFieldEnd()
        if self.dist_from_self is not None:
            oprot.writeFieldBegin('dist_from_self', TType.DOUBLE, 12)
            oprot.writeDouble(self.dist_from_self)
            oprot.writeFieldEnd()
        if self.angle_from_self is not None:
            oprot.writeFieldBegin('angle_from_self', TType.DOUBLE, 13)
            oprot.writeDouble(self.angle_from_self)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 14)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 15)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 16)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.uniform_number_count is not None:
            oprot.writeFieldBegin('uniform_number_count', TType.I32, 17)
            oprot.writeI32(self.uniform_number_count)
            oprot.writeFieldEnd()
        if self.is_goalie is not None:
            oprot.writeFieldBegin('is_goalie', TType.BOOL, 18)
            oprot.writeBool(self.is_goalie)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 19)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        if self.body_direction_count is not None:
            oprot.writeFieldBegin('body_direction_count', TType.I32, 20)
            oprot.writeI32(self.body_direction_count)
            oprot.writeFieldEnd()
        if self.face_direction is not None:
            oprot.writeFieldBegin('face_direction', TType.DOUBLE, 21)
            oprot.writeDouble(self.face_direction)
            oprot.writeFieldEnd()
        if self.face_direction_count is not None:
            oprot.writeFieldBegin('face_direction_count', TType.I32, 22)
            oprot.writeI32(self.face_direction_count)
            oprot.writeFieldEnd()
        if self.point_to_direction is not None:
            oprot.writeFieldBegin('point_to_direction', TType.DOUBLE, 23)
            oprot.writeDouble(self.point_to_direction)
            oprot.writeFieldEnd()
        if self.point_to_direction_count is not None:
            oprot.writeFieldBegin('point_to_direction_count', TType.I32, 24)
            oprot.writeI32(self.point_to_direction_count)
            oprot.writeFieldEnd()
        if self.is_kicking is not None:
            oprot.writeFieldBegin('is_kicking', TType.BOOL, 25)
            oprot.writeBool(self.is_kicking)
            oprot.writeFieldEnd()
        if self.dist_from_ball is not None:
            oprot.writeFieldBegin('dist_from_ball', TType.DOUBLE, 26)
            oprot.writeDouble(self.dist_from_ball)
            oprot.writeFieldEnd()
        if self.angle_from_ball is not None:
            oprot.writeFieldBegin('angle_from_ball', TType.DOUBLE, 27)
            oprot.writeDouble(self.angle_from_ball)
            oprot.writeFieldEnd()
        if self.ball_reach_steps is not None:
            oprot.writeFieldBegin('ball_reach_steps', TType.I32, 28)
            oprot.writeI32(self.ball_reach_steps)
            oprot.writeFieldEnd()
        if self.is_tackling is not None:
            oprot.writeFieldBegin('is_tackling', TType.BOOL, 29)
            oprot.writeBool(self.is_tackling)
            oprot.writeFieldEnd()
        if self.type_id is not None:
            oprot.writeFieldBegin('type_id', TType.I32, 30)
            oprot.writeI32(self.type_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Self(object):
    """
    Attributes:
     - position
     - seen_position
     - heard_position
     - velocity
     - seen_velocity
     - pos_count
     - seen_pos_count
     - heard_pos_count
     - vel_count
     - seen_vel_count
     - ghost_count
     - id
     - side
     - uniform_number
     - uniform_number_count
     - is_goalie
     - body_direction
     - body_direction_count
     - face_direction
     - face_direction_count
     - point_to_direction
     - point_to_direction_count
     - is_kicking
     - dist_from_ball
     - angle_from_ball
     - ball_reach_steps
     - is_tackling
     - relative_neck_direction
     - stamina
     - is_kickable
     - catch_probability
     - tackle_probability
     - foul_probability
     - view_width
     - type_id
     - kick_rate

    """


    def __init__(self, position=None, seen_position=None, heard_position=None, velocity=None, seen_velocity=None, pos_count=None, seen_pos_count=None, heard_pos_count=None, vel_count=None, seen_vel_count=None, ghost_count=None, id=None, side=None, uniform_number=None, uniform_number_count=None, is_goalie=None, body_direction=None, body_direction_count=None, face_direction=None, face_direction_count=None, point_to_direction=None, point_to_direction_count=None, is_kicking=None, dist_from_ball=None, angle_from_ball=None, ball_reach_steps=None, is_tackling=None, relative_neck_direction=None, stamina=None, is_kickable=None, catch_probability=None, tackle_probability=None, foul_probability=None, view_width=None, type_id=None, kick_rate=None,):
        self.position = position
        self.seen_position = seen_position
        self.heard_position = heard_position
        self.velocity = velocity
        self.seen_velocity = seen_velocity
        self.pos_count = pos_count
        self.seen_pos_count = seen_pos_count
        self.heard_pos_count = heard_pos_count
        self.vel_count = vel_count
        self.seen_vel_count = seen_vel_count
        self.ghost_count = ghost_count
        self.id = id
        self.side = side
        self.uniform_number = uniform_number
        self.uniform_number_count = uniform_number_count
        self.is_goalie = is_goalie
        self.body_direction = body_direction
        self.body_direction_count = body_direction_count
        self.face_direction = face_direction
        self.face_direction_count = face_direction_count
        self.point_to_direction = point_to_direction
        self.point_to_direction_count = point_to_direction_count
        self.is_kicking = is_kicking
        self.dist_from_ball = dist_from_ball
        self.angle_from_ball = angle_from_ball
        self.ball_reach_steps = ball_reach_steps
        self.is_tackling = is_tackling
        self.relative_neck_direction = relative_neck_direction
        self.stamina = stamina
        self.is_kickable = is_kickable
        self.catch_probability = catch_probability
        self.tackle_probability = tackle_probability
        self.foul_probability = foul_probability
        self.view_width = view_width
        self.type_id = type_id
        self.kick_rate = kick_rate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.seen_position = ThriftVector2D()
                    self.seen_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.heard_position = ThriftVector2D()
                    self.heard_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.velocity = ThriftVector2D()
                    self.velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.seen_velocity = ThriftVector2D()
                    self.seen_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.seen_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.heard_pos_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.seen_vel_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.ghost_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.uniform_number_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.is_goalie = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.body_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.face_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.face_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.point_to_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.point_to_direction_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.is_kicking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.dist_from_ball = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.angle_from_ball = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.ball_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.is_tackling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.relative_neck_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.is_kickable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.DOUBLE:
                    self.catch_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.DOUBLE:
                    self.tackle_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.DOUBLE:
                    self.foul_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I32:
                    self.view_width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.I32:
                    self.type_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.DOUBLE:
                    self.kick_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Self')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_position is not None:
            oprot.writeFieldBegin('seen_position', TType.STRUCT, 2)
            self.seen_position.write(oprot)
            oprot.writeFieldEnd()
        if self.heard_position is not None:
            oprot.writeFieldBegin('heard_position', TType.STRUCT, 3)
            self.heard_position.write(oprot)
            oprot.writeFieldEnd()
        if self.velocity is not None:
            oprot.writeFieldBegin('velocity', TType.STRUCT, 4)
            self.velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.seen_velocity is not None:
            oprot.writeFieldBegin('seen_velocity', TType.STRUCT, 5)
            self.seen_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.pos_count is not None:
            oprot.writeFieldBegin('pos_count', TType.I32, 6)
            oprot.writeI32(self.pos_count)
            oprot.writeFieldEnd()
        if self.seen_pos_count is not None:
            oprot.writeFieldBegin('seen_pos_count', TType.I32, 7)
            oprot.writeI32(self.seen_pos_count)
            oprot.writeFieldEnd()
        if self.heard_pos_count is not None:
            oprot.writeFieldBegin('heard_pos_count', TType.I32, 8)
            oprot.writeI32(self.heard_pos_count)
            oprot.writeFieldEnd()
        if self.vel_count is not None:
            oprot.writeFieldBegin('vel_count', TType.I32, 9)
            oprot.writeI32(self.vel_count)
            oprot.writeFieldEnd()
        if self.seen_vel_count is not None:
            oprot.writeFieldBegin('seen_vel_count', TType.I32, 10)
            oprot.writeI32(self.seen_vel_count)
            oprot.writeFieldEnd()
        if self.ghost_count is not None:
            oprot.writeFieldBegin('ghost_count', TType.I32, 11)
            oprot.writeI32(self.ghost_count)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 12)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 13)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 14)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.uniform_number_count is not None:
            oprot.writeFieldBegin('uniform_number_count', TType.I32, 15)
            oprot.writeI32(self.uniform_number_count)
            oprot.writeFieldEnd()
        if self.is_goalie is not None:
            oprot.writeFieldBegin('is_goalie', TType.BOOL, 16)
            oprot.writeBool(self.is_goalie)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 17)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        if self.body_direction_count is not None:
            oprot.writeFieldBegin('body_direction_count', TType.I32, 18)
            oprot.writeI32(self.body_direction_count)
            oprot.writeFieldEnd()
        if self.face_direction is not None:
            oprot.writeFieldBegin('face_direction', TType.DOUBLE, 19)
            oprot.writeDouble(self.face_direction)
            oprot.writeFieldEnd()
        if self.face_direction_count is not None:
            oprot.writeFieldBegin('face_direction_count', TType.I32, 20)
            oprot.writeI32(self.face_direction_count)
            oprot.writeFieldEnd()
        if self.point_to_direction is not None:
            oprot.writeFieldBegin('point_to_direction', TType.DOUBLE, 21)
            oprot.writeDouble(self.point_to_direction)
            oprot.writeFieldEnd()
        if self.point_to_direction_count is not None:
            oprot.writeFieldBegin('point_to_direction_count', TType.I32, 22)
            oprot.writeI32(self.point_to_direction_count)
            oprot.writeFieldEnd()
        if self.is_kicking is not None:
            oprot.writeFieldBegin('is_kicking', TType.BOOL, 23)
            oprot.writeBool(self.is_kicking)
            oprot.writeFieldEnd()
        if self.dist_from_ball is not None:
            oprot.writeFieldBegin('dist_from_ball', TType.DOUBLE, 24)
            oprot.writeDouble(self.dist_from_ball)
            oprot.writeFieldEnd()
        if self.angle_from_ball is not None:
            oprot.writeFieldBegin('angle_from_ball', TType.DOUBLE, 25)
            oprot.writeDouble(self.angle_from_ball)
            oprot.writeFieldEnd()
        if self.ball_reach_steps is not None:
            oprot.writeFieldBegin('ball_reach_steps', TType.I32, 26)
            oprot.writeI32(self.ball_reach_steps)
            oprot.writeFieldEnd()
        if self.is_tackling is not None:
            oprot.writeFieldBegin('is_tackling', TType.BOOL, 27)
            oprot.writeBool(self.is_tackling)
            oprot.writeFieldEnd()
        if self.relative_neck_direction is not None:
            oprot.writeFieldBegin('relative_neck_direction', TType.DOUBLE, 28)
            oprot.writeDouble(self.relative_neck_direction)
            oprot.writeFieldEnd()
        if self.stamina is not None:
            oprot.writeFieldBegin('stamina', TType.DOUBLE, 29)
            oprot.writeDouble(self.stamina)
            oprot.writeFieldEnd()
        if self.is_kickable is not None:
            oprot.writeFieldBegin('is_kickable', TType.BOOL, 30)
            oprot.writeBool(self.is_kickable)
            oprot.writeFieldEnd()
        if self.catch_probability is not None:
            oprot.writeFieldBegin('catch_probability', TType.DOUBLE, 31)
            oprot.writeDouble(self.catch_probability)
            oprot.writeFieldEnd()
        if self.tackle_probability is not None:
            oprot.writeFieldBegin('tackle_probability', TType.DOUBLE, 32)
            oprot.writeDouble(self.tackle_probability)
            oprot.writeFieldEnd()
        if self.foul_probability is not None:
            oprot.writeFieldBegin('foul_probability', TType.DOUBLE, 33)
            oprot.writeDouble(self.foul_probability)
            oprot.writeFieldEnd()
        if self.view_width is not None:
            oprot.writeFieldBegin('view_width', TType.I32, 34)
            oprot.writeI32(self.view_width)
            oprot.writeFieldEnd()
        if self.type_id is not None:
            oprot.writeFieldBegin('type_id', TType.I32, 35)
            oprot.writeI32(self.type_id)
            oprot.writeFieldEnd()
        if self.kick_rate is not None:
            oprot.writeFieldBegin('kick_rate', TType.DOUBLE, 36)
            oprot.writeDouble(self.kick_rate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InterceptInfo(object):
    """
    Attributes:
     - action_type
     - turn_steps
     - turn_angle
     - dash_steps
     - dash_power
     - dash_dir
     - final_self_position
     - final_ball_dist
     - final_stamina
     - value

    """


    def __init__(self, action_type=None, turn_steps=None, turn_angle=None, dash_steps=None, dash_power=None, dash_dir=None, final_self_position=None, final_ball_dist=None, final_stamina=None, value=None,):
        self.action_type = action_type
        self.turn_steps = turn_steps
        self.turn_angle = turn_angle
        self.dash_steps = dash_steps
        self.dash_power = dash_power
        self.dash_dir = dash_dir
        self.final_self_position = final_self_position
        self.final_ball_dist = final_ball_dist
        self.final_stamina = final_stamina
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.action_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.turn_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.turn_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dash_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.dash_dir = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.final_self_position = ThriftVector2D()
                    self.final_self_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.final_ball_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.final_stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InterceptInfo')
        if self.action_type is not None:
            oprot.writeFieldBegin('action_type', TType.I32, 1)
            oprot.writeI32(self.action_type)
            oprot.writeFieldEnd()
        if self.turn_steps is not None:
            oprot.writeFieldBegin('turn_steps', TType.I32, 2)
            oprot.writeI32(self.turn_steps)
            oprot.writeFieldEnd()
        if self.turn_angle is not None:
            oprot.writeFieldBegin('turn_angle', TType.DOUBLE, 3)
            oprot.writeDouble(self.turn_angle)
            oprot.writeFieldEnd()
        if self.dash_steps is not None:
            oprot.writeFieldBegin('dash_steps', TType.I32, 4)
            oprot.writeI32(self.dash_steps)
            oprot.writeFieldEnd()
        if self.dash_power is not None:
            oprot.writeFieldBegin('dash_power', TType.DOUBLE, 5)
            oprot.writeDouble(self.dash_power)
            oprot.writeFieldEnd()
        if self.dash_dir is not None:
            oprot.writeFieldBegin('dash_dir', TType.DOUBLE, 6)
            oprot.writeDouble(self.dash_dir)
            oprot.writeFieldEnd()
        if self.final_self_position is not None:
            oprot.writeFieldBegin('final_self_position', TType.STRUCT, 7)
            self.final_self_position.write(oprot)
            oprot.writeFieldEnd()
        if self.final_ball_dist is not None:
            oprot.writeFieldBegin('final_ball_dist', TType.DOUBLE, 8)
            oprot.writeDouble(self.final_ball_dist)
            oprot.writeFieldEnd()
        if self.final_stamina is not None:
            oprot.writeFieldBegin('final_stamina', TType.DOUBLE, 9)
            oprot.writeDouble(self.final_stamina)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 10)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InterceptTable(object):
    """
    Attributes:
     - self_reach_steps
     - first_teammate_reach_steps
     - second_teammate_reach_steps
     - first_opponent_reach_steps
     - second_opponent_reach_steps
     - first_teammate_id
     - second_teammate_id
     - first_opponent_id
     - second_opponent_id
     - self_intercept_info

    """


    def __init__(self, self_reach_steps=None, first_teammate_reach_steps=None, second_teammate_reach_steps=None, first_opponent_reach_steps=None, second_opponent_reach_steps=None, first_teammate_id=None, second_teammate_id=None, first_opponent_id=None, second_opponent_id=None, self_intercept_info=None,):
        self.self_reach_steps = self_reach_steps
        self.first_teammate_reach_steps = first_teammate_reach_steps
        self.second_teammate_reach_steps = second_teammate_reach_steps
        self.first_opponent_reach_steps = first_opponent_reach_steps
        self.second_opponent_reach_steps = second_opponent_reach_steps
        self.first_teammate_id = first_teammate_id
        self.second_teammate_id = second_teammate_id
        self.first_opponent_id = first_opponent_id
        self.second_opponent_id = second_opponent_id
        self.self_intercept_info = self_intercept_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.self_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.first_teammate_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.second_teammate_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.first_opponent_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.second_opponent_reach_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.first_teammate_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.second_teammate_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.first_opponent_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.second_opponent_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.self_intercept_info = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = InterceptInfo()
                        _elem5.read(iprot)
                        self.self_intercept_info.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InterceptTable')
        if self.self_reach_steps is not None:
            oprot.writeFieldBegin('self_reach_steps', TType.I32, 1)
            oprot.writeI32(self.self_reach_steps)
            oprot.writeFieldEnd()
        if self.first_teammate_reach_steps is not None:
            oprot.writeFieldBegin('first_teammate_reach_steps', TType.I32, 2)
            oprot.writeI32(self.first_teammate_reach_steps)
            oprot.writeFieldEnd()
        if self.second_teammate_reach_steps is not None:
            oprot.writeFieldBegin('second_teammate_reach_steps', TType.I32, 3)
            oprot.writeI32(self.second_teammate_reach_steps)
            oprot.writeFieldEnd()
        if self.first_opponent_reach_steps is not None:
            oprot.writeFieldBegin('first_opponent_reach_steps', TType.I32, 4)
            oprot.writeI32(self.first_opponent_reach_steps)
            oprot.writeFieldEnd()
        if self.second_opponent_reach_steps is not None:
            oprot.writeFieldBegin('second_opponent_reach_steps', TType.I32, 5)
            oprot.writeI32(self.second_opponent_reach_steps)
            oprot.writeFieldEnd()
        if self.first_teammate_id is not None:
            oprot.writeFieldBegin('first_teammate_id', TType.I32, 6)
            oprot.writeI32(self.first_teammate_id)
            oprot.writeFieldEnd()
        if self.second_teammate_id is not None:
            oprot.writeFieldBegin('second_teammate_id', TType.I32, 7)
            oprot.writeI32(self.second_teammate_id)
            oprot.writeFieldEnd()
        if self.first_opponent_id is not None:
            oprot.writeFieldBegin('first_opponent_id', TType.I32, 8)
            oprot.writeI32(self.first_opponent_id)
            oprot.writeFieldEnd()
        if self.second_opponent_id is not None:
            oprot.writeFieldBegin('second_opponent_id', TType.I32, 9)
            oprot.writeI32(self.second_opponent_id)
            oprot.writeFieldEnd()
        if self.self_intercept_info is not None:
            oprot.writeFieldBegin('self_intercept_info', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.self_intercept_info))
            for iter6 in self.self_intercept_info:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WorldModel(object):
    """
    Attributes:
     - intercept_table
     - our_team_name
     - their_team_name
     - our_side
     - last_set_play_start_time
     - myself
     - ball
     - teammates
     - opponents
     - unknowns
     - our_players_dict
     - their_players_dict
     - our_goalie_uniform_number
     - their_goalie_uniform_number
     - offside_line_x
     - offside_line_x_count
     - kickable_teammate_id
     - kickable_opponent_id
     - last_kick_side
     - last_kicker_uniform_number
     - cycle
     - game_mode_type
     - left_team_score
     - right_team_score
     - is_our_set_play
     - is_their_set_play
     - stoped_cycle
     - our_team_score
     - their_team_score
     - is_penalty_kick_mode
     - helios_home_positions

    """


    def __init__(self, intercept_table=None, our_team_name=None, their_team_name=None, our_side=None, last_set_play_start_time=None, myself=None, ball=None, teammates=None, opponents=None, unknowns=None, our_players_dict=None, their_players_dict=None, our_goalie_uniform_number=None, their_goalie_uniform_number=None, offside_line_x=None, offside_line_x_count=None, kickable_teammate_id=None, kickable_opponent_id=None, last_kick_side=None, last_kicker_uniform_number=None, cycle=None, game_mode_type=None, left_team_score=None, right_team_score=None, is_our_set_play=None, is_their_set_play=None, stoped_cycle=None, our_team_score=None, their_team_score=None, is_penalty_kick_mode=None, helios_home_positions=None,):
        self.intercept_table = intercept_table
        self.our_team_name = our_team_name
        self.their_team_name = their_team_name
        self.our_side = our_side
        self.last_set_play_start_time = last_set_play_start_time
        self.myself = myself
        self.ball = ball
        self.teammates = teammates
        self.opponents = opponents
        self.unknowns = unknowns
        self.our_players_dict = our_players_dict
        self.their_players_dict = their_players_dict
        self.our_goalie_uniform_number = our_goalie_uniform_number
        self.their_goalie_uniform_number = their_goalie_uniform_number
        self.offside_line_x = offside_line_x
        self.offside_line_x_count = offside_line_x_count
        self.kickable_teammate_id = kickable_teammate_id
        self.kickable_opponent_id = kickable_opponent_id
        self.last_kick_side = last_kick_side
        self.last_kicker_uniform_number = last_kicker_uniform_number
        self.cycle = cycle
        self.game_mode_type = game_mode_type
        self.left_team_score = left_team_score
        self.right_team_score = right_team_score
        self.is_our_set_play = is_our_set_play
        self.is_their_set_play = is_their_set_play
        self.stoped_cycle = stoped_cycle
        self.our_team_score = our_team_score
        self.their_team_score = their_team_score
        self.is_penalty_kick_mode = is_penalty_kick_mode
        self.helios_home_positions = helios_home_positions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.intercept_table = InterceptTable()
                    self.intercept_table.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.our_team_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.their_team_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.our_side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.last_set_play_start_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.myself = Self()
                    self.myself.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.ball = Ball()
                    self.ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.teammates = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Player()
                        _elem12.read(iprot)
                        self.teammates.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.opponents = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = Player()
                        _elem18.read(iprot)
                        self.opponents.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.unknowns = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = Player()
                        _elem24.read(iprot)
                        self.unknowns.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.our_players_dict = {}
                    (_ktype26, _vtype27, _size25) = iprot.readMapBegin()
                    for _i29 in range(_size25):
                        _key30 = iprot.readI32()
                        _val31 = Player()
                        _val31.read(iprot)
                        self.our_players_dict[_key30] = _val31
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.their_players_dict = {}
                    (_ktype33, _vtype34, _size32) = iprot.readMapBegin()
                    for _i36 in range(_size32):
                        _key37 = iprot.readI32()
                        _val38 = Player()
                        _val38.read(iprot)
                        self.their_players_dict[_key37] = _val38
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.our_goalie_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.their_goalie_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.offside_line_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.offside_line_x_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.kickable_teammate_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.kickable_opponent_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.last_kick_side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.last_kicker_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.game_mode_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.left_team_score = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.right_team_score = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.is_our_set_play = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.is_their_set_play = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.stoped_cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.our_team_score = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.their_team_score = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.is_penalty_kick_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.MAP:
                    self.helios_home_positions = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = iprot.readI32()
                        _val45 = ThriftVector2D()
                        _val45.read(iprot)
                        self.helios_home_positions[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WorldModel')
        if self.intercept_table is not None:
            oprot.writeFieldBegin('intercept_table', TType.STRUCT, 1)
            self.intercept_table.write(oprot)
            oprot.writeFieldEnd()
        if self.our_team_name is not None:
            oprot.writeFieldBegin('our_team_name', TType.STRING, 2)
            oprot.writeString(self.our_team_name.encode('utf-8') if sys.version_info[0] == 2 else self.our_team_name)
            oprot.writeFieldEnd()
        if self.their_team_name is not None:
            oprot.writeFieldBegin('their_team_name', TType.STRING, 3)
            oprot.writeString(self.their_team_name.encode('utf-8') if sys.version_info[0] == 2 else self.their_team_name)
            oprot.writeFieldEnd()
        if self.our_side is not None:
            oprot.writeFieldBegin('our_side', TType.I32, 4)
            oprot.writeI32(self.our_side)
            oprot.writeFieldEnd()
        if self.last_set_play_start_time is not None:
            oprot.writeFieldBegin('last_set_play_start_time', TType.I32, 5)
            oprot.writeI32(self.last_set_play_start_time)
            oprot.writeFieldEnd()
        if self.myself is not None:
            oprot.writeFieldBegin('myself', TType.STRUCT, 6)
            self.myself.write(oprot)
            oprot.writeFieldEnd()
        if self.ball is not None:
            oprot.writeFieldBegin('ball', TType.STRUCT, 7)
            self.ball.write(oprot)
            oprot.writeFieldEnd()
        if self.teammates is not None:
            oprot.writeFieldBegin('teammates', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.teammates))
            for iter46 in self.teammates:
                iter46.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.opponents is not None:
            oprot.writeFieldBegin('opponents', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.opponents))
            for iter47 in self.opponents:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.unknowns is not None:
            oprot.writeFieldBegin('unknowns', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.unknowns))
            for iter48 in self.unknowns:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.our_players_dict is not None:
            oprot.writeFieldBegin('our_players_dict', TType.MAP, 11)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.our_players_dict))
            for kiter49, viter50 in self.our_players_dict.items():
                oprot.writeI32(kiter49)
                viter50.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.their_players_dict is not None:
            oprot.writeFieldBegin('their_players_dict', TType.MAP, 12)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.their_players_dict))
            for kiter51, viter52 in self.their_players_dict.items():
                oprot.writeI32(kiter51)
                viter52.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.our_goalie_uniform_number is not None:
            oprot.writeFieldBegin('our_goalie_uniform_number', TType.I32, 13)
            oprot.writeI32(self.our_goalie_uniform_number)
            oprot.writeFieldEnd()
        if self.their_goalie_uniform_number is not None:
            oprot.writeFieldBegin('their_goalie_uniform_number', TType.I32, 14)
            oprot.writeI32(self.their_goalie_uniform_number)
            oprot.writeFieldEnd()
        if self.offside_line_x is not None:
            oprot.writeFieldBegin('offside_line_x', TType.DOUBLE, 15)
            oprot.writeDouble(self.offside_line_x)
            oprot.writeFieldEnd()
        if self.offside_line_x_count is not None:
            oprot.writeFieldBegin('offside_line_x_count', TType.I32, 16)
            oprot.writeI32(self.offside_line_x_count)
            oprot.writeFieldEnd()
        if self.kickable_teammate_id is not None:
            oprot.writeFieldBegin('kickable_teammate_id', TType.I32, 17)
            oprot.writeI32(self.kickable_teammate_id)
            oprot.writeFieldEnd()
        if self.kickable_opponent_id is not None:
            oprot.writeFieldBegin('kickable_opponent_id', TType.I32, 18)
            oprot.writeI32(self.kickable_opponent_id)
            oprot.writeFieldEnd()
        if self.last_kick_side is not None:
            oprot.writeFieldBegin('last_kick_side', TType.I32, 19)
            oprot.writeI32(self.last_kick_side)
            oprot.writeFieldEnd()
        if self.last_kicker_uniform_number is not None:
            oprot.writeFieldBegin('last_kicker_uniform_number', TType.I32, 20)
            oprot.writeI32(self.last_kicker_uniform_number)
            oprot.writeFieldEnd()
        if self.cycle is not None:
            oprot.writeFieldBegin('cycle', TType.I32, 21)
            oprot.writeI32(self.cycle)
            oprot.writeFieldEnd()
        if self.game_mode_type is not None:
            oprot.writeFieldBegin('game_mode_type', TType.I32, 22)
            oprot.writeI32(self.game_mode_type)
            oprot.writeFieldEnd()
        if self.left_team_score is not None:
            oprot.writeFieldBegin('left_team_score', TType.I32, 23)
            oprot.writeI32(self.left_team_score)
            oprot.writeFieldEnd()
        if self.right_team_score is not None:
            oprot.writeFieldBegin('right_team_score', TType.I32, 24)
            oprot.writeI32(self.right_team_score)
            oprot.writeFieldEnd()
        if self.is_our_set_play is not None:
            oprot.writeFieldBegin('is_our_set_play', TType.BOOL, 25)
            oprot.writeBool(self.is_our_set_play)
            oprot.writeFieldEnd()
        if self.is_their_set_play is not None:
            oprot.writeFieldBegin('is_their_set_play', TType.BOOL, 26)
            oprot.writeBool(self.is_their_set_play)
            oprot.writeFieldEnd()
        if self.stoped_cycle is not None:
            oprot.writeFieldBegin('stoped_cycle', TType.I32, 27)
            oprot.writeI32(self.stoped_cycle)
            oprot.writeFieldEnd()
        if self.our_team_score is not None:
            oprot.writeFieldBegin('our_team_score', TType.I32, 28)
            oprot.writeI32(self.our_team_score)
            oprot.writeFieldEnd()
        if self.their_team_score is not None:
            oprot.writeFieldBegin('their_team_score', TType.I32, 29)
            oprot.writeI32(self.their_team_score)
            oprot.writeFieldEnd()
        if self.is_penalty_kick_mode is not None:
            oprot.writeFieldBegin('is_penalty_kick_mode', TType.BOOL, 30)
            oprot.writeBool(self.is_penalty_kick_mode)
            oprot.writeFieldEnd()
        if self.helios_home_positions is not None:
            oprot.writeFieldBegin('helios_home_positions', TType.MAP, 31)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.helios_home_positions))
            for kiter53, viter54 in self.helios_home_positions.items():
                oprot.writeI32(kiter53)
                viter54.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class State(object):
    """
    Attributes:
     - agent_type
     - world_model
     - full_world_model

    """


    def __init__(self, agent_type=None, world_model=None, full_world_model=None,):
        self.agent_type = agent_type
        self.world_model = world_model
        self.full_world_model = full_world_model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.agent_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.world_model = WorldModel()
                    self.world_model.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.full_world_model = WorldModel()
                    self.full_world_model.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('State')
        if self.agent_type is not None:
            oprot.writeFieldBegin('agent_type', TType.I32, 1)
            oprot.writeI32(self.agent_type)
            oprot.writeFieldEnd()
        if self.world_model is not None:
            oprot.writeFieldBegin('world_model', TType.STRUCT, 2)
            self.world_model.write(oprot)
            oprot.writeFieldEnd()
        if self.full_world_model is not None:
            oprot.writeFieldBegin('full_world_model', TType.STRUCT, 3)
            self.full_world_model.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitMessage(object):
    """
    Attributes:
     - agent_type
     - debug_mode

    """


    def __init__(self, agent_type=None, debug_mode=None,):
        self.agent_type = agent_type
        self.debug_mode = debug_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.agent_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.debug_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitMessage')
        if self.agent_type is not None:
            oprot.writeFieldBegin('agent_type', TType.I32, 1)
            oprot.writeI32(self.agent_type)
            oprot.writeFieldEnd()
        if self.debug_mode is not None:
            oprot.writeFieldBegin('debug_mode', TType.BOOL, 2)
            oprot.writeBool(self.debug_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Dash(object):
    """
    Attributes:
     - power
     - relative_direction

    """


    def __init__(self, power=None, relative_direction=None,):
        self.power = power
        self.relative_direction = relative_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.relative_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Dash')
        if self.power is not None:
            oprot.writeFieldBegin('power', TType.DOUBLE, 1)
            oprot.writeDouble(self.power)
            oprot.writeFieldEnd()
        if self.relative_direction is not None:
            oprot.writeFieldBegin('relative_direction', TType.DOUBLE, 2)
            oprot.writeDouble(self.relative_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Turn(object):
    """
    Attributes:
     - relative_direction

    """


    def __init__(self, relative_direction=None,):
        self.relative_direction = relative_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.relative_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Turn')
        if self.relative_direction is not None:
            oprot.writeFieldBegin('relative_direction', TType.DOUBLE, 1)
            oprot.writeDouble(self.relative_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Kick(object):
    """
    Attributes:
     - power
     - relative_direction

    """


    def __init__(self, power=None, relative_direction=None,):
        self.power = power
        self.relative_direction = relative_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.relative_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Kick')
        if self.power is not None:
            oprot.writeFieldBegin('power', TType.DOUBLE, 1)
            oprot.writeDouble(self.power)
            oprot.writeFieldEnd()
        if self.relative_direction is not None:
            oprot.writeFieldBegin('relative_direction', TType.DOUBLE, 2)
            oprot.writeDouble(self.relative_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tackle(object):
    """
    Attributes:
     - power_or_dir
     - foul

    """


    def __init__(self, power_or_dir=None, foul=None,):
        self.power_or_dir = power_or_dir
        self.foul = foul

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.power_or_dir = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.foul = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tackle')
        if self.power_or_dir is not None:
            oprot.writeFieldBegin('power_or_dir', TType.DOUBLE, 1)
            oprot.writeDouble(self.power_or_dir)
            oprot.writeFieldEnd()
        if self.foul is not None:
            oprot.writeFieldBegin('foul', TType.BOOL, 2)
            oprot.writeBool(self.foul)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Catch(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Catch')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Move(object):
    """
    Attributes:
     - x
     - y

    """


    def __init__(self, x=None, y=None,):
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Move')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TurnNeck(object):
    """
    Attributes:
     - moment

    """


    def __init__(self, moment=None,):
        self.moment = moment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TurnNeck')
        if self.moment is not None:
            oprot.writeFieldBegin('moment', TType.DOUBLE, 1)
            oprot.writeDouble(self.moment)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChangeView(object):
    """
    Attributes:
     - view_width

    """


    def __init__(self, view_width=None,):
        self.view_width = view_width

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.view_width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChangeView')
        if self.view_width is not None:
            oprot.writeFieldBegin('view_width', TType.I32, 1)
            oprot.writeI32(self.view_width)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BallMessage(object):
    """
    Attributes:
     - ball_position
     - ball_velocity

    """


    def __init__(self, ball_position=None, ball_velocity=None,):
        self.ball_position = ball_position
        self.ball_velocity = ball_velocity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ball_position = ThriftVector2D()
                    self.ball_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ball_velocity = ThriftVector2D()
                    self.ball_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BallMessage')
        if self.ball_position is not None:
            oprot.writeFieldBegin('ball_position', TType.STRUCT, 1)
            self.ball_position.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_velocity is not None:
            oprot.writeFieldBegin('ball_velocity', TType.STRUCT, 2)
            self.ball_velocity.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PassMessage(object):
    """
    Attributes:
     - receiver_uniform_number
     - receiver_point
     - ball_position
     - ball_velocity

    """


    def __init__(self, receiver_uniform_number=None, receiver_point=None, ball_position=None, ball_velocity=None,):
        self.receiver_uniform_number = receiver_uniform_number
        self.receiver_point = receiver_point
        self.ball_position = ball_position
        self.ball_velocity = ball_velocity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.receiver_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.receiver_point = ThriftVector2D()
                    self.receiver_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ball_position = ThriftVector2D()
                    self.ball_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ball_velocity = ThriftVector2D()
                    self.ball_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PassMessage')
        if self.receiver_uniform_number is not None:
            oprot.writeFieldBegin('receiver_uniform_number', TType.I32, 1)
            oprot.writeI32(self.receiver_uniform_number)
            oprot.writeFieldEnd()
        if self.receiver_point is not None:
            oprot.writeFieldBegin('receiver_point', TType.STRUCT, 2)
            self.receiver_point.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_position is not None:
            oprot.writeFieldBegin('ball_position', TType.STRUCT, 3)
            self.ball_position.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_velocity is not None:
            oprot.writeFieldBegin('ball_velocity', TType.STRUCT, 4)
            self.ball_velocity.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InterceptMessage(object):
    """
    Attributes:
     - our
     - uniform_number
     - cycle

    """


    def __init__(self, our=None, uniform_number=None, cycle=None,):
        self.our = our
        self.uniform_number = uniform_number
        self.cycle = cycle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.our = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InterceptMessage')
        if self.our is not None:
            oprot.writeFieldBegin('our', TType.BOOL, 1)
            oprot.writeBool(self.our)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 2)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.cycle is not None:
            oprot.writeFieldBegin('cycle', TType.I32, 3)
            oprot.writeI32(self.cycle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GoalieMessage(object):
    """
    Attributes:
     - goalie_uniform_number
     - goalie_position
     - goalie_body_direction

    """


    def __init__(self, goalie_uniform_number=None, goalie_position=None, goalie_body_direction=None,):
        self.goalie_uniform_number = goalie_uniform_number
        self.goalie_position = goalie_position
        self.goalie_body_direction = goalie_body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.goalie_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.goalie_position = ThriftVector2D()
                    self.goalie_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.goalie_body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GoalieMessage')
        if self.goalie_uniform_number is not None:
            oprot.writeFieldBegin('goalie_uniform_number', TType.I32, 1)
            oprot.writeI32(self.goalie_uniform_number)
            oprot.writeFieldEnd()
        if self.goalie_position is not None:
            oprot.writeFieldBegin('goalie_position', TType.STRUCT, 2)
            self.goalie_position.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_body_direction is not None:
            oprot.writeFieldBegin('goalie_body_direction', TType.DOUBLE, 3)
            oprot.writeDouble(self.goalie_body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GoalieAndPlayerMessage(object):
    """
    Attributes:
     - goalie_uniform_number
     - goalie_position
     - goalie_body_direction
     - player_uniform_number
     - player_position

    """


    def __init__(self, goalie_uniform_number=None, goalie_position=None, goalie_body_direction=None, player_uniform_number=None, player_position=None,):
        self.goalie_uniform_number = goalie_uniform_number
        self.goalie_position = goalie_position
        self.goalie_body_direction = goalie_body_direction
        self.player_uniform_number = player_uniform_number
        self.player_position = player_position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.goalie_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.goalie_position = ThriftVector2D()
                    self.goalie_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.goalie_body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.player_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.player_position = ThriftVector2D()
                    self.player_position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GoalieAndPlayerMessage')
        if self.goalie_uniform_number is not None:
            oprot.writeFieldBegin('goalie_uniform_number', TType.I32, 1)
            oprot.writeI32(self.goalie_uniform_number)
            oprot.writeFieldEnd()
        if self.goalie_position is not None:
            oprot.writeFieldBegin('goalie_position', TType.STRUCT, 2)
            self.goalie_position.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_body_direction is not None:
            oprot.writeFieldBegin('goalie_body_direction', TType.DOUBLE, 3)
            oprot.writeDouble(self.goalie_body_direction)
            oprot.writeFieldEnd()
        if self.player_uniform_number is not None:
            oprot.writeFieldBegin('player_uniform_number', TType.I32, 4)
            oprot.writeI32(self.player_uniform_number)
            oprot.writeFieldEnd()
        if self.player_position is not None:
            oprot.writeFieldBegin('player_position', TType.STRUCT, 5)
            self.player_position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OffsideLineMessage(object):
    """
    Attributes:
     - offside_line_x

    """


    def __init__(self, offside_line_x=None,):
        self.offside_line_x = offside_line_x

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.offside_line_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OffsideLineMessage')
        if self.offside_line_x is not None:
            oprot.writeFieldBegin('offside_line_x', TType.DOUBLE, 1)
            oprot.writeDouble(self.offside_line_x)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DefenseLineMessage(object):
    """
    Attributes:
     - defense_line_x

    """


    def __init__(self, defense_line_x=None,):
        self.defense_line_x = defense_line_x

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.defense_line_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DefenseLineMessage')
        if self.defense_line_x is not None:
            oprot.writeFieldBegin('defense_line_x', TType.DOUBLE, 1)
            oprot.writeDouble(self.defense_line_x)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WaitRequestMessage(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WaitRequestMessage')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SetplayMessage(object):
    """
    Attributes:
     - wait_step

    """


    def __init__(self, wait_step=None,):
        self.wait_step = wait_step

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.wait_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetplayMessage')
        if self.wait_step is not None:
            oprot.writeFieldBegin('wait_step', TType.I32, 1)
            oprot.writeI32(self.wait_step)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PassRequestMessage(object):
    """
    Attributes:
     - target_point

    """


    def __init__(self, target_point=None,):
        self.target_point = target_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PassRequestMessage')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StaminaMessage(object):
    """
    Attributes:
     - stamina

    """


    def __init__(self, stamina=None,):
        self.stamina = stamina

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StaminaMessage')
        if self.stamina is not None:
            oprot.writeFieldBegin('stamina', TType.DOUBLE, 1)
            oprot.writeDouble(self.stamina)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecoveryMessage(object):
    """
    Attributes:
     - recovery

    """


    def __init__(self, recovery=None,):
        self.recovery = recovery

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.recovery = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecoveryMessage')
        if self.recovery is not None:
            oprot.writeFieldBegin('recovery', TType.DOUBLE, 1)
            oprot.writeDouble(self.recovery)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StaminaCapacityMessage(object):
    """
    Attributes:
     - stamina_capacity

    """


    def __init__(self, stamina_capacity=None,):
        self.stamina_capacity = stamina_capacity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.stamina_capacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StaminaCapacityMessage')
        if self.stamina_capacity is not None:
            oprot.writeFieldBegin('stamina_capacity', TType.DOUBLE, 1)
            oprot.writeDouble(self.stamina_capacity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DribbleMessage(object):
    """
    Attributes:
     - target_point
     - queue_count

    """


    def __init__(self, target_point=None, queue_count=None,):
        self.target_point = target_point
        self.queue_count = queue_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.queue_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DribbleMessage')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.queue_count is not None:
            oprot.writeFieldBegin('queue_count', TType.I32, 2)
            oprot.writeI32(self.queue_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BallGoalieMessage(object):
    """
    Attributes:
     - ball_position
     - ball_velocity
     - goalie_position
     - goalie_body_direction

    """


    def __init__(self, ball_position=None, ball_velocity=None, goalie_position=None, goalie_body_direction=None,):
        self.ball_position = ball_position
        self.ball_velocity = ball_velocity
        self.goalie_position = goalie_position
        self.goalie_body_direction = goalie_body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ball_position = ThriftVector2D()
                    self.ball_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ball_velocity = ThriftVector2D()
                    self.ball_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.goalie_position = ThriftVector2D()
                    self.goalie_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.goalie_body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BallGoalieMessage')
        if self.ball_position is not None:
            oprot.writeFieldBegin('ball_position', TType.STRUCT, 1)
            self.ball_position.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_velocity is not None:
            oprot.writeFieldBegin('ball_velocity', TType.STRUCT, 2)
            self.ball_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_position is not None:
            oprot.writeFieldBegin('goalie_position', TType.STRUCT, 3)
            self.goalie_position.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_body_direction is not None:
            oprot.writeFieldBegin('goalie_body_direction', TType.DOUBLE, 4)
            oprot.writeDouble(self.goalie_body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OnePlayerMessage(object):
    """
    Attributes:
     - uniform_number
     - position

    """


    def __init__(self, uniform_number=None, position=None,):
        self.uniform_number = uniform_number
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OnePlayerMessage')
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 1)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPlayerMessage(object):
    """
    Attributes:
     - first_uniform_number
     - first_position
     - second_uniform_number
     - second_position

    """


    def __init__(self, first_uniform_number=None, first_position=None, second_uniform_number=None, second_position=None,):
        self.first_uniform_number = first_uniform_number
        self.first_position = first_position
        self.second_uniform_number = second_uniform_number
        self.second_position = second_position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.first_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.first_position = ThriftVector2D()
                    self.first_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.second_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.second_position = ThriftVector2D()
                    self.second_position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPlayerMessage')
        if self.first_uniform_number is not None:
            oprot.writeFieldBegin('first_uniform_number', TType.I32, 1)
            oprot.writeI32(self.first_uniform_number)
            oprot.writeFieldEnd()
        if self.first_position is not None:
            oprot.writeFieldBegin('first_position', TType.STRUCT, 2)
            self.first_position.write(oprot)
            oprot.writeFieldEnd()
        if self.second_uniform_number is not None:
            oprot.writeFieldBegin('second_uniform_number', TType.I32, 3)
            oprot.writeI32(self.second_uniform_number)
            oprot.writeFieldEnd()
        if self.second_position is not None:
            oprot.writeFieldBegin('second_position', TType.STRUCT, 4)
            self.second_position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThreePlayerMessage(object):
    """
    Attributes:
     - first_uniform_number
     - first_position
     - second_uniform_number
     - second_position
     - third_uniform_number
     - third_position

    """


    def __init__(self, first_uniform_number=None, first_position=None, second_uniform_number=None, second_position=None, third_uniform_number=None, third_position=None,):
        self.first_uniform_number = first_uniform_number
        self.first_position = first_position
        self.second_uniform_number = second_uniform_number
        self.second_position = second_position
        self.third_uniform_number = third_uniform_number
        self.third_position = third_position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.first_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.first_position = ThriftVector2D()
                    self.first_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.second_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.second_position = ThriftVector2D()
                    self.second_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.third_uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.third_position = ThriftVector2D()
                    self.third_position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThreePlayerMessage')
        if self.first_uniform_number is not None:
            oprot.writeFieldBegin('first_uniform_number', TType.I32, 1)
            oprot.writeI32(self.first_uniform_number)
            oprot.writeFieldEnd()
        if self.first_position is not None:
            oprot.writeFieldBegin('first_position', TType.STRUCT, 2)
            self.first_position.write(oprot)
            oprot.writeFieldEnd()
        if self.second_uniform_number is not None:
            oprot.writeFieldBegin('second_uniform_number', TType.I32, 3)
            oprot.writeI32(self.second_uniform_number)
            oprot.writeFieldEnd()
        if self.second_position is not None:
            oprot.writeFieldBegin('second_position', TType.STRUCT, 4)
            self.second_position.write(oprot)
            oprot.writeFieldEnd()
        if self.third_uniform_number is not None:
            oprot.writeFieldBegin('third_uniform_number', TType.I32, 5)
            oprot.writeI32(self.third_uniform_number)
            oprot.writeFieldEnd()
        if self.third_position is not None:
            oprot.writeFieldBegin('third_position', TType.STRUCT, 6)
            self.third_position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SelfMessage(object):
    """
    Attributes:
     - self_position
     - self_body_direction
     - self_stamina

    """


    def __init__(self, self_position=None, self_body_direction=None, self_stamina=None,):
        self.self_position = self_position
        self.self_body_direction = self_body_direction
        self.self_stamina = self_stamina

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.self_position = ThriftVector2D()
                    self.self_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.self_body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.self_stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SelfMessage')
        if self.self_position is not None:
            oprot.writeFieldBegin('self_position', TType.STRUCT, 1)
            self.self_position.write(oprot)
            oprot.writeFieldEnd()
        if self.self_body_direction is not None:
            oprot.writeFieldBegin('self_body_direction', TType.DOUBLE, 2)
            oprot.writeDouble(self.self_body_direction)
            oprot.writeFieldEnd()
        if self.self_stamina is not None:
            oprot.writeFieldBegin('self_stamina', TType.DOUBLE, 3)
            oprot.writeDouble(self.self_stamina)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TeammateMessage(object):
    """
    Attributes:
     - uniform_number
     - position
     - body_direction

    """


    def __init__(self, uniform_number=None, position=None, body_direction=None,):
        self.uniform_number = uniform_number
        self.position = position
        self.body_direction = body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TeammateMessage')
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 1)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 3)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpponentMessage(object):
    """
    Attributes:
     - uniform_number
     - position
     - body_direction

    """


    def __init__(self, uniform_number=None, position=None, body_direction=None,):
        self.uniform_number = uniform_number
        self.position = position
        self.body_direction = body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpponentMessage')
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 1)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 3)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BallPlayerMessage(object):
    """
    Attributes:
     - ball_position
     - ball_velocity
     - uniform_number
     - player_position
     - body_direction

    """


    def __init__(self, ball_position=None, ball_velocity=None, uniform_number=None, player_position=None, body_direction=None,):
        self.ball_position = ball_position
        self.ball_velocity = ball_velocity
        self.uniform_number = uniform_number
        self.player_position = player_position
        self.body_direction = body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ball_position = ThriftVector2D()
                    self.ball_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ball_velocity = ThriftVector2D()
                    self.ball_velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.player_position = ThriftVector2D()
                    self.player_position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BallPlayerMessage')
        if self.ball_position is not None:
            oprot.writeFieldBegin('ball_position', TType.STRUCT, 1)
            self.ball_position.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_velocity is not None:
            oprot.writeFieldBegin('ball_velocity', TType.STRUCT, 2)
            self.ball_velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 3)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.player_position is not None:
            oprot.writeFieldBegin('player_position', TType.STRUCT, 4)
            self.player_position.write(oprot)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 5)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Say(object):
    """
    Attributes:
     - ball_message
     - pass_message
     - intercept_message
     - goalie_message
     - goalie_and_player_message
     - offside_line_message
     - defense_line_message
     - wait_request_message
     - setplay_message
     - pass_request_message
     - stamina_message
     - recovery_message
     - stamina_capacity_message
     - dribble_message
     - ball_goalie_message
     - one_player_message
     - two_player_message
     - three_player_message
     - self_message
     - teammate_message
     - opponent_message
     - ball_player_message

    """


    def __init__(self, ball_message=None, pass_message=None, intercept_message=None, goalie_message=None, goalie_and_player_message=None, offside_line_message=None, defense_line_message=None, wait_request_message=None, setplay_message=None, pass_request_message=None, stamina_message=None, recovery_message=None, stamina_capacity_message=None, dribble_message=None, ball_goalie_message=None, one_player_message=None, two_player_message=None, three_player_message=None, self_message=None, teammate_message=None, opponent_message=None, ball_player_message=None,):
        self.ball_message = ball_message
        self.pass_message = pass_message
        self.intercept_message = intercept_message
        self.goalie_message = goalie_message
        self.goalie_and_player_message = goalie_and_player_message
        self.offside_line_message = offside_line_message
        self.defense_line_message = defense_line_message
        self.wait_request_message = wait_request_message
        self.setplay_message = setplay_message
        self.pass_request_message = pass_request_message
        self.stamina_message = stamina_message
        self.recovery_message = recovery_message
        self.stamina_capacity_message = stamina_capacity_message
        self.dribble_message = dribble_message
        self.ball_goalie_message = ball_goalie_message
        self.one_player_message = one_player_message
        self.two_player_message = two_player_message
        self.three_player_message = three_player_message
        self.self_message = self_message
        self.teammate_message = teammate_message
        self.opponent_message = opponent_message
        self.ball_player_message = ball_player_message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ball_message = BallMessage()
                    self.ball_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.pass_message = PassMessage()
                    self.pass_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.intercept_message = InterceptMessage()
                    self.intercept_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.goalie_message = GoalieMessage()
                    self.goalie_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.goalie_and_player_message = GoalieAndPlayerMessage()
                    self.goalie_and_player_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.offside_line_message = OffsideLineMessage()
                    self.offside_line_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.defense_line_message = DefenseLineMessage()
                    self.defense_line_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.wait_request_message = WaitRequestMessage()
                    self.wait_request_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.setplay_message = SetplayMessage()
                    self.setplay_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.pass_request_message = PassRequestMessage()
                    self.pass_request_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.stamina_message = StaminaMessage()
                    self.stamina_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.recovery_message = RecoveryMessage()
                    self.recovery_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.stamina_capacity_message = StaminaCapacityMessage()
                    self.stamina_capacity_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.dribble_message = DribbleMessage()
                    self.dribble_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.ball_goalie_message = BallGoalieMessage()
                    self.ball_goalie_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.one_player_message = OnePlayerMessage()
                    self.one_player_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.two_player_message = TwoPlayerMessage()
                    self.two_player_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.three_player_message = ThreePlayerMessage()
                    self.three_player_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.self_message = SelfMessage()
                    self.self_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.teammate_message = TeammateMessage()
                    self.teammate_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.opponent_message = OpponentMessage()
                    self.opponent_message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.ball_player_message = BallPlayerMessage()
                    self.ball_player_message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Say')
        if self.ball_message is not None:
            oprot.writeFieldBegin('ball_message', TType.STRUCT, 1)
            self.ball_message.write(oprot)
            oprot.writeFieldEnd()
        if self.pass_message is not None:
            oprot.writeFieldBegin('pass_message', TType.STRUCT, 2)
            self.pass_message.write(oprot)
            oprot.writeFieldEnd()
        if self.intercept_message is not None:
            oprot.writeFieldBegin('intercept_message', TType.STRUCT, 3)
            self.intercept_message.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_message is not None:
            oprot.writeFieldBegin('goalie_message', TType.STRUCT, 4)
            self.goalie_message.write(oprot)
            oprot.writeFieldEnd()
        if self.goalie_and_player_message is not None:
            oprot.writeFieldBegin('goalie_and_player_message', TType.STRUCT, 5)
            self.goalie_and_player_message.write(oprot)
            oprot.writeFieldEnd()
        if self.offside_line_message is not None:
            oprot.writeFieldBegin('offside_line_message', TType.STRUCT, 6)
            self.offside_line_message.write(oprot)
            oprot.writeFieldEnd()
        if self.defense_line_message is not None:
            oprot.writeFieldBegin('defense_line_message', TType.STRUCT, 7)
            self.defense_line_message.write(oprot)
            oprot.writeFieldEnd()
        if self.wait_request_message is not None:
            oprot.writeFieldBegin('wait_request_message', TType.STRUCT, 8)
            self.wait_request_message.write(oprot)
            oprot.writeFieldEnd()
        if self.setplay_message is not None:
            oprot.writeFieldBegin('setplay_message', TType.STRUCT, 9)
            self.setplay_message.write(oprot)
            oprot.writeFieldEnd()
        if self.pass_request_message is not None:
            oprot.writeFieldBegin('pass_request_message', TType.STRUCT, 10)
            self.pass_request_message.write(oprot)
            oprot.writeFieldEnd()
        if self.stamina_message is not None:
            oprot.writeFieldBegin('stamina_message', TType.STRUCT, 11)
            self.stamina_message.write(oprot)
            oprot.writeFieldEnd()
        if self.recovery_message is not None:
            oprot.writeFieldBegin('recovery_message', TType.STRUCT, 12)
            self.recovery_message.write(oprot)
            oprot.writeFieldEnd()
        if self.stamina_capacity_message is not None:
            oprot.writeFieldBegin('stamina_capacity_message', TType.STRUCT, 13)
            self.stamina_capacity_message.write(oprot)
            oprot.writeFieldEnd()
        if self.dribble_message is not None:
            oprot.writeFieldBegin('dribble_message', TType.STRUCT, 14)
            self.dribble_message.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_goalie_message is not None:
            oprot.writeFieldBegin('ball_goalie_message', TType.STRUCT, 15)
            self.ball_goalie_message.write(oprot)
            oprot.writeFieldEnd()
        if self.one_player_message is not None:
            oprot.writeFieldBegin('one_player_message', TType.STRUCT, 16)
            self.one_player_message.write(oprot)
            oprot.writeFieldEnd()
        if self.two_player_message is not None:
            oprot.writeFieldBegin('two_player_message', TType.STRUCT, 17)
            self.two_player_message.write(oprot)
            oprot.writeFieldEnd()
        if self.three_player_message is not None:
            oprot.writeFieldBegin('three_player_message', TType.STRUCT, 18)
            self.three_player_message.write(oprot)
            oprot.writeFieldEnd()
        if self.self_message is not None:
            oprot.writeFieldBegin('self_message', TType.STRUCT, 19)
            self.self_message.write(oprot)
            oprot.writeFieldEnd()
        if self.teammate_message is not None:
            oprot.writeFieldBegin('teammate_message', TType.STRUCT, 20)
            self.teammate_message.write(oprot)
            oprot.writeFieldEnd()
        if self.opponent_message is not None:
            oprot.writeFieldBegin('opponent_message', TType.STRUCT, 21)
            self.opponent_message.write(oprot)
            oprot.writeFieldEnd()
        if self.ball_player_message is not None:
            oprot.writeFieldBegin('ball_player_message', TType.STRUCT, 22)
            self.ball_player_message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointTo(object):
    """
    Attributes:
     - x
     - y

    """


    def __init__(self, x=None, y=None,):
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PointTo')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointToOf(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PointToOf')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AttentionTo(object):
    """
    Attributes:
     - side
     - unum

    """


    def __init__(self, side=None, unum=None,):
        self.side = side
        self.unum = unum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.unum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AttentionTo')
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 1)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.unum is not None:
            oprot.writeFieldBegin('unum', TType.I32, 2)
            oprot.writeI32(self.unum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AttentionToOf(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AttentionToOf')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddText(object):
    """
    Attributes:
     - level
     - message

    """


    def __init__(self, level=None, message=None,):
        self.level = level
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddText')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddPoint(object):
    """
    Attributes:
     - level
     - point
     - color

    """


    def __init__(self, level=None, point=None, color=None,):
        self.level = level
        self.point = point
        self.color = color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.point = ThriftVector2D()
                    self.point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddPoint')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.STRUCT, 2)
            self.point.write(oprot)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 3)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddLine(object):
    """
    Attributes:
     - level
     - start_point
     - end_point
     - color

    """


    def __init__(self, level=None, start_point=None, end_point=None, color=None,):
        self.level = level
        self.start_point = start_point
        self.end_point = end_point
        self.color = color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.start_point = ThriftVector2D()
                    self.start_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.end_point = ThriftVector2D()
                    self.end_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddLine')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.start_point is not None:
            oprot.writeFieldBegin('start_point', TType.STRUCT, 2)
            self.start_point.write(oprot)
            oprot.writeFieldEnd()
        if self.end_point is not None:
            oprot.writeFieldBegin('end_point', TType.STRUCT, 3)
            self.end_point.write(oprot)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddArc(object):
    """
    Attributes:
     - level
     - center
     - radius
     - start_angle
     - span_angel
     - color

    """


    def __init__(self, level=None, center=None, radius=None, start_angle=None, span_angel=None, color=None,):
        self.level = level
        self.center = center
        self.radius = radius
        self.start_angle = start_angle
        self.span_angel = span_angel
        self.color = color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.center = ThriftVector2D()
                    self.center.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.start_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.span_angel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddArc')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.center is not None:
            oprot.writeFieldBegin('center', TType.STRUCT, 2)
            self.center.write(oprot)
            oprot.writeFieldEnd()
        if self.radius is not None:
            oprot.writeFieldBegin('radius', TType.DOUBLE, 3)
            oprot.writeDouble(self.radius)
            oprot.writeFieldEnd()
        if self.start_angle is not None:
            oprot.writeFieldBegin('start_angle', TType.DOUBLE, 4)
            oprot.writeDouble(self.start_angle)
            oprot.writeFieldEnd()
        if self.span_angel is not None:
            oprot.writeFieldBegin('span_angel', TType.DOUBLE, 5)
            oprot.writeDouble(self.span_angel)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 6)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddCircle(object):
    """
    Attributes:
     - level
     - center
     - radius
     - color
     - fill

    """


    def __init__(self, level=None, center=None, radius=None, color=None, fill=None,):
        self.level = level
        self.center = center
        self.radius = radius
        self.color = color
        self.fill = fill

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.center = ThriftVector2D()
                    self.center.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.fill = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddCircle')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.center is not None:
            oprot.writeFieldBegin('center', TType.STRUCT, 2)
            self.center.write(oprot)
            oprot.writeFieldEnd()
        if self.radius is not None:
            oprot.writeFieldBegin('radius', TType.DOUBLE, 3)
            oprot.writeDouble(self.radius)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.fill is not None:
            oprot.writeFieldBegin('fill', TType.BOOL, 5)
            oprot.writeBool(self.fill)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddTriangle(object):
    """
    Attributes:
     - level
     - point1
     - point2
     - point3
     - color
     - fill

    """


    def __init__(self, level=None, point1=None, point2=None, point3=None, color=None, fill=None,):
        self.level = level
        self.point1 = point1
        self.point2 = point2
        self.point3 = point3
        self.color = color
        self.fill = fill

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.point1 = ThriftVector2D()
                    self.point1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.point2 = ThriftVector2D()
                    self.point2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.point3 = ThriftVector2D()
                    self.point3.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.fill = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTriangle')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.point1 is not None:
            oprot.writeFieldBegin('point1', TType.STRUCT, 2)
            self.point1.write(oprot)
            oprot.writeFieldEnd()
        if self.point2 is not None:
            oprot.writeFieldBegin('point2', TType.STRUCT, 3)
            self.point2.write(oprot)
            oprot.writeFieldEnd()
        if self.point3 is not None:
            oprot.writeFieldBegin('point3', TType.STRUCT, 4)
            self.point3.write(oprot)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 5)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.fill is not None:
            oprot.writeFieldBegin('fill', TType.BOOL, 6)
            oprot.writeBool(self.fill)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddRectangle(object):
    """
    Attributes:
     - level
     - left
     - top
     - length
     - width
     - color
     - fill

    """


    def __init__(self, level=None, left=None, top=None, length=None, width=None, color=None, fill=None,):
        self.level = level
        self.left = left
        self.top = top
        self.length = length
        self.width = width
        self.color = color
        self.fill = fill

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.left = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.top = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.fill = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddRectangle')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.left is not None:
            oprot.writeFieldBegin('left', TType.DOUBLE, 2)
            oprot.writeDouble(self.left)
            oprot.writeFieldEnd()
        if self.top is not None:
            oprot.writeFieldBegin('top', TType.DOUBLE, 3)
            oprot.writeDouble(self.top)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.DOUBLE, 4)
            oprot.writeDouble(self.length)
            oprot.writeFieldEnd()
        if self.width is not None:
            oprot.writeFieldBegin('width', TType.DOUBLE, 5)
            oprot.writeDouble(self.width)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 6)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.fill is not None:
            oprot.writeFieldBegin('fill', TType.BOOL, 7)
            oprot.writeBool(self.fill)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddSector(object):
    """
    Attributes:
     - level
     - center
     - min_radius
     - max_radius
     - start_angle
     - span_angel
     - color
     - fill

    """


    def __init__(self, level=None, center=None, min_radius=None, max_radius=None, start_angle=None, span_angel=None, color=None, fill=None,):
        self.level = level
        self.center = center
        self.min_radius = min_radius
        self.max_radius = max_radius
        self.start_angle = start_angle
        self.span_angel = span_angel
        self.color = color
        self.fill = fill

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.center = ThriftVector2D()
                    self.center.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.min_radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.max_radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.start_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.span_angel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.fill = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddSector')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.center is not None:
            oprot.writeFieldBegin('center', TType.STRUCT, 2)
            self.center.write(oprot)
            oprot.writeFieldEnd()
        if self.min_radius is not None:
            oprot.writeFieldBegin('min_radius', TType.DOUBLE, 3)
            oprot.writeDouble(self.min_radius)
            oprot.writeFieldEnd()
        if self.max_radius is not None:
            oprot.writeFieldBegin('max_radius', TType.DOUBLE, 4)
            oprot.writeDouble(self.max_radius)
            oprot.writeFieldEnd()
        if self.start_angle is not None:
            oprot.writeFieldBegin('start_angle', TType.DOUBLE, 5)
            oprot.writeDouble(self.start_angle)
            oprot.writeFieldEnd()
        if self.span_angel is not None:
            oprot.writeFieldBegin('span_angel', TType.DOUBLE, 6)
            oprot.writeDouble(self.span_angel)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 7)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.fill is not None:
            oprot.writeFieldBegin('fill', TType.BOOL, 8)
            oprot.writeBool(self.fill)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMessage(object):
    """
    Attributes:
     - level
     - position
     - message
     - color

    """


    def __init__(self, level=None, position=None, message=None, color=None,):
        self.level = level
        self.position = position
        self.message = message
        self.color = color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMessage')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Log(object):
    """
    Attributes:
     - add_text
     - add_point
     - add_line
     - add_arc
     - add_circle
     - add_triangle
     - add_rectangle
     - add_sector
     - add_message

    """


    def __init__(self, add_text=None, add_point=None, add_line=None, add_arc=None, add_circle=None, add_triangle=None, add_rectangle=None, add_sector=None, add_message=None,):
        self.add_text = add_text
        self.add_point = add_point
        self.add_line = add_line
        self.add_arc = add_arc
        self.add_circle = add_circle
        self.add_triangle = add_triangle
        self.add_rectangle = add_rectangle
        self.add_sector = add_sector
        self.add_message = add_message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.add_text = AddText()
                    self.add_text.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.add_point = AddPoint()
                    self.add_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.add_line = AddLine()
                    self.add_line.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.add_arc = AddArc()
                    self.add_arc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.add_circle = AddCircle()
                    self.add_circle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.add_triangle = AddTriangle()
                    self.add_triangle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.add_rectangle = AddRectangle()
                    self.add_rectangle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.add_sector = AddSector()
                    self.add_sector.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.add_message = AddMessage()
                    self.add_message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Log')
        if self.add_text is not None:
            oprot.writeFieldBegin('add_text', TType.STRUCT, 1)
            self.add_text.write(oprot)
            oprot.writeFieldEnd()
        if self.add_point is not None:
            oprot.writeFieldBegin('add_point', TType.STRUCT, 2)
            self.add_point.write(oprot)
            oprot.writeFieldEnd()
        if self.add_line is not None:
            oprot.writeFieldBegin('add_line', TType.STRUCT, 3)
            self.add_line.write(oprot)
            oprot.writeFieldEnd()
        if self.add_arc is not None:
            oprot.writeFieldBegin('add_arc', TType.STRUCT, 4)
            self.add_arc.write(oprot)
            oprot.writeFieldEnd()
        if self.add_circle is not None:
            oprot.writeFieldBegin('add_circle', TType.STRUCT, 5)
            self.add_circle.write(oprot)
            oprot.writeFieldEnd()
        if self.add_triangle is not None:
            oprot.writeFieldBegin('add_triangle', TType.STRUCT, 6)
            self.add_triangle.write(oprot)
            oprot.writeFieldEnd()
        if self.add_rectangle is not None:
            oprot.writeFieldBegin('add_rectangle', TType.STRUCT, 7)
            self.add_rectangle.write(oprot)
            oprot.writeFieldEnd()
        if self.add_sector is not None:
            oprot.writeFieldBegin('add_sector', TType.STRUCT, 8)
            self.add_sector.write(oprot)
            oprot.writeFieldEnd()
        if self.add_message is not None:
            oprot.writeFieldBegin('add_message', TType.STRUCT, 9)
            self.add_message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DebugClient(object):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DebugClient')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_GoToPoint(object):
    """
    Attributes:
     - target_point
     - distance_threshold
     - max_dash_power

    """


    def __init__(self, target_point=None, distance_threshold=None, max_dash_power=None,):
        self.target_point = target_point
        self.distance_threshold = distance_threshold
        self.max_dash_power = max_dash_power

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.max_dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_GoToPoint')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.distance_threshold is not None:
            oprot.writeFieldBegin('distance_threshold', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance_threshold)
            oprot.writeFieldEnd()
        if self.max_dash_power is not None:
            oprot.writeFieldBegin('max_dash_power', TType.DOUBLE, 3)
            oprot.writeDouble(self.max_dash_power)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_SmartKick(object):
    """
    Attributes:
     - target_point
     - first_speed
     - first_speed_threshold
     - max_steps

    """


    def __init__(self, target_point=None, first_speed=None, first_speed_threshold=None, max_steps=None,):
        self.target_point = target_point
        self.first_speed = first_speed
        self.first_speed_threshold = first_speed_threshold
        self.max_steps = max_steps

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.first_speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.first_speed_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.max_steps = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_SmartKick')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.first_speed is not None:
            oprot.writeFieldBegin('first_speed', TType.DOUBLE, 2)
            oprot.writeDouble(self.first_speed)
            oprot.writeFieldEnd()
        if self.first_speed_threshold is not None:
            oprot.writeFieldBegin('first_speed_threshold', TType.DOUBLE, 3)
            oprot.writeDouble(self.first_speed_threshold)
            oprot.writeFieldEnd()
        if self.max_steps is not None:
            oprot.writeFieldBegin('max_steps', TType.I32, 4)
            oprot.writeI32(self.max_steps)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_BeforeKickOff(object):
    """
    Attributes:
     - point

    """


    def __init__(self, point=None,):
        self.point = point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.point = ThriftVector2D()
                    self.point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_BeforeKickOff')
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.STRUCT, 1)
            self.point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_BodyNeckToBall(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_BodyNeckToBall')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_BodyNeckToPoint(object):
    """
    Attributes:
     - point

    """


    def __init__(self, point=None,):
        self.point = point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.point = ThriftVector2D()
                    self.point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_BodyNeckToPoint')
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.STRUCT, 1)
            self.point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_Emergency(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_Emergency')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_GoToPointLookBall(object):
    """
    Attributes:
     - target_point
     - distance_threshold
     - max_dash_power

    """


    def __init__(self, target_point=None, distance_threshold=None, max_dash_power=None,):
        self.target_point = target_point
        self.distance_threshold = distance_threshold
        self.max_dash_power = max_dash_power

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.max_dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_GoToPointLookBall')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.distance_threshold is not None:
            oprot.writeFieldBegin('distance_threshold', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance_threshold)
            oprot.writeFieldEnd()
        if self.max_dash_power is not None:
            oprot.writeFieldBegin('max_dash_power', TType.DOUBLE, 3)
            oprot.writeDouble(self.max_dash_power)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_NeckBodyToBall(object):
    """
    Attributes:
     - angle_buf

    """


    def __init__(self, angle_buf=None,):
        self.angle_buf = angle_buf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.angle_buf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_NeckBodyToBall')
        if self.angle_buf is not None:
            oprot.writeFieldBegin('angle_buf', TType.DOUBLE, 1)
            oprot.writeDouble(self.angle_buf)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_NeckBodyToPoint(object):
    """
    Attributes:
     - point
     - angle_buf

    """


    def __init__(self, point=None, angle_buf=None,):
        self.point = point
        self.angle_buf = angle_buf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.point = ThriftVector2D()
                    self.point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.angle_buf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_NeckBodyToPoint')
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.STRUCT, 1)
            self.point.write(oprot)
            oprot.writeFieldEnd()
        if self.angle_buf is not None:
            oprot.writeFieldBegin('angle_buf', TType.DOUBLE, 2)
            oprot.writeDouble(self.angle_buf)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bhv_ScanField(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bhv_ScanField')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_AdvanceBall(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_AdvanceBall')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_ClearBall(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_ClearBall')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_Dribble(object):
    """
    Attributes:
     - target_point
     - distance_threshold
     - dash_power
     - dash_count
     - dodge

    """


    def __init__(self, target_point=None, distance_threshold=None, dash_power=None, dash_count=None, dodge=None,):
        self.target_point = target_point
        self.distance_threshold = distance_threshold
        self.dash_power = dash_power
        self.dash_count = dash_count
        self.dodge = dodge

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dash_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.dodge = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_Dribble')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.distance_threshold is not None:
            oprot.writeFieldBegin('distance_threshold', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance_threshold)
            oprot.writeFieldEnd()
        if self.dash_power is not None:
            oprot.writeFieldBegin('dash_power', TType.DOUBLE, 3)
            oprot.writeDouble(self.dash_power)
            oprot.writeFieldEnd()
        if self.dash_count is not None:
            oprot.writeFieldBegin('dash_count', TType.I32, 4)
            oprot.writeI32(self.dash_count)
            oprot.writeFieldEnd()
        if self.dodge is not None:
            oprot.writeFieldBegin('dodge', TType.BOOL, 5)
            oprot.writeBool(self.dodge)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_GoToPointDodge(object):
    """
    Attributes:
     - target_point
     - dash_power

    """


    def __init__(self, target_point=None, dash_power=None,):
        self.target_point = target_point
        self.dash_power = dash_power

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_GoToPointDodge')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.dash_power is not None:
            oprot.writeFieldBegin('dash_power', TType.DOUBLE, 2)
            oprot.writeDouble(self.dash_power)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_HoldBall(object):
    """
    Attributes:
     - do_turn
     - turn_target_point
     - kick_target_point

    """


    def __init__(self, do_turn=None, turn_target_point=None, kick_target_point=None,):
        self.do_turn = do_turn
        self.turn_target_point = turn_target_point
        self.kick_target_point = kick_target_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.do_turn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.turn_target_point = ThriftVector2D()
                    self.turn_target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.kick_target_point = ThriftVector2D()
                    self.kick_target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_HoldBall')
        if self.do_turn is not None:
            oprot.writeFieldBegin('do_turn', TType.BOOL, 1)
            oprot.writeBool(self.do_turn)
            oprot.writeFieldEnd()
        if self.turn_target_point is not None:
            oprot.writeFieldBegin('turn_target_point', TType.STRUCT, 2)
            self.turn_target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.kick_target_point is not None:
            oprot.writeFieldBegin('kick_target_point', TType.STRUCT, 3)
            self.kick_target_point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_Intercept(object):
    """
    Attributes:
     - save_recovery
     - face_point

    """


    def __init__(self, save_recovery=None, face_point=None,):
        self.save_recovery = save_recovery
        self.face_point = face_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.save_recovery = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.face_point = ThriftVector2D()
                    self.face_point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_Intercept')
        if self.save_recovery is not None:
            oprot.writeFieldBegin('save_recovery', TType.BOOL, 1)
            oprot.writeBool(self.save_recovery)
            oprot.writeFieldEnd()
        if self.face_point is not None:
            oprot.writeFieldBegin('face_point', TType.STRUCT, 2)
            self.face_point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_KickOneStep(object):
    """
    Attributes:
     - target_point
     - first_speed
     - force_mode

    """


    def __init__(self, target_point=None, first_speed=None, force_mode=None,):
        self.target_point = target_point
        self.first_speed = first_speed
        self.force_mode = force_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.first_speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.force_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_KickOneStep')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.first_speed is not None:
            oprot.writeFieldBegin('first_speed', TType.DOUBLE, 2)
            oprot.writeDouble(self.first_speed)
            oprot.writeFieldEnd()
        if self.force_mode is not None:
            oprot.writeFieldBegin('force_mode', TType.BOOL, 3)
            oprot.writeBool(self.force_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_StopBall(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_StopBall')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_StopDash(object):
    """
    Attributes:
     - save_recovery

    """


    def __init__(self, save_recovery=None,):
        self.save_recovery = save_recovery

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.save_recovery = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_StopDash')
        if self.save_recovery is not None:
            oprot.writeFieldBegin('save_recovery', TType.BOOL, 1)
            oprot.writeBool(self.save_recovery)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_TackleToPoint(object):
    """
    Attributes:
     - target_point
     - min_probability
     - min_speed

    """


    def __init__(self, target_point=None, min_probability=None, min_speed=None,):
        self.target_point = target_point
        self.min_probability = min_probability
        self.min_speed = min_speed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.min_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.min_speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_TackleToPoint')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.min_probability is not None:
            oprot.writeFieldBegin('min_probability', TType.DOUBLE, 2)
            oprot.writeDouble(self.min_probability)
            oprot.writeFieldEnd()
        if self.min_speed is not None:
            oprot.writeFieldBegin('min_speed', TType.DOUBLE, 3)
            oprot.writeDouble(self.min_speed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_TurnToAngle(object):
    """
    Attributes:
     - angle

    """


    def __init__(self, angle=None,):
        self.angle = angle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_TurnToAngle')
        if self.angle is not None:
            oprot.writeFieldBegin('angle', TType.DOUBLE, 1)
            oprot.writeDouble(self.angle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_TurnToBall(object):
    """
    Attributes:
     - cycle

    """


    def __init__(self, cycle=None,):
        self.cycle = cycle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_TurnToBall')
        if self.cycle is not None:
            oprot.writeFieldBegin('cycle', TType.I32, 1)
            oprot.writeI32(self.cycle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Body_TurnToPoint(object):
    """
    Attributes:
     - target_point
     - cycle

    """


    def __init__(self, target_point=None, cycle=None,):
        self.target_point = target_point
        self.cycle = cycle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Body_TurnToPoint')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        if self.cycle is not None:
            oprot.writeFieldBegin('cycle', TType.I32, 2)
            oprot.writeI32(self.cycle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Focus_MoveToPoint(object):
    """
    Attributes:
     - target_point

    """


    def __init__(self, target_point=None,):
        self.target_point = target_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Focus_MoveToPoint')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Focus_Reset(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Focus_Reset')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_ScanField(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_ScanField')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_ScanPlayers(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_ScanPlayers')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToBallAndPlayer(object):
    """
    Attributes:
     - side
     - uniform_number
     - count_threshold

    """


    def __init__(self, side=None, uniform_number=None, count_threshold=None,):
        self.side = side
        self.uniform_number = uniform_number
        self.count_threshold = count_threshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToBallAndPlayer')
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 1)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 2)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.count_threshold is not None:
            oprot.writeFieldBegin('count_threshold', TType.I32, 3)
            oprot.writeI32(self.count_threshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToBallOrScan(object):
    """
    Attributes:
     - count_threshold

    """


    def __init__(self, count_threshold=None,):
        self.count_threshold = count_threshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToBallOrScan')
        if self.count_threshold is not None:
            oprot.writeFieldBegin('count_threshold', TType.I32, 1)
            oprot.writeI32(self.count_threshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToBall(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToBall')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToGoalieOrScan(object):
    """
    Attributes:
     - count_threshold

    """


    def __init__(self, count_threshold=None,):
        self.count_threshold = count_threshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToGoalieOrScan')
        if self.count_threshold is not None:
            oprot.writeFieldBegin('count_threshold', TType.I32, 1)
            oprot.writeI32(self.count_threshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToLowConfTeammate(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToLowConfTeammate')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToPlayerOrScan(object):
    """
    Attributes:
     - side
     - uniform_number
     - count_threshold

    """


    def __init__(self, side=None, uniform_number=None, count_threshold=None,):
        self.side = side
        self.uniform_number = uniform_number
        self.count_threshold = count_threshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToPlayerOrScan')
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 1)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 2)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.count_threshold is not None:
            oprot.writeFieldBegin('count_threshold', TType.I32, 3)
            oprot.writeI32(self.count_threshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToPoint(object):
    """
    Attributes:
     - target_point

    """


    def __init__(self, target_point=None,):
        self.target_point = target_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.target_point = ThriftVector2D()
                    self.target_point.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToPoint')
        if self.target_point is not None:
            oprot.writeFieldBegin('target_point', TType.STRUCT, 1)
            self.target_point.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Neck_TurnToRelative(object):
    """
    Attributes:
     - angle

    """


    def __init__(self, angle=None,):
        self.angle = angle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Neck_TurnToRelative')
        if self.angle is not None:
            oprot.writeFieldBegin('angle', TType.DOUBLE, 1)
            oprot.writeDouble(self.angle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class View_ChangeWidth(object):
    """
    Attributes:
     - view_width

    """


    def __init__(self, view_width=None,):
        self.view_width = view_width

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.view_width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('View_ChangeWidth')
        if self.view_width is not None:
            oprot.writeFieldBegin('view_width', TType.I32, 1)
            oprot.writeI32(self.view_width)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class View_Normal(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('View_Normal')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class View_Synch(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('View_Synch')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class View_Wide(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('View_Wide')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosGoalie(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosGoalie')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosGoalieMove(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosGoalieMove')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosGoalieKick(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosGoalieKick')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosShoot(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosShoot')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosChainAction(object):
    """
    Attributes:
     - direct_pass
     - lead_pass
     - through_pass
     - short_dribble
     - long_dribble
     - cross
     - simple_pass
     - simple_dribble
     - simple_shoot

    """


    def __init__(self, direct_pass=None, lead_pass=None, through_pass=None, short_dribble=None, long_dribble=None, cross=None, simple_pass=None, simple_dribble=None, simple_shoot=None,):
        self.direct_pass = direct_pass
        self.lead_pass = lead_pass
        self.through_pass = through_pass
        self.short_dribble = short_dribble
        self.long_dribble = long_dribble
        self.cross = cross
        self.simple_pass = simple_pass
        self.simple_dribble = simple_dribble
        self.simple_shoot = simple_shoot

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.direct_pass = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.lead_pass = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.through_pass = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.short_dribble = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.long_dribble = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.cross = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.simple_pass = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.simple_dribble = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.simple_shoot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosChainAction')
        if self.direct_pass is not None:
            oprot.writeFieldBegin('direct_pass', TType.BOOL, 1)
            oprot.writeBool(self.direct_pass)
            oprot.writeFieldEnd()
        if self.lead_pass is not None:
            oprot.writeFieldBegin('lead_pass', TType.BOOL, 2)
            oprot.writeBool(self.lead_pass)
            oprot.writeFieldEnd()
        if self.through_pass is not None:
            oprot.writeFieldBegin('through_pass', TType.BOOL, 3)
            oprot.writeBool(self.through_pass)
            oprot.writeFieldEnd()
        if self.short_dribble is not None:
            oprot.writeFieldBegin('short_dribble', TType.BOOL, 4)
            oprot.writeBool(self.short_dribble)
            oprot.writeFieldEnd()
        if self.long_dribble is not None:
            oprot.writeFieldBegin('long_dribble', TType.BOOL, 5)
            oprot.writeBool(self.long_dribble)
            oprot.writeFieldEnd()
        if self.cross is not None:
            oprot.writeFieldBegin('cross', TType.BOOL, 6)
            oprot.writeBool(self.cross)
            oprot.writeFieldEnd()
        if self.simple_pass is not None:
            oprot.writeFieldBegin('simple_pass', TType.BOOL, 7)
            oprot.writeBool(self.simple_pass)
            oprot.writeFieldEnd()
        if self.simple_dribble is not None:
            oprot.writeFieldBegin('simple_dribble', TType.BOOL, 8)
            oprot.writeBool(self.simple_dribble)
            oprot.writeFieldEnd()
        if self.simple_shoot is not None:
            oprot.writeFieldBegin('simple_shoot', TType.BOOL, 9)
            oprot.writeBool(self.simple_shoot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosBasicOffensive(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosBasicOffensive')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosBasicMove(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosBasicMove')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosSetPlay(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosSetPlay')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosPenalty(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosPenalty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeliosCommunicaion(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeliosCommunicaion')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlayerAction(object):
    """
    Attributes:
     - dash
     - turn
     - kick
     - tackle
     - catch_action
     - move
     - turn_neck
     - change_view
     - say
     - point_to
     - point_to_of
     - attention_to
     - attention_to_of
     - log
     - debug_client
     - body_go_to_point
     - body_smart_kick
     - bhv_before_kick_off
     - bhv_body_neck_to_ball
     - bhv_body_neck_to_point
     - bhv_emergency
     - bhv_go_to_point_look_ball
     - bhv_neck_body_to_ball
     - bhv_neck_body_to_point
     - bhv_scan_field
     - body_advance_ball
     - body_clear_ball
     - body_dribble
     - body_go_to_point_dodge
     - body_hold_ball
     - body_intercept
     - body_kick_one_step
     - body_stop_ball
     - body_stop_dash
     - body_tackle_to_point
     - body_turn_to_angle
     - body_turn_to_ball
     - body_turn_to_point
     - focus_move_to_point
     - focus_reset
     - neck_scan_field
     - neck_scan_players
     - neck_turn_to_ball_and_player
     - neck_turn_to_ball_or_scan
     - neck_turn_to_ball
     - neck_turn_to_goalie_or_scan
     - neck_turn_to_low_conf_teammate
     - neck_turn_to_player_or_scan
     - neck_turn_to_point
     - neck_turn_to_relative
     - view_change_width
     - view_normal
     - view_synch
     - view_wide
     - helios_goalie
     - helios_goalie_move
     - helios_goalie_kick
     - helios_shoot
     - helios_chain_action
     - helios_basic_offensive
     - helios_basic_move
     - helios_set_play
     - helios_penalty
     - helios_communication

    """


    def __init__(self, dash=None, turn=None, kick=None, tackle=None, catch_action=None, move=None, turn_neck=None, change_view=None, say=None, point_to=None, point_to_of=None, attention_to=None, attention_to_of=None, log=None, debug_client=None, body_go_to_point=None, body_smart_kick=None, bhv_before_kick_off=None, bhv_body_neck_to_ball=None, bhv_body_neck_to_point=None, bhv_emergency=None, bhv_go_to_point_look_ball=None, bhv_neck_body_to_ball=None, bhv_neck_body_to_point=None, bhv_scan_field=None, body_advance_ball=None, body_clear_ball=None, body_dribble=None, body_go_to_point_dodge=None, body_hold_ball=None, body_intercept=None, body_kick_one_step=None, body_stop_ball=None, body_stop_dash=None, body_tackle_to_point=None, body_turn_to_angle=None, body_turn_to_ball=None, body_turn_to_point=None, focus_move_to_point=None, focus_reset=None, neck_scan_field=None, neck_scan_players=None, neck_turn_to_ball_and_player=None, neck_turn_to_ball_or_scan=None, neck_turn_to_ball=None, neck_turn_to_goalie_or_scan=None, neck_turn_to_low_conf_teammate=None, neck_turn_to_player_or_scan=None, neck_turn_to_point=None, neck_turn_to_relative=None, view_change_width=None, view_normal=None, view_synch=None, view_wide=None, helios_goalie=None, helios_goalie_move=None, helios_goalie_kick=None, helios_shoot=None, helios_chain_action=None, helios_basic_offensive=None, helios_basic_move=None, helios_set_play=None, helios_penalty=None, helios_communication=None,):
        self.dash = dash
        self.turn = turn
        self.kick = kick
        self.tackle = tackle
        self.catch_action = catch_action
        self.move = move
        self.turn_neck = turn_neck
        self.change_view = change_view
        self.say = say
        self.point_to = point_to
        self.point_to_of = point_to_of
        self.attention_to = attention_to
        self.attention_to_of = attention_to_of
        self.log = log
        self.debug_client = debug_client
        self.body_go_to_point = body_go_to_point
        self.body_smart_kick = body_smart_kick
        self.bhv_before_kick_off = bhv_before_kick_off
        self.bhv_body_neck_to_ball = bhv_body_neck_to_ball
        self.bhv_body_neck_to_point = bhv_body_neck_to_point
        self.bhv_emergency = bhv_emergency
        self.bhv_go_to_point_look_ball = bhv_go_to_point_look_ball
        self.bhv_neck_body_to_ball = bhv_neck_body_to_ball
        self.bhv_neck_body_to_point = bhv_neck_body_to_point
        self.bhv_scan_field = bhv_scan_field
        self.body_advance_ball = body_advance_ball
        self.body_clear_ball = body_clear_ball
        self.body_dribble = body_dribble
        self.body_go_to_point_dodge = body_go_to_point_dodge
        self.body_hold_ball = body_hold_ball
        self.body_intercept = body_intercept
        self.body_kick_one_step = body_kick_one_step
        self.body_stop_ball = body_stop_ball
        self.body_stop_dash = body_stop_dash
        self.body_tackle_to_point = body_tackle_to_point
        self.body_turn_to_angle = body_turn_to_angle
        self.body_turn_to_ball = body_turn_to_ball
        self.body_turn_to_point = body_turn_to_point
        self.focus_move_to_point = focus_move_to_point
        self.focus_reset = focus_reset
        self.neck_scan_field = neck_scan_field
        self.neck_scan_players = neck_scan_players
        self.neck_turn_to_ball_and_player = neck_turn_to_ball_and_player
        self.neck_turn_to_ball_or_scan = neck_turn_to_ball_or_scan
        self.neck_turn_to_ball = neck_turn_to_ball
        self.neck_turn_to_goalie_or_scan = neck_turn_to_goalie_or_scan
        self.neck_turn_to_low_conf_teammate = neck_turn_to_low_conf_teammate
        self.neck_turn_to_player_or_scan = neck_turn_to_player_or_scan
        self.neck_turn_to_point = neck_turn_to_point
        self.neck_turn_to_relative = neck_turn_to_relative
        self.view_change_width = view_change_width
        self.view_normal = view_normal
        self.view_synch = view_synch
        self.view_wide = view_wide
        self.helios_goalie = helios_goalie
        self.helios_goalie_move = helios_goalie_move
        self.helios_goalie_kick = helios_goalie_kick
        self.helios_shoot = helios_shoot
        self.helios_chain_action = helios_chain_action
        self.helios_basic_offensive = helios_basic_offensive
        self.helios_basic_move = helios_basic_move
        self.helios_set_play = helios_set_play
        self.helios_penalty = helios_penalty
        self.helios_communication = helios_communication

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dash = Dash()
                    self.dash.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.turn = Turn()
                    self.turn.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.kick = Kick()
                    self.kick.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.tackle = Tackle()
                    self.tackle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.catch_action = Catch()
                    self.catch_action.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.move = Move()
                    self.move.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.turn_neck = TurnNeck()
                    self.turn_neck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.change_view = ChangeView()
                    self.change_view.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.say = Say()
                    self.say.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.point_to = PointTo()
                    self.point_to.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.point_to_of = PointToOf()
                    self.point_to_of.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.attention_to = AttentionTo()
                    self.attention_to.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.attention_to_of = AttentionToOf()
                    self.attention_to_of.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.log = Log()
                    self.log.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.debug_client = DebugClient()
                    self.debug_client.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.body_go_to_point = Body_GoToPoint()
                    self.body_go_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.body_smart_kick = Body_SmartKick()
                    self.body_smart_kick.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.bhv_before_kick_off = Bhv_BeforeKickOff()
                    self.bhv_before_kick_off.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.bhv_body_neck_to_ball = Bhv_BodyNeckToBall()
                    self.bhv_body_neck_to_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.bhv_body_neck_to_point = Bhv_BodyNeckToPoint()
                    self.bhv_body_neck_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.bhv_emergency = Bhv_Emergency()
                    self.bhv_emergency.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.bhv_go_to_point_look_ball = Bhv_GoToPointLookBall()
                    self.bhv_go_to_point_look_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRUCT:
                    self.bhv_neck_body_to_ball = Bhv_NeckBodyToBall()
                    self.bhv_neck_body_to_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRUCT:
                    self.bhv_neck_body_to_point = Bhv_NeckBodyToPoint()
                    self.bhv_neck_body_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRUCT:
                    self.bhv_scan_field = Bhv_ScanField()
                    self.bhv_scan_field.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.body_advance_ball = Body_AdvanceBall()
                    self.body_advance_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.body_clear_ball = Body_ClearBall()
                    self.body_clear_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.body_dribble = Body_Dribble()
                    self.body_dribble.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRUCT:
                    self.body_go_to_point_dodge = Body_GoToPointDodge()
                    self.body_go_to_point_dodge.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.body_hold_ball = Body_HoldBall()
                    self.body_hold_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.body_intercept = Body_Intercept()
                    self.body_intercept.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRUCT:
                    self.body_kick_one_step = Body_KickOneStep()
                    self.body_kick_one_step.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRUCT:
                    self.body_stop_ball = Body_StopBall()
                    self.body_stop_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRUCT:
                    self.body_stop_dash = Body_StopDash()
                    self.body_stop_dash.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRUCT:
                    self.body_tackle_to_point = Body_TackleToPoint()
                    self.body_tackle_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRUCT:
                    self.body_turn_to_angle = Body_TurnToAngle()
                    self.body_turn_to_angle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRUCT:
                    self.body_turn_to_ball = Body_TurnToBall()
                    self.body_turn_to_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRUCT:
                    self.body_turn_to_point = Body_TurnToPoint()
                    self.body_turn_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRUCT:
                    self.focus_move_to_point = Focus_MoveToPoint()
                    self.focus_move_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRUCT:
                    self.focus_reset = Focus_Reset()
                    self.focus_reset.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRUCT:
                    self.neck_scan_field = Neck_ScanField()
                    self.neck_scan_field.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRUCT:
                    self.neck_scan_players = Neck_ScanPlayers()
                    self.neck_scan_players.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_ball_and_player = Neck_TurnToBallAndPlayer()
                    self.neck_turn_to_ball_and_player.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_ball_or_scan = Neck_TurnToBallOrScan()
                    self.neck_turn_to_ball_or_scan.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_ball = Neck_TurnToBall()
                    self.neck_turn_to_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_goalie_or_scan = Neck_TurnToGoalieOrScan()
                    self.neck_turn_to_goalie_or_scan.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_low_conf_teammate = Neck_TurnToLowConfTeammate()
                    self.neck_turn_to_low_conf_teammate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_player_or_scan = Neck_TurnToPlayerOrScan()
                    self.neck_turn_to_player_or_scan.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_point = Neck_TurnToPoint()
                    self.neck_turn_to_point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRUCT:
                    self.neck_turn_to_relative = Neck_TurnToRelative()
                    self.neck_turn_to_relative.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRUCT:
                    self.view_change_width = View_ChangeWidth()
                    self.view_change_width.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRUCT:
                    self.view_normal = View_Normal()
                    self.view_normal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRUCT:
                    self.view_synch = View_Synch()
                    self.view_synch.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.STRUCT:
                    self.view_wide = View_Wide()
                    self.view_wide.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.STRUCT:
                    self.helios_goalie = HeliosGoalie()
                    self.helios_goalie.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.STRUCT:
                    self.helios_goalie_move = HeliosGoalieMove()
                    self.helios_goalie_move.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.STRUCT:
                    self.helios_goalie_kick = HeliosGoalieKick()
                    self.helios_goalie_kick.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.STRUCT:
                    self.helios_shoot = HeliosShoot()
                    self.helios_shoot.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.STRUCT:
                    self.helios_chain_action = HeliosChainAction()
                    self.helios_chain_action.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.STRUCT:
                    self.helios_basic_offensive = HeliosBasicOffensive()
                    self.helios_basic_offensive.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRUCT:
                    self.helios_basic_move = HeliosBasicMove()
                    self.helios_basic_move.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.STRUCT:
                    self.helios_set_play = HeliosSetPlay()
                    self.helios_set_play.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.STRUCT:
                    self.helios_penalty = HeliosPenalty()
                    self.helios_penalty.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.STRUCT:
                    self.helios_communication = HeliosCommunicaion()
                    self.helios_communication.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PlayerAction')
        if self.dash is not None:
            oprot.writeFieldBegin('dash', TType.STRUCT, 1)
            self.dash.write(oprot)
            oprot.writeFieldEnd()
        if self.turn is not None:
            oprot.writeFieldBegin('turn', TType.STRUCT, 2)
            self.turn.write(oprot)
            oprot.writeFieldEnd()
        if self.kick is not None:
            oprot.writeFieldBegin('kick', TType.STRUCT, 3)
            self.kick.write(oprot)
            oprot.writeFieldEnd()
        if self.tackle is not None:
            oprot.writeFieldBegin('tackle', TType.STRUCT, 4)
            self.tackle.write(oprot)
            oprot.writeFieldEnd()
        if self.catch_action is not None:
            oprot.writeFieldBegin('catch_action', TType.STRUCT, 5)
            self.catch_action.write(oprot)
            oprot.writeFieldEnd()
        if self.move is not None:
            oprot.writeFieldBegin('move', TType.STRUCT, 6)
            self.move.write(oprot)
            oprot.writeFieldEnd()
        if self.turn_neck is not None:
            oprot.writeFieldBegin('turn_neck', TType.STRUCT, 7)
            self.turn_neck.write(oprot)
            oprot.writeFieldEnd()
        if self.change_view is not None:
            oprot.writeFieldBegin('change_view', TType.STRUCT, 8)
            self.change_view.write(oprot)
            oprot.writeFieldEnd()
        if self.say is not None:
            oprot.writeFieldBegin('say', TType.STRUCT, 9)
            self.say.write(oprot)
            oprot.writeFieldEnd()
        if self.point_to is not None:
            oprot.writeFieldBegin('point_to', TType.STRUCT, 10)
            self.point_to.write(oprot)
            oprot.writeFieldEnd()
        if self.point_to_of is not None:
            oprot.writeFieldBegin('point_to_of', TType.STRUCT, 11)
            self.point_to_of.write(oprot)
            oprot.writeFieldEnd()
        if self.attention_to is not None:
            oprot.writeFieldBegin('attention_to', TType.STRUCT, 12)
            self.attention_to.write(oprot)
            oprot.writeFieldEnd()
        if self.attention_to_of is not None:
            oprot.writeFieldBegin('attention_to_of', TType.STRUCT, 13)
            self.attention_to_of.write(oprot)
            oprot.writeFieldEnd()
        if self.log is not None:
            oprot.writeFieldBegin('log', TType.STRUCT, 14)
            self.log.write(oprot)
            oprot.writeFieldEnd()
        if self.debug_client is not None:
            oprot.writeFieldBegin('debug_client', TType.STRUCT, 15)
            self.debug_client.write(oprot)
            oprot.writeFieldEnd()
        if self.body_go_to_point is not None:
            oprot.writeFieldBegin('body_go_to_point', TType.STRUCT, 16)
            self.body_go_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.body_smart_kick is not None:
            oprot.writeFieldBegin('body_smart_kick', TType.STRUCT, 17)
            self.body_smart_kick.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_before_kick_off is not None:
            oprot.writeFieldBegin('bhv_before_kick_off', TType.STRUCT, 18)
            self.bhv_before_kick_off.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_body_neck_to_ball is not None:
            oprot.writeFieldBegin('bhv_body_neck_to_ball', TType.STRUCT, 19)
            self.bhv_body_neck_to_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_body_neck_to_point is not None:
            oprot.writeFieldBegin('bhv_body_neck_to_point', TType.STRUCT, 20)
            self.bhv_body_neck_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_emergency is not None:
            oprot.writeFieldBegin('bhv_emergency', TType.STRUCT, 21)
            self.bhv_emergency.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_go_to_point_look_ball is not None:
            oprot.writeFieldBegin('bhv_go_to_point_look_ball', TType.STRUCT, 22)
            self.bhv_go_to_point_look_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_neck_body_to_ball is not None:
            oprot.writeFieldBegin('bhv_neck_body_to_ball', TType.STRUCT, 23)
            self.bhv_neck_body_to_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_neck_body_to_point is not None:
            oprot.writeFieldBegin('bhv_neck_body_to_point', TType.STRUCT, 24)
            self.bhv_neck_body_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.bhv_scan_field is not None:
            oprot.writeFieldBegin('bhv_scan_field', TType.STRUCT, 25)
            self.bhv_scan_field.write(oprot)
            oprot.writeFieldEnd()
        if self.body_advance_ball is not None:
            oprot.writeFieldBegin('body_advance_ball', TType.STRUCT, 26)
            self.body_advance_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.body_clear_ball is not None:
            oprot.writeFieldBegin('body_clear_ball', TType.STRUCT, 27)
            self.body_clear_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.body_dribble is not None:
            oprot.writeFieldBegin('body_dribble', TType.STRUCT, 28)
            self.body_dribble.write(oprot)
            oprot.writeFieldEnd()
        if self.body_go_to_point_dodge is not None:
            oprot.writeFieldBegin('body_go_to_point_dodge', TType.STRUCT, 29)
            self.body_go_to_point_dodge.write(oprot)
            oprot.writeFieldEnd()
        if self.body_hold_ball is not None:
            oprot.writeFieldBegin('body_hold_ball', TType.STRUCT, 30)
            self.body_hold_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.body_intercept is not None:
            oprot.writeFieldBegin('body_intercept', TType.STRUCT, 31)
            self.body_intercept.write(oprot)
            oprot.writeFieldEnd()
        if self.body_kick_one_step is not None:
            oprot.writeFieldBegin('body_kick_one_step', TType.STRUCT, 32)
            self.body_kick_one_step.write(oprot)
            oprot.writeFieldEnd()
        if self.body_stop_ball is not None:
            oprot.writeFieldBegin('body_stop_ball', TType.STRUCT, 33)
            self.body_stop_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.body_stop_dash is not None:
            oprot.writeFieldBegin('body_stop_dash', TType.STRUCT, 34)
            self.body_stop_dash.write(oprot)
            oprot.writeFieldEnd()
        if self.body_tackle_to_point is not None:
            oprot.writeFieldBegin('body_tackle_to_point', TType.STRUCT, 35)
            self.body_tackle_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.body_turn_to_angle is not None:
            oprot.writeFieldBegin('body_turn_to_angle', TType.STRUCT, 36)
            self.body_turn_to_angle.write(oprot)
            oprot.writeFieldEnd()
        if self.body_turn_to_ball is not None:
            oprot.writeFieldBegin('body_turn_to_ball', TType.STRUCT, 37)
            self.body_turn_to_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.body_turn_to_point is not None:
            oprot.writeFieldBegin('body_turn_to_point', TType.STRUCT, 38)
            self.body_turn_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.focus_move_to_point is not None:
            oprot.writeFieldBegin('focus_move_to_point', TType.STRUCT, 39)
            self.focus_move_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.focus_reset is not None:
            oprot.writeFieldBegin('focus_reset', TType.STRUCT, 40)
            self.focus_reset.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_scan_field is not None:
            oprot.writeFieldBegin('neck_scan_field', TType.STRUCT, 41)
            self.neck_scan_field.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_scan_players is not None:
            oprot.writeFieldBegin('neck_scan_players', TType.STRUCT, 42)
            self.neck_scan_players.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_ball_and_player is not None:
            oprot.writeFieldBegin('neck_turn_to_ball_and_player', TType.STRUCT, 43)
            self.neck_turn_to_ball_and_player.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_ball_or_scan is not None:
            oprot.writeFieldBegin('neck_turn_to_ball_or_scan', TType.STRUCT, 44)
            self.neck_turn_to_ball_or_scan.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_ball is not None:
            oprot.writeFieldBegin('neck_turn_to_ball', TType.STRUCT, 45)
            self.neck_turn_to_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_goalie_or_scan is not None:
            oprot.writeFieldBegin('neck_turn_to_goalie_or_scan', TType.STRUCT, 46)
            self.neck_turn_to_goalie_or_scan.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_low_conf_teammate is not None:
            oprot.writeFieldBegin('neck_turn_to_low_conf_teammate', TType.STRUCT, 47)
            self.neck_turn_to_low_conf_teammate.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_player_or_scan is not None:
            oprot.writeFieldBegin('neck_turn_to_player_or_scan', TType.STRUCT, 48)
            self.neck_turn_to_player_or_scan.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_point is not None:
            oprot.writeFieldBegin('neck_turn_to_point', TType.STRUCT, 49)
            self.neck_turn_to_point.write(oprot)
            oprot.writeFieldEnd()
        if self.neck_turn_to_relative is not None:
            oprot.writeFieldBegin('neck_turn_to_relative', TType.STRUCT, 50)
            self.neck_turn_to_relative.write(oprot)
            oprot.writeFieldEnd()
        if self.view_change_width is not None:
            oprot.writeFieldBegin('view_change_width', TType.STRUCT, 51)
            self.view_change_width.write(oprot)
            oprot.writeFieldEnd()
        if self.view_normal is not None:
            oprot.writeFieldBegin('view_normal', TType.STRUCT, 52)
            self.view_normal.write(oprot)
            oprot.writeFieldEnd()
        if self.view_synch is not None:
            oprot.writeFieldBegin('view_synch', TType.STRUCT, 53)
            self.view_synch.write(oprot)
            oprot.writeFieldEnd()
        if self.view_wide is not None:
            oprot.writeFieldBegin('view_wide', TType.STRUCT, 54)
            self.view_wide.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_goalie is not None:
            oprot.writeFieldBegin('helios_goalie', TType.STRUCT, 55)
            self.helios_goalie.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_goalie_move is not None:
            oprot.writeFieldBegin('helios_goalie_move', TType.STRUCT, 56)
            self.helios_goalie_move.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_goalie_kick is not None:
            oprot.writeFieldBegin('helios_goalie_kick', TType.STRUCT, 57)
            self.helios_goalie_kick.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_shoot is not None:
            oprot.writeFieldBegin('helios_shoot', TType.STRUCT, 58)
            self.helios_shoot.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_chain_action is not None:
            oprot.writeFieldBegin('helios_chain_action', TType.STRUCT, 59)
            self.helios_chain_action.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_basic_offensive is not None:
            oprot.writeFieldBegin('helios_basic_offensive', TType.STRUCT, 60)
            self.helios_basic_offensive.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_basic_move is not None:
            oprot.writeFieldBegin('helios_basic_move', TType.STRUCT, 61)
            self.helios_basic_move.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_set_play is not None:
            oprot.writeFieldBegin('helios_set_play', TType.STRUCT, 62)
            self.helios_set_play.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_penalty is not None:
            oprot.writeFieldBegin('helios_penalty', TType.STRUCT, 63)
            self.helios_penalty.write(oprot)
            oprot.writeFieldEnd()
        if self.helios_communication is not None:
            oprot.writeFieldBegin('helios_communication', TType.STRUCT, 64)
            self.helios_communication.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlayerActions(object):
    """
    Attributes:
     - actions

    """


    def __init__(self, actions=None,):
        self.actions = actions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.actions = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = PlayerAction()
                        _elem60.read(iprot)
                        self.actions.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PlayerActions')
        if self.actions is not None:
            oprot.writeFieldBegin('actions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.actions))
            for iter61 in self.actions:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChangePlayerType(object):
    """
    Attributes:
     - uniform_number
     - type

    """


    def __init__(self, uniform_number=None, type=None,):
        self.uniform_number = uniform_number
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChangePlayerType')
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 1)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoHeliosSubstitute(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoHeliosSubstitute')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoHeliosSayPlayerTypes(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoHeliosSayPlayerTypes')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CoachAction(object):
    """
    Attributes:
     - change_player_types
     - do_helios_substitute
     - do_helios_say_player_types

    """


    def __init__(self, change_player_types=None, do_helios_substitute=None, do_helios_say_player_types=None,):
        self.change_player_types = change_player_types
        self.do_helios_substitute = do_helios_substitute
        self.do_helios_say_player_types = do_helios_say_player_types

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.change_player_types = ChangePlayerType()
                    self.change_player_types.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.do_helios_substitute = DoHeliosSubstitute()
                    self.do_helios_substitute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.do_helios_say_player_types = DoHeliosSayPlayerTypes()
                    self.do_helios_say_player_types.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CoachAction')
        if self.change_player_types is not None:
            oprot.writeFieldBegin('change_player_types', TType.STRUCT, 1)
            self.change_player_types.write(oprot)
            oprot.writeFieldEnd()
        if self.do_helios_substitute is not None:
            oprot.writeFieldBegin('do_helios_substitute', TType.STRUCT, 2)
            self.do_helios_substitute.write(oprot)
            oprot.writeFieldEnd()
        if self.do_helios_say_player_types is not None:
            oprot.writeFieldBegin('do_helios_say_player_types', TType.STRUCT, 3)
            self.do_helios_say_player_types.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CoachActions(object):
    """
    Attributes:
     - actions

    """


    def __init__(self, actions=None,):
        self.actions = actions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.actions = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = CoachAction()
                        _elem67.read(iprot)
                        self.actions.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CoachActions')
        if self.actions is not None:
            oprot.writeFieldBegin('actions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.actions))
            for iter68 in self.actions:
                iter68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoKickOff(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoKickOff')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoMoveBall(object):
    """
    Attributes:
     - position
     - velocity

    """


    def __init__(self, position=None, velocity=None,):
        self.position = position
        self.velocity = velocity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.velocity = ThriftVector2D()
                    self.velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoMoveBall')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.velocity is not None:
            oprot.writeFieldBegin('velocity', TType.STRUCT, 2)
            self.velocity.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoMovePlayer(object):
    """
    Attributes:
     - our_side
     - uniform_number
     - position
     - body_direction

    """


    def __init__(self, our_side=None, uniform_number=None, position=None, body_direction=None,):
        self.our_side = our_side
        self.uniform_number = uniform_number
        self.position = position
        self.body_direction = body_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.our_side = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.position = ThriftVector2D()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.body_direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoMovePlayer')
        if self.our_side is not None:
            oprot.writeFieldBegin('our_side', TType.BOOL, 1)
            oprot.writeBool(self.our_side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 2)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 3)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.body_direction is not None:
            oprot.writeFieldBegin('body_direction', TType.DOUBLE, 4)
            oprot.writeDouble(self.body_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoRecover(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoRecover')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoChangeMode(object):
    """
    Attributes:
     - game_mode_type
     - side

    """


    def __init__(self, game_mode_type=None, side=None,):
        self.game_mode_type = game_mode_type
        self.side = side

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.game_mode_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoChangeMode')
        if self.game_mode_type is not None:
            oprot.writeFieldBegin('game_mode_type', TType.I32, 1)
            oprot.writeI32(self.game_mode_type)
            oprot.writeFieldEnd()
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 2)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoChangePlayerType(object):
    """
    Attributes:
     - our_side
     - uniform_number
     - type

    """


    def __init__(self, our_side=None, uniform_number=None, type=None,):
        self.our_side = our_side
        self.uniform_number = uniform_number
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.our_side = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uniform_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoChangePlayerType')
        if self.our_side is not None:
            oprot.writeFieldBegin('our_side', TType.BOOL, 1)
            oprot.writeBool(self.our_side)
            oprot.writeFieldEnd()
        if self.uniform_number is not None:
            oprot.writeFieldBegin('uniform_number', TType.I32, 2)
            oprot.writeI32(self.uniform_number)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainerAction(object):
    """
    Attributes:
     - do_kick_off
     - do_move_ball
     - do_move_player
     - do_recover
     - do_change_mode
     - do_change_player_type

    """


    def __init__(self, do_kick_off=None, do_move_ball=None, do_move_player=None, do_recover=None, do_change_mode=None, do_change_player_type=None,):
        self.do_kick_off = do_kick_off
        self.do_move_ball = do_move_ball
        self.do_move_player = do_move_player
        self.do_recover = do_recover
        self.do_change_mode = do_change_mode
        self.do_change_player_type = do_change_player_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.do_kick_off = DoKickOff()
                    self.do_kick_off.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.do_move_ball = DoMoveBall()
                    self.do_move_ball.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.do_move_player = DoMovePlayer()
                    self.do_move_player.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.do_recover = DoRecover()
                    self.do_recover.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.do_change_mode = DoChangeMode()
                    self.do_change_mode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.do_change_player_type = DoChangePlayerType()
                    self.do_change_player_type.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainerAction')
        if self.do_kick_off is not None:
            oprot.writeFieldBegin('do_kick_off', TType.STRUCT, 1)
            self.do_kick_off.write(oprot)
            oprot.writeFieldEnd()
        if self.do_move_ball is not None:
            oprot.writeFieldBegin('do_move_ball', TType.STRUCT, 2)
            self.do_move_ball.write(oprot)
            oprot.writeFieldEnd()
        if self.do_move_player is not None:
            oprot.writeFieldBegin('do_move_player', TType.STRUCT, 3)
            self.do_move_player.write(oprot)
            oprot.writeFieldEnd()
        if self.do_recover is not None:
            oprot.writeFieldBegin('do_recover', TType.STRUCT, 4)
            self.do_recover.write(oprot)
            oprot.writeFieldEnd()
        if self.do_change_mode is not None:
            oprot.writeFieldBegin('do_change_mode', TType.STRUCT, 5)
            self.do_change_mode.write(oprot)
            oprot.writeFieldEnd()
        if self.do_change_player_type is not None:
            oprot.writeFieldBegin('do_change_player_type', TType.STRUCT, 6)
            self.do_change_player_type.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainerActions(object):
    """
    Attributes:
     - actions

    """


    def __init__(self, actions=None,):
        self.actions = actions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.actions = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = TrainerAction()
                        _elem74.read(iprot)
                        self.actions.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainerActions')
        if self.actions is not None:
            oprot.writeFieldBegin('actions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.actions))
            for iter75 in self.actions:
                iter75.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerParam(object):
    """
    Attributes:
     - agent_type
     - inertia_moment
     - player_size
     - player_decay
     - player_rand
     - player_weight
     - player_speed_max
     - player_accel_max
     - stamina_max
     - stamina_inc_max
     - recover_init
     - recover_dec_thr
     - recover_min
     - recover_dec
     - effort_init
     - effort_dec_thr
     - effort_min
     - effort_dec
     - effort_inc_thr
     - effort_inc
     - kick_rand
     - team_actuator_noise
     - player_rand_factor_l
     - player_rand_factor_r
     - kick_rand_factor_l
     - kick_rand_factor_r
     - ball_size
     - ball_decay
     - ball_rand
     - ball_weight
     - ball_speed_max
     - ball_accel_max
     - dash_power_rate
     - kick_power_rate
     - kickable_margin
     - control_radius
     - control_radius_width
     - max_power
     - min_power
     - max_moment
     - min_moment
     - max_neck_moment
     - min_neck_moment
     - max_neck_angle
     - min_neck_angle
     - visible_angle
     - visible_distance
     - wind_dir
     - wind_force
     - wind_angle
     - wind_rand
     - kickable_area
     - catch_area_l
     - catch_area_w
     - catch_probability
     - goalie_max_moves
     - corner_kick_margin
     - offside_active_area_size
     - wind_none
     - use_wind_random
     - coach_say_count_max
     - coach_say_msg_size
     - clang_win_size
     - clang_define_win
     - clang_meta_win
     - clang_advice_win
     - clang_info_win
     - clang_mess_delay
     - clang_mess_per_cycle
     - half_time
     - simulator_step
     - send_step
     - recv_step
     - sense_body_step
     - lcm_step
     - player_say_msg_size
     - player_hear_max
     - player_hear_inc
     - player_hear_decay
     - catch_ban_cycle
     - slow_down_factor
     - use_offside
     - kickoff_offside
     - offside_kick_margin
     - audio_cut_dist
     - dist_quantize_step
     - landmark_dist_quantize_step
     - dir_quantize_step
     - dist_quantize_step_l
     - dist_quantize_step_r
     - landmark_dist_quantize_step_l
     - landmark_dist_quantize_step_r
     - dir_quantize_step_l
     - dir_quantize_step_r
     - coach_mode
     - coach_with_referee_mode
     - use_old_coach_hear
     - slowness_on_top_for_left_team
     - slowness_on_top_for_right_team
     - start_goal_l
     - start_goal_r
     - fullstate_l
     - fullstate_r
     - drop_ball_time
     - synch_mode
     - synch_offset
     - synch_micro_sleep
     - point_to_ban
     - point_to_duration
     - player_port
     - trainer_port
     - online_coach_port
     - verbose_mode
     - coach_send_vi_step
     - replay_file
     - landmark_file
     - send_comms
     - text_logging
     - game_logging
     - game_log_version
     - text_log_dir
     - game_log_dir
     - text_log_fixed_name
     - game_log_fixed_name
     - use_text_log_fixed
     - use_game_log_fixed
     - use_text_log_dated
     - use_game_log_dated
     - log_date_format
     - log_times
     - record_message
     - text_log_compression
     - game_log_compression
     - use_profile
     - tackle_dist
     - tackle_back_dist
     - tackle_width
     - tackle_exponent
     - tackle_cycles
     - tackle_power_rate
     - freeform_wait_period
     - freeform_send_period
     - free_kick_faults
     - back_passes
     - proper_goal_kicks
     - stopped_ball_vel
     - max_goal_kicks
     - clang_del_win
     - clang_rule_win
     - auto_mode
     - kick_off_wait
     - connect_wait
     - game_over_wait
     - team_l_start
     - team_r_start
     - keepaway_mode
     - keepaway_length
     - keepaway_width
     - keepaway_logging
     - keepaway_log_dir
     - keepaway_log_fixed_name
     - keepaway_log_fixed
     - keepaway_log_dated
     - keepaway_start
     - nr_normal_halfs
     - nr_extra_halfs
     - penalty_shoot_outs
     - pen_before_setup_wait
     - pen_setup_wait
     - pen_ready_wait
     - pen_taken_wait
     - pen_nr_kicks
     - pen_max_extra_kicks
     - pen_dist_x
     - pen_random_winner
     - pen_allow_mult_kicks
     - pen_max_goalie_dist_x
     - pen_coach_moves_players
     - module_dir
     - ball_stuck_area
     - coach_msg_file
     - max_tackle_power
     - max_back_tackle_power
     - player_speed_max_min
     - extra_stamina
     - synch_see_offset
     - extra_half_time
     - stamina_capacity
     - max_dash_angle
     - min_dash_angle
     - dash_angle_step
     - side_dash_rate
     - back_dash_rate
     - max_dash_power
     - min_dash_power
     - tackle_rand_factor
     - foul_detect_probability
     - foul_exponent
     - foul_cycles
     - golden_goal
     - red_card_probability
     - illegal_defense_duration
     - illegal_defense_number
     - illegal_defense_dist_x
     - illegal_defense_width
     - fixed_teamname_l
     - fixed_teamname_r
     - max_catch_angle
     - min_catch_angle
     - random_seed
     - long_kick_power_factor
     - long_kick_delay
     - max_monitors
     - catchable_area
     - real_speed_max
     - pitch_half_length
     - pitch_half_width
     - our_penalty_area_line_x
     - their_penalty_area_line_x
     - penalty_area_half_width
     - penalty_area_length
     - goal_width

    """


    def __init__(self, agent_type=None, inertia_moment=None, player_size=None, player_decay=None, player_rand=None, player_weight=None, player_speed_max=None, player_accel_max=None, stamina_max=None, stamina_inc_max=None, recover_init=None, recover_dec_thr=None, recover_min=None, recover_dec=None, effort_init=None, effort_dec_thr=None, effort_min=None, effort_dec=None, effort_inc_thr=None, effort_inc=None, kick_rand=None, team_actuator_noise=None, player_rand_factor_l=None, player_rand_factor_r=None, kick_rand_factor_l=None, kick_rand_factor_r=None, ball_size=None, ball_decay=None, ball_rand=None, ball_weight=None, ball_speed_max=None, ball_accel_max=None, dash_power_rate=None, kick_power_rate=None, kickable_margin=None, control_radius=None, control_radius_width=None, max_power=None, min_power=None, max_moment=None, min_moment=None, max_neck_moment=None, min_neck_moment=None, max_neck_angle=None, min_neck_angle=None, visible_angle=None, visible_distance=None, wind_dir=None, wind_force=None, wind_angle=None, wind_rand=None, kickable_area=None, catch_area_l=None, catch_area_w=None, catch_probability=None, goalie_max_moves=None, corner_kick_margin=None, offside_active_area_size=None, wind_none=None, use_wind_random=None, coach_say_count_max=None, coach_say_msg_size=None, clang_win_size=None, clang_define_win=None, clang_meta_win=None, clang_advice_win=None, clang_info_win=None, clang_mess_delay=None, clang_mess_per_cycle=None, half_time=None, simulator_step=None, send_step=None, recv_step=None, sense_body_step=None, lcm_step=None, player_say_msg_size=None, player_hear_max=None, player_hear_inc=None, player_hear_decay=None, catch_ban_cycle=None, slow_down_factor=None, use_offside=None, kickoff_offside=None, offside_kick_margin=None, audio_cut_dist=None, dist_quantize_step=None, landmark_dist_quantize_step=None, dir_quantize_step=None, dist_quantize_step_l=None, dist_quantize_step_r=None, landmark_dist_quantize_step_l=None, landmark_dist_quantize_step_r=None, dir_quantize_step_l=None, dir_quantize_step_r=None, coach_mode=None, coach_with_referee_mode=None, use_old_coach_hear=None, slowness_on_top_for_left_team=None, slowness_on_top_for_right_team=None, start_goal_l=None, start_goal_r=None, fullstate_l=None, fullstate_r=None, drop_ball_time=None, synch_mode=None, synch_offset=None, synch_micro_sleep=None, point_to_ban=None, point_to_duration=None, player_port=None, trainer_port=None, online_coach_port=None, verbose_mode=None, coach_send_vi_step=None, replay_file=None, landmark_file=None, send_comms=None, text_logging=None, game_logging=None, game_log_version=None, text_log_dir=None, game_log_dir=None, text_log_fixed_name=None, game_log_fixed_name=None, use_text_log_fixed=None, use_game_log_fixed=None, use_text_log_dated=None, use_game_log_dated=None, log_date_format=None, log_times=None, record_message=None, text_log_compression=None, game_log_compression=None, use_profile=None, tackle_dist=None, tackle_back_dist=None, tackle_width=None, tackle_exponent=None, tackle_cycles=None, tackle_power_rate=None, freeform_wait_period=None, freeform_send_period=None, free_kick_faults=None, back_passes=None, proper_goal_kicks=None, stopped_ball_vel=None, max_goal_kicks=None, clang_del_win=None, clang_rule_win=None, auto_mode=None, kick_off_wait=None, connect_wait=None, game_over_wait=None, team_l_start=None, team_r_start=None, keepaway_mode=None, keepaway_length=None, keepaway_width=None, keepaway_logging=None, keepaway_log_dir=None, keepaway_log_fixed_name=None, keepaway_log_fixed=None, keepaway_log_dated=None, keepaway_start=None, nr_normal_halfs=None, nr_extra_halfs=None, penalty_shoot_outs=None, pen_before_setup_wait=None, pen_setup_wait=None, pen_ready_wait=None, pen_taken_wait=None, pen_nr_kicks=None, pen_max_extra_kicks=None, pen_dist_x=None, pen_random_winner=None, pen_allow_mult_kicks=None, pen_max_goalie_dist_x=None, pen_coach_moves_players=None, module_dir=None, ball_stuck_area=None, coach_msg_file=None, max_tackle_power=None, max_back_tackle_power=None, player_speed_max_min=None, extra_stamina=None, synch_see_offset=None, extra_half_time=None, stamina_capacity=None, max_dash_angle=None, min_dash_angle=None, dash_angle_step=None, side_dash_rate=None, back_dash_rate=None, max_dash_power=None, min_dash_power=None, tackle_rand_factor=None, foul_detect_probability=None, foul_exponent=None, foul_cycles=None, golden_goal=None, red_card_probability=None, illegal_defense_duration=None, illegal_defense_number=None, illegal_defense_dist_x=None, illegal_defense_width=None, fixed_teamname_l=None, fixed_teamname_r=None, max_catch_angle=None, min_catch_angle=None, random_seed=None, long_kick_power_factor=None, long_kick_delay=None, max_monitors=None, catchable_area=None, real_speed_max=None, pitch_half_length=None, pitch_half_width=None, our_penalty_area_line_x=None, their_penalty_area_line_x=None, penalty_area_half_width=None, penalty_area_length=None, goal_width=None,):
        self.agent_type = agent_type
        self.inertia_moment = inertia_moment
        self.player_size = player_size
        self.player_decay = player_decay
        self.player_rand = player_rand
        self.player_weight = player_weight
        self.player_speed_max = player_speed_max
        self.player_accel_max = player_accel_max
        self.stamina_max = stamina_max
        self.stamina_inc_max = stamina_inc_max
        self.recover_init = recover_init
        self.recover_dec_thr = recover_dec_thr
        self.recover_min = recover_min
        self.recover_dec = recover_dec
        self.effort_init = effort_init
        self.effort_dec_thr = effort_dec_thr
        self.effort_min = effort_min
        self.effort_dec = effort_dec
        self.effort_inc_thr = effort_inc_thr
        self.effort_inc = effort_inc
        self.kick_rand = kick_rand
        self.team_actuator_noise = team_actuator_noise
        self.player_rand_factor_l = player_rand_factor_l
        self.player_rand_factor_r = player_rand_factor_r
        self.kick_rand_factor_l = kick_rand_factor_l
        self.kick_rand_factor_r = kick_rand_factor_r
        self.ball_size = ball_size
        self.ball_decay = ball_decay
        self.ball_rand = ball_rand
        self.ball_weight = ball_weight
        self.ball_speed_max = ball_speed_max
        self.ball_accel_max = ball_accel_max
        self.dash_power_rate = dash_power_rate
        self.kick_power_rate = kick_power_rate
        self.kickable_margin = kickable_margin
        self.control_radius = control_radius
        self.control_radius_width = control_radius_width
        self.max_power = max_power
        self.min_power = min_power
        self.max_moment = max_moment
        self.min_moment = min_moment
        self.max_neck_moment = max_neck_moment
        self.min_neck_moment = min_neck_moment
        self.max_neck_angle = max_neck_angle
        self.min_neck_angle = min_neck_angle
        self.visible_angle = visible_angle
        self.visible_distance = visible_distance
        self.wind_dir = wind_dir
        self.wind_force = wind_force
        self.wind_angle = wind_angle
        self.wind_rand = wind_rand
        self.kickable_area = kickable_area
        self.catch_area_l = catch_area_l
        self.catch_area_w = catch_area_w
        self.catch_probability = catch_probability
        self.goalie_max_moves = goalie_max_moves
        self.corner_kick_margin = corner_kick_margin
        self.offside_active_area_size = offside_active_area_size
        self.wind_none = wind_none
        self.use_wind_random = use_wind_random
        self.coach_say_count_max = coach_say_count_max
        self.coach_say_msg_size = coach_say_msg_size
        self.clang_win_size = clang_win_size
        self.clang_define_win = clang_define_win
        self.clang_meta_win = clang_meta_win
        self.clang_advice_win = clang_advice_win
        self.clang_info_win = clang_info_win
        self.clang_mess_delay = clang_mess_delay
        self.clang_mess_per_cycle = clang_mess_per_cycle
        self.half_time = half_time
        self.simulator_step = simulator_step
        self.send_step = send_step
        self.recv_step = recv_step
        self.sense_body_step = sense_body_step
        self.lcm_step = lcm_step
        self.player_say_msg_size = player_say_msg_size
        self.player_hear_max = player_hear_max
        self.player_hear_inc = player_hear_inc
        self.player_hear_decay = player_hear_decay
        self.catch_ban_cycle = catch_ban_cycle
        self.slow_down_factor = slow_down_factor
        self.use_offside = use_offside
        self.kickoff_offside = kickoff_offside
        self.offside_kick_margin = offside_kick_margin
        self.audio_cut_dist = audio_cut_dist
        self.dist_quantize_step = dist_quantize_step
        self.landmark_dist_quantize_step = landmark_dist_quantize_step
        self.dir_quantize_step = dir_quantize_step
        self.dist_quantize_step_l = dist_quantize_step_l
        self.dist_quantize_step_r = dist_quantize_step_r
        self.landmark_dist_quantize_step_l = landmark_dist_quantize_step_l
        self.landmark_dist_quantize_step_r = landmark_dist_quantize_step_r
        self.dir_quantize_step_l = dir_quantize_step_l
        self.dir_quantize_step_r = dir_quantize_step_r
        self.coach_mode = coach_mode
        self.coach_with_referee_mode = coach_with_referee_mode
        self.use_old_coach_hear = use_old_coach_hear
        self.slowness_on_top_for_left_team = slowness_on_top_for_left_team
        self.slowness_on_top_for_right_team = slowness_on_top_for_right_team
        self.start_goal_l = start_goal_l
        self.start_goal_r = start_goal_r
        self.fullstate_l = fullstate_l
        self.fullstate_r = fullstate_r
        self.drop_ball_time = drop_ball_time
        self.synch_mode = synch_mode
        self.synch_offset = synch_offset
        self.synch_micro_sleep = synch_micro_sleep
        self.point_to_ban = point_to_ban
        self.point_to_duration = point_to_duration
        self.player_port = player_port
        self.trainer_port = trainer_port
        self.online_coach_port = online_coach_port
        self.verbose_mode = verbose_mode
        self.coach_send_vi_step = coach_send_vi_step
        self.replay_file = replay_file
        self.landmark_file = landmark_file
        self.send_comms = send_comms
        self.text_logging = text_logging
        self.game_logging = game_logging
        self.game_log_version = game_log_version
        self.text_log_dir = text_log_dir
        self.game_log_dir = game_log_dir
        self.text_log_fixed_name = text_log_fixed_name
        self.game_log_fixed_name = game_log_fixed_name
        self.use_text_log_fixed = use_text_log_fixed
        self.use_game_log_fixed = use_game_log_fixed
        self.use_text_log_dated = use_text_log_dated
        self.use_game_log_dated = use_game_log_dated
        self.log_date_format = log_date_format
        self.log_times = log_times
        self.record_message = record_message
        self.text_log_compression = text_log_compression
        self.game_log_compression = game_log_compression
        self.use_profile = use_profile
        self.tackle_dist = tackle_dist
        self.tackle_back_dist = tackle_back_dist
        self.tackle_width = tackle_width
        self.tackle_exponent = tackle_exponent
        self.tackle_cycles = tackle_cycles
        self.tackle_power_rate = tackle_power_rate
        self.freeform_wait_period = freeform_wait_period
        self.freeform_send_period = freeform_send_period
        self.free_kick_faults = free_kick_faults
        self.back_passes = back_passes
        self.proper_goal_kicks = proper_goal_kicks
        self.stopped_ball_vel = stopped_ball_vel
        self.max_goal_kicks = max_goal_kicks
        self.clang_del_win = clang_del_win
        self.clang_rule_win = clang_rule_win
        self.auto_mode = auto_mode
        self.kick_off_wait = kick_off_wait
        self.connect_wait = connect_wait
        self.game_over_wait = game_over_wait
        self.team_l_start = team_l_start
        self.team_r_start = team_r_start
        self.keepaway_mode = keepaway_mode
        self.keepaway_length = keepaway_length
        self.keepaway_width = keepaway_width
        self.keepaway_logging = keepaway_logging
        self.keepaway_log_dir = keepaway_log_dir
        self.keepaway_log_fixed_name = keepaway_log_fixed_name
        self.keepaway_log_fixed = keepaway_log_fixed
        self.keepaway_log_dated = keepaway_log_dated
        self.keepaway_start = keepaway_start
        self.nr_normal_halfs = nr_normal_halfs
        self.nr_extra_halfs = nr_extra_halfs
        self.penalty_shoot_outs = penalty_shoot_outs
        self.pen_before_setup_wait = pen_before_setup_wait
        self.pen_setup_wait = pen_setup_wait
        self.pen_ready_wait = pen_ready_wait
        self.pen_taken_wait = pen_taken_wait
        self.pen_nr_kicks = pen_nr_kicks
        self.pen_max_extra_kicks = pen_max_extra_kicks
        self.pen_dist_x = pen_dist_x
        self.pen_random_winner = pen_random_winner
        self.pen_allow_mult_kicks = pen_allow_mult_kicks
        self.pen_max_goalie_dist_x = pen_max_goalie_dist_x
        self.pen_coach_moves_players = pen_coach_moves_players
        self.module_dir = module_dir
        self.ball_stuck_area = ball_stuck_area
        self.coach_msg_file = coach_msg_file
        self.max_tackle_power = max_tackle_power
        self.max_back_tackle_power = max_back_tackle_power
        self.player_speed_max_min = player_speed_max_min
        self.extra_stamina = extra_stamina
        self.synch_see_offset = synch_see_offset
        self.extra_half_time = extra_half_time
        self.stamina_capacity = stamina_capacity
        self.max_dash_angle = max_dash_angle
        self.min_dash_angle = min_dash_angle
        self.dash_angle_step = dash_angle_step
        self.side_dash_rate = side_dash_rate
        self.back_dash_rate = back_dash_rate
        self.max_dash_power = max_dash_power
        self.min_dash_power = min_dash_power
        self.tackle_rand_factor = tackle_rand_factor
        self.foul_detect_probability = foul_detect_probability
        self.foul_exponent = foul_exponent
        self.foul_cycles = foul_cycles
        self.golden_goal = golden_goal
        self.red_card_probability = red_card_probability
        self.illegal_defense_duration = illegal_defense_duration
        self.illegal_defense_number = illegal_defense_number
        self.illegal_defense_dist_x = illegal_defense_dist_x
        self.illegal_defense_width = illegal_defense_width
        self.fixed_teamname_l = fixed_teamname_l
        self.fixed_teamname_r = fixed_teamname_r
        self.max_catch_angle = max_catch_angle
        self.min_catch_angle = min_catch_angle
        self.random_seed = random_seed
        self.long_kick_power_factor = long_kick_power_factor
        self.long_kick_delay = long_kick_delay
        self.max_monitors = max_monitors
        self.catchable_area = catchable_area
        self.real_speed_max = real_speed_max
        self.pitch_half_length = pitch_half_length
        self.pitch_half_width = pitch_half_width
        self.our_penalty_area_line_x = our_penalty_area_line_x
        self.their_penalty_area_line_x = their_penalty_area_line_x
        self.penalty_area_half_width = penalty_area_half_width
        self.penalty_area_length = penalty_area_length
        self.goal_width = goal_width

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.agent_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.inertia_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.player_size = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.player_decay = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.player_rand = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.player_weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.player_speed_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.player_accel_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.stamina_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.stamina_inc_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.recover_init = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.recover_dec_thr = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.recover_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.recover_dec = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.effort_init = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.effort_dec_thr = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.effort_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.effort_dec = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.effort_inc_thr = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.effort_inc = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.kick_rand = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.team_actuator_noise = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.player_rand_factor_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.player_rand_factor_r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.kick_rand_factor_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.kick_rand_factor_r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.ball_size = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.ball_decay = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.ball_rand = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.ball_weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.DOUBLE:
                    self.ball_speed_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.DOUBLE:
                    self.ball_accel_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.DOUBLE:
                    self.dash_power_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.DOUBLE:
                    self.kick_power_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.DOUBLE:
                    self.kickable_margin = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.DOUBLE:
                    self.control_radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.DOUBLE:
                    self.control_radius_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.DOUBLE:
                    self.max_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.DOUBLE:
                    self.min_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.DOUBLE:
                    self.max_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.DOUBLE:
                    self.min_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.DOUBLE:
                    self.max_neck_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.DOUBLE:
                    self.min_neck_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.DOUBLE:
                    self.max_neck_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.DOUBLE:
                    self.min_neck_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.DOUBLE:
                    self.visible_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.DOUBLE:
                    self.visible_distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.DOUBLE:
                    self.wind_dir = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.DOUBLE:
                    self.wind_force = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.DOUBLE:
                    self.wind_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.DOUBLE:
                    self.wind_rand = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.DOUBLE:
                    self.kickable_area = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.DOUBLE:
                    self.catch_area_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.DOUBLE:
                    self.catch_area_w = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.DOUBLE:
                    self.catch_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.I32:
                    self.goalie_max_moves = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.DOUBLE:
                    self.corner_kick_margin = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.DOUBLE:
                    self.offside_active_area_size = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.BOOL:
                    self.wind_none = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.BOOL:
                    self.use_wind_random = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.I32:
                    self.coach_say_count_max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.I32:
                    self.coach_say_msg_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.I32:
                    self.clang_win_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.I32:
                    self.clang_define_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.I32:
                    self.clang_meta_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.I32:
                    self.clang_advice_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I32:
                    self.clang_info_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.I32:
                    self.clang_mess_delay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.I32:
                    self.clang_mess_per_cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.I32:
                    self.half_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.I32:
                    self.simulator_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.I32:
                    self.send_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.I32:
                    self.recv_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.I32:
                    self.sense_body_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.I32:
                    self.lcm_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.I32:
                    self.player_say_msg_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.I32:
                    self.player_hear_max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.I32:
                    self.player_hear_inc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.I32:
                    self.player_hear_decay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.I32:
                    self.catch_ban_cycle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.I32:
                    self.slow_down_factor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.BOOL:
                    self.use_offside = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.BOOL:
                    self.kickoff_offside = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 84:
                if ftype == TType.DOUBLE:
                    self.offside_kick_margin = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.DOUBLE:
                    self.audio_cut_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.DOUBLE:
                    self.dist_quantize_step = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.DOUBLE:
                    self.landmark_dist_quantize_step = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.DOUBLE:
                    self.dir_quantize_step = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.DOUBLE:
                    self.dist_quantize_step_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.DOUBLE:
                    self.dist_quantize_step_r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.DOUBLE:
                    self.landmark_dist_quantize_step_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.DOUBLE:
                    self.landmark_dist_quantize_step_r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.DOUBLE:
                    self.dir_quantize_step_l = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.DOUBLE:
                    self.dir_quantize_step_r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.BOOL:
                    self.coach_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.BOOL:
                    self.coach_with_referee_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 97:
                if ftype == TType.BOOL:
                    self.use_old_coach_hear = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.DOUBLE:
                    self.slowness_on_top_for_left_team = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 99:
                if ftype == TType.DOUBLE:
                    self.slowness_on_top_for_right_team = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.I32:
                    self.start_goal_l = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.I32:
                    self.start_goal_r = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.BOOL:
                    self.fullstate_l = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.BOOL:
                    self.fullstate_r = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.I32:
                    self.drop_ball_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.BOOL:
                    self.synch_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.I32:
                    self.synch_offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 107:
                if ftype == TType.I32:
                    self.synch_micro_sleep = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 108:
                if ftype == TType.I32:
                    self.point_to_ban = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 109:
                if ftype == TType.I32:
                    self.point_to_duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.I32:
                    self.player_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.I32:
                    self.trainer_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 112:
                if ftype == TType.I32:
                    self.online_coach_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 113:
                if ftype == TType.BOOL:
                    self.verbose_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 114:
                if ftype == TType.I32:
                    self.coach_send_vi_step = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 115:
                if ftype == TType.STRING:
                    self.replay_file = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 116:
                if ftype == TType.STRING:
                    self.landmark_file = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 117:
                if ftype == TType.BOOL:
                    self.send_comms = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 118:
                if ftype == TType.BOOL:
                    self.text_logging = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 119:
                if ftype == TType.BOOL:
                    self.game_logging = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.I32:
                    self.game_log_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 121:
                if ftype == TType.STRING:
                    self.text_log_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 122:
                if ftype == TType.STRING:
                    self.game_log_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 123:
                if ftype == TType.STRING:
                    self.text_log_fixed_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 124:
                if ftype == TType.STRING:
                    self.game_log_fixed_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 125:
                if ftype == TType.BOOL:
                    self.use_text_log_fixed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 126:
                if ftype == TType.BOOL:
                    self.use_game_log_fixed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 127:
                if ftype == TType.BOOL:
                    self.use_text_log_dated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 128:
                if ftype == TType.BOOL:
                    self.use_game_log_dated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 129:
                if ftype == TType.STRING:
                    self.log_date_format = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.BOOL:
                    self.log_times = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 131:
                if ftype == TType.BOOL:
                    self.record_message = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 132:
                if ftype == TType.I32:
                    self.text_log_compression = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 133:
                if ftype == TType.I32:
                    self.game_log_compression = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 134:
                if ftype == TType.BOOL:
                    self.use_profile = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 135:
                if ftype == TType.DOUBLE:
                    self.tackle_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 136:
                if ftype == TType.DOUBLE:
                    self.tackle_back_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 137:
                if ftype == TType.DOUBLE:
                    self.tackle_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 138:
                if ftype == TType.DOUBLE:
                    self.tackle_exponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 139:
                if ftype == TType.I32:
                    self.tackle_cycles = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.DOUBLE:
                    self.tackle_power_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 141:
                if ftype == TType.I32:
                    self.freeform_wait_period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 142:
                if ftype == TType.I32:
                    self.freeform_send_period = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 143:
                if ftype == TType.BOOL:
                    self.free_kick_faults = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 144:
                if ftype == TType.BOOL:
                    self.back_passes = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 145:
                if ftype == TType.BOOL:
                    self.proper_goal_kicks = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 146:
                if ftype == TType.DOUBLE:
                    self.stopped_ball_vel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 147:
                if ftype == TType.I32:
                    self.max_goal_kicks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 148:
                if ftype == TType.I32:
                    self.clang_del_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 149:
                if ftype == TType.I32:
                    self.clang_rule_win = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 150:
                if ftype == TType.BOOL:
                    self.auto_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 151:
                if ftype == TType.I32:
                    self.kick_off_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 152:
                if ftype == TType.I32:
                    self.connect_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 153:
                if ftype == TType.I32:
                    self.game_over_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 154:
                if ftype == TType.STRING:
                    self.team_l_start = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 155:
                if ftype == TType.STRING:
                    self.team_r_start = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 156:
                if ftype == TType.BOOL:
                    self.keepaway_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 157:
                if ftype == TType.DOUBLE:
                    self.keepaway_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 158:
                if ftype == TType.DOUBLE:
                    self.keepaway_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 159:
                if ftype == TType.BOOL:
                    self.keepaway_logging = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 160:
                if ftype == TType.STRING:
                    self.keepaway_log_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 161:
                if ftype == TType.STRING:
                    self.keepaway_log_fixed_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 162:
                if ftype == TType.BOOL:
                    self.keepaway_log_fixed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 163:
                if ftype == TType.BOOL:
                    self.keepaway_log_dated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 164:
                if ftype == TType.I32:
                    self.keepaway_start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 165:
                if ftype == TType.I32:
                    self.nr_normal_halfs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 166:
                if ftype == TType.I32:
                    self.nr_extra_halfs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 167:
                if ftype == TType.BOOL:
                    self.penalty_shoot_outs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 168:
                if ftype == TType.I32:
                    self.pen_before_setup_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 169:
                if ftype == TType.I32:
                    self.pen_setup_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 170:
                if ftype == TType.I32:
                    self.pen_ready_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 171:
                if ftype == TType.I32:
                    self.pen_taken_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 172:
                if ftype == TType.I32:
                    self.pen_nr_kicks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 173:
                if ftype == TType.I32:
                    self.pen_max_extra_kicks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 174:
                if ftype == TType.DOUBLE:
                    self.pen_dist_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 175:
                if ftype == TType.BOOL:
                    self.pen_random_winner = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 176:
                if ftype == TType.BOOL:
                    self.pen_allow_mult_kicks = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 177:
                if ftype == TType.DOUBLE:
                    self.pen_max_goalie_dist_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 178:
                if ftype == TType.BOOL:
                    self.pen_coach_moves_players = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 179:
                if ftype == TType.STRING:
                    self.module_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 180:
                if ftype == TType.DOUBLE:
                    self.ball_stuck_area = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 181:
                if ftype == TType.STRING:
                    self.coach_msg_file = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 182:
                if ftype == TType.DOUBLE:
                    self.max_tackle_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 183:
                if ftype == TType.DOUBLE:
                    self.max_back_tackle_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 184:
                if ftype == TType.DOUBLE:
                    self.player_speed_max_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 185:
                if ftype == TType.DOUBLE:
                    self.extra_stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 186:
                if ftype == TType.I32:
                    self.synch_see_offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 187:
                if ftype == TType.I32:
                    self.extra_half_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 188:
                if ftype == TType.DOUBLE:
                    self.stamina_capacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 189:
                if ftype == TType.DOUBLE:
                    self.max_dash_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 190:
                if ftype == TType.DOUBLE:
                    self.min_dash_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 191:
                if ftype == TType.DOUBLE:
                    self.dash_angle_step = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 192:
                if ftype == TType.DOUBLE:
                    self.side_dash_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 193:
                if ftype == TType.DOUBLE:
                    self.back_dash_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 194:
                if ftype == TType.DOUBLE:
                    self.max_dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 195:
                if ftype == TType.DOUBLE:
                    self.min_dash_power = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 196:
                if ftype == TType.DOUBLE:
                    self.tackle_rand_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 197:
                if ftype == TType.DOUBLE:
                    self.foul_detect_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 198:
                if ftype == TType.DOUBLE:
                    self.foul_exponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 199:
                if ftype == TType.I32:
                    self.foul_cycles = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.BOOL:
                    self.golden_goal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 201:
                if ftype == TType.DOUBLE:
                    self.red_card_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 202:
                if ftype == TType.I32:
                    self.illegal_defense_duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 203:
                if ftype == TType.I32:
                    self.illegal_defense_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 204:
                if ftype == TType.DOUBLE:
                    self.illegal_defense_dist_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 205:
                if ftype == TType.DOUBLE:
                    self.illegal_defense_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 206:
                if ftype == TType.STRING:
                    self.fixed_teamname_l = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 207:
                if ftype == TType.STRING:
                    self.fixed_teamname_r = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 208:
                if ftype == TType.DOUBLE:
                    self.max_catch_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 209:
                if ftype == TType.DOUBLE:
                    self.min_catch_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 210:
                if ftype == TType.I32:
                    self.random_seed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 211:
                if ftype == TType.DOUBLE:
                    self.long_kick_power_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 212:
                if ftype == TType.I32:
                    self.long_kick_delay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 213:
                if ftype == TType.I32:
                    self.max_monitors = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 214:
                if ftype == TType.DOUBLE:
                    self.catchable_area = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 215:
                if ftype == TType.DOUBLE:
                    self.real_speed_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 216:
                if ftype == TType.DOUBLE:
                    self.pitch_half_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 217:
                if ftype == TType.DOUBLE:
                    self.pitch_half_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 218:
                if ftype == TType.DOUBLE:
                    self.our_penalty_area_line_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 219:
                if ftype == TType.DOUBLE:
                    self.their_penalty_area_line_x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 220:
                if ftype == TType.DOUBLE:
                    self.penalty_area_half_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 221:
                if ftype == TType.DOUBLE:
                    self.penalty_area_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 222:
                if ftype == TType.DOUBLE:
                    self.goal_width = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerParam')
        if self.agent_type is not None:
            oprot.writeFieldBegin('agent_type', TType.I32, 1)
            oprot.writeI32(self.agent_type)
            oprot.writeFieldEnd()
        if self.inertia_moment is not None:
            oprot.writeFieldBegin('inertia_moment', TType.DOUBLE, 2)
            oprot.writeDouble(self.inertia_moment)
            oprot.writeFieldEnd()
        if self.player_size is not None:
            oprot.writeFieldBegin('player_size', TType.DOUBLE, 3)
            oprot.writeDouble(self.player_size)
            oprot.writeFieldEnd()
        if self.player_decay is not None:
            oprot.writeFieldBegin('player_decay', TType.DOUBLE, 4)
            oprot.writeDouble(self.player_decay)
            oprot.writeFieldEnd()
        if self.player_rand is not None:
            oprot.writeFieldBegin('player_rand', TType.DOUBLE, 5)
            oprot.writeDouble(self.player_rand)
            oprot.writeFieldEnd()
        if self.player_weight is not None:
            oprot.writeFieldBegin('player_weight', TType.DOUBLE, 6)
            oprot.writeDouble(self.player_weight)
            oprot.writeFieldEnd()
        if self.player_speed_max is not None:
            oprot.writeFieldBegin('player_speed_max', TType.DOUBLE, 7)
            oprot.writeDouble(self.player_speed_max)
            oprot.writeFieldEnd()
        if self.player_accel_max is not None:
            oprot.writeFieldBegin('player_accel_max', TType.DOUBLE, 8)
            oprot.writeDouble(self.player_accel_max)
            oprot.writeFieldEnd()
        if self.stamina_max is not None:
            oprot.writeFieldBegin('stamina_max', TType.DOUBLE, 9)
            oprot.writeDouble(self.stamina_max)
            oprot.writeFieldEnd()
        if self.stamina_inc_max is not None:
            oprot.writeFieldBegin('stamina_inc_max', TType.DOUBLE, 10)
            oprot.writeDouble(self.stamina_inc_max)
            oprot.writeFieldEnd()
        if self.recover_init is not None:
            oprot.writeFieldBegin('recover_init', TType.DOUBLE, 11)
            oprot.writeDouble(self.recover_init)
            oprot.writeFieldEnd()
        if self.recover_dec_thr is not None:
            oprot.writeFieldBegin('recover_dec_thr', TType.DOUBLE, 12)
            oprot.writeDouble(self.recover_dec_thr)
            oprot.writeFieldEnd()
        if self.recover_min is not None:
            oprot.writeFieldBegin('recover_min', TType.DOUBLE, 13)
            oprot.writeDouble(self.recover_min)
            oprot.writeFieldEnd()
        if self.recover_dec is not None:
            oprot.writeFieldBegin('recover_dec', TType.DOUBLE, 14)
            oprot.writeDouble(self.recover_dec)
            oprot.writeFieldEnd()
        if self.effort_init is not None:
            oprot.writeFieldBegin('effort_init', TType.DOUBLE, 15)
            oprot.writeDouble(self.effort_init)
            oprot.writeFieldEnd()
        if self.effort_dec_thr is not None:
            oprot.writeFieldBegin('effort_dec_thr', TType.DOUBLE, 16)
            oprot.writeDouble(self.effort_dec_thr)
            oprot.writeFieldEnd()
        if self.effort_min is not None:
            oprot.writeFieldBegin('effort_min', TType.DOUBLE, 17)
            oprot.writeDouble(self.effort_min)
            oprot.writeFieldEnd()
        if self.effort_dec is not None:
            oprot.writeFieldBegin('effort_dec', TType.DOUBLE, 18)
            oprot.writeDouble(self.effort_dec)
            oprot.writeFieldEnd()
        if self.effort_inc_thr is not None:
            oprot.writeFieldBegin('effort_inc_thr', TType.DOUBLE, 19)
            oprot.writeDouble(self.effort_inc_thr)
            oprot.writeFieldEnd()
        if self.effort_inc is not None:
            oprot.writeFieldBegin('effort_inc', TType.DOUBLE, 20)
            oprot.writeDouble(self.effort_inc)
            oprot.writeFieldEnd()
        if self.kick_rand is not None:
            oprot.writeFieldBegin('kick_rand', TType.DOUBLE, 21)
            oprot.writeDouble(self.kick_rand)
            oprot.writeFieldEnd()
        if self.team_actuator_noise is not None:
            oprot.writeFieldBegin('team_actuator_noise', TType.BOOL, 22)
            oprot.writeBool(self.team_actuator_noise)
            oprot.writeFieldEnd()
        if self.player_rand_factor_l is not None:
            oprot.writeFieldBegin('player_rand_factor_l', TType.DOUBLE, 23)
            oprot.writeDouble(self.player_rand_factor_l)
            oprot.writeFieldEnd()
        if self.player_rand_factor_r is not None:
            oprot.writeFieldBegin('player_rand_factor_r', TType.DOUBLE, 24)
            oprot.writeDouble(self.player_rand_factor_r)
            oprot.writeFieldEnd()
        if self.kick_rand_factor_l is not None:
            oprot.writeFieldBegin('kick_rand_factor_l', TType.DOUBLE, 25)
            oprot.writeDouble(self.kick_rand_factor_l)
            oprot.writeFieldEnd()
        if self.kick_rand_factor_r is not None:
            oprot.writeFieldBegin('kick_rand_factor_r', TType.DOUBLE, 26)
            oprot.writeDouble(self.kick_rand_factor_r)
            oprot.writeFieldEnd()
        if self.ball_size is not None:
            oprot.writeFieldBegin('ball_size', TType.DOUBLE, 27)
            oprot.writeDouble(self.ball_size)
            oprot.writeFieldEnd()
        if self.ball_decay is not None:
            oprot.writeFieldBegin('ball_decay', TType.DOUBLE, 28)
            oprot.writeDouble(self.ball_decay)
            oprot.writeFieldEnd()
        if self.ball_rand is not None:
            oprot.writeFieldBegin('ball_rand', TType.DOUBLE, 29)
            oprot.writeDouble(self.ball_rand)
            oprot.writeFieldEnd()
        if self.ball_weight is not None:
            oprot.writeFieldBegin('ball_weight', TType.DOUBLE, 30)
            oprot.writeDouble(self.ball_weight)
            oprot.writeFieldEnd()
        if self.ball_speed_max is not None:
            oprot.writeFieldBegin('ball_speed_max', TType.DOUBLE, 31)
            oprot.writeDouble(self.ball_speed_max)
            oprot.writeFieldEnd()
        if self.ball_accel_max is not None:
            oprot.writeFieldBegin('ball_accel_max', TType.DOUBLE, 32)
            oprot.writeDouble(self.ball_accel_max)
            oprot.writeFieldEnd()
        if self.dash_power_rate is not None:
            oprot.writeFieldBegin('dash_power_rate', TType.DOUBLE, 33)
            oprot.writeDouble(self.dash_power_rate)
            oprot.writeFieldEnd()
        if self.kick_power_rate is not None:
            oprot.writeFieldBegin('kick_power_rate', TType.DOUBLE, 34)
            oprot.writeDouble(self.kick_power_rate)
            oprot.writeFieldEnd()
        if self.kickable_margin is not None:
            oprot.writeFieldBegin('kickable_margin', TType.DOUBLE, 35)
            oprot.writeDouble(self.kickable_margin)
            oprot.writeFieldEnd()
        if self.control_radius is not None:
            oprot.writeFieldBegin('control_radius', TType.DOUBLE, 36)
            oprot.writeDouble(self.control_radius)
            oprot.writeFieldEnd()
        if self.control_radius_width is not None:
            oprot.writeFieldBegin('control_radius_width', TType.DOUBLE, 37)
            oprot.writeDouble(self.control_radius_width)
            oprot.writeFieldEnd()
        if self.max_power is not None:
            oprot.writeFieldBegin('max_power', TType.DOUBLE, 38)
            oprot.writeDouble(self.max_power)
            oprot.writeFieldEnd()
        if self.min_power is not None:
            oprot.writeFieldBegin('min_power', TType.DOUBLE, 39)
            oprot.writeDouble(self.min_power)
            oprot.writeFieldEnd()
        if self.max_moment is not None:
            oprot.writeFieldBegin('max_moment', TType.DOUBLE, 40)
            oprot.writeDouble(self.max_moment)
            oprot.writeFieldEnd()
        if self.min_moment is not None:
            oprot.writeFieldBegin('min_moment', TType.DOUBLE, 41)
            oprot.writeDouble(self.min_moment)
            oprot.writeFieldEnd()
        if self.max_neck_moment is not None:
            oprot.writeFieldBegin('max_neck_moment', TType.DOUBLE, 42)
            oprot.writeDouble(self.max_neck_moment)
            oprot.writeFieldEnd()
        if self.min_neck_moment is not None:
            oprot.writeFieldBegin('min_neck_moment', TType.DOUBLE, 43)
            oprot.writeDouble(self.min_neck_moment)
            oprot.writeFieldEnd()
        if self.max_neck_angle is not None:
            oprot.writeFieldBegin('max_neck_angle', TType.DOUBLE, 44)
            oprot.writeDouble(self.max_neck_angle)
            oprot.writeFieldEnd()
        if self.min_neck_angle is not None:
            oprot.writeFieldBegin('min_neck_angle', TType.DOUBLE, 45)
            oprot.writeDouble(self.min_neck_angle)
            oprot.writeFieldEnd()
        if self.visible_angle is not None:
            oprot.writeFieldBegin('visible_angle', TType.DOUBLE, 46)
            oprot.writeDouble(self.visible_angle)
            oprot.writeFieldEnd()
        if self.visible_distance is not None:
            oprot.writeFieldBegin('visible_distance', TType.DOUBLE, 47)
            oprot.writeDouble(self.visible_distance)
            oprot.writeFieldEnd()
        if self.wind_dir is not None:
            oprot.writeFieldBegin('wind_dir', TType.DOUBLE, 48)
            oprot.writeDouble(self.wind_dir)
            oprot.writeFieldEnd()
        if self.wind_force is not None:
            oprot.writeFieldBegin('wind_force', TType.DOUBLE, 49)
            oprot.writeDouble(self.wind_force)
            oprot.writeFieldEnd()
        if self.wind_angle is not None:
            oprot.writeFieldBegin('wind_angle', TType.DOUBLE, 50)
            oprot.writeDouble(self.wind_angle)
            oprot.writeFieldEnd()
        if self.wind_rand is not None:
            oprot.writeFieldBegin('wind_rand', TType.DOUBLE, 51)
            oprot.writeDouble(self.wind_rand)
            oprot.writeFieldEnd()
        if self.kickable_area is not None:
            oprot.writeFieldBegin('kickable_area', TType.DOUBLE, 52)
            oprot.writeDouble(self.kickable_area)
            oprot.writeFieldEnd()
        if self.catch_area_l is not None:
            oprot.writeFieldBegin('catch_area_l', TType.DOUBLE, 53)
            oprot.writeDouble(self.catch_area_l)
            oprot.writeFieldEnd()
        if self.catch_area_w is not None:
            oprot.writeFieldBegin('catch_area_w', TType.DOUBLE, 54)
            oprot.writeDouble(self.catch_area_w)
            oprot.writeFieldEnd()
        if self.catch_probability is not None:
            oprot.writeFieldBegin('catch_probability', TType.DOUBLE, 55)
            oprot.writeDouble(self.catch_probability)
            oprot.writeFieldEnd()
        if self.goalie_max_moves is not None:
            oprot.writeFieldBegin('goalie_max_moves', TType.I32, 56)
            oprot.writeI32(self.goalie_max_moves)
            oprot.writeFieldEnd()
        if self.corner_kick_margin is not None:
            oprot.writeFieldBegin('corner_kick_margin', TType.DOUBLE, 57)
            oprot.writeDouble(self.corner_kick_margin)
            oprot.writeFieldEnd()
        if self.offside_active_area_size is not None:
            oprot.writeFieldBegin('offside_active_area_size', TType.DOUBLE, 58)
            oprot.writeDouble(self.offside_active_area_size)
            oprot.writeFieldEnd()
        if self.wind_none is not None:
            oprot.writeFieldBegin('wind_none', TType.BOOL, 59)
            oprot.writeBool(self.wind_none)
            oprot.writeFieldEnd()
        if self.use_wind_random is not None:
            oprot.writeFieldBegin('use_wind_random', TType.BOOL, 60)
            oprot.writeBool(self.use_wind_random)
            oprot.writeFieldEnd()
        if self.coach_say_count_max is not None:
            oprot.writeFieldBegin('coach_say_count_max', TType.I32, 61)
            oprot.writeI32(self.coach_say_count_max)
            oprot.writeFieldEnd()
        if self.coach_say_msg_size is not None:
            oprot.writeFieldBegin('coach_say_msg_size', TType.I32, 62)
            oprot.writeI32(self.coach_say_msg_size)
            oprot.writeFieldEnd()
        if self.clang_win_size is not None:
            oprot.writeFieldBegin('clang_win_size', TType.I32, 63)
            oprot.writeI32(self.clang_win_size)
            oprot.writeFieldEnd()
        if self.clang_define_win is not None:
            oprot.writeFieldBegin('clang_define_win', TType.I32, 64)
            oprot.writeI32(self.clang_define_win)
            oprot.writeFieldEnd()
        if self.clang_meta_win is not None:
            oprot.writeFieldBegin('clang_meta_win', TType.I32, 65)
            oprot.writeI32(self.clang_meta_win)
            oprot.writeFieldEnd()
        if self.clang_advice_win is not None:
            oprot.writeFieldBegin('clang_advice_win', TType.I32, 66)
            oprot.writeI32(self.clang_advice_win)
            oprot.writeFieldEnd()
        if self.clang_info_win is not None:
            oprot.writeFieldBegin('clang_info_win', TType.I32, 67)
            oprot.writeI32(self.clang_info_win)
            oprot.writeFieldEnd()
        if self.clang_mess_delay is not None:
            oprot.writeFieldBegin('clang_mess_delay', TType.I32, 68)
            oprot.writeI32(self.clang_mess_delay)
            oprot.writeFieldEnd()
        if self.clang_mess_per_cycle is not None:
            oprot.writeFieldBegin('clang_mess_per_cycle', TType.I32, 69)
            oprot.writeI32(self.clang_mess_per_cycle)
            oprot.writeFieldEnd()
        if self.half_time is not None:
            oprot.writeFieldBegin('half_time', TType.I32, 70)
            oprot.writeI32(self.half_time)
            oprot.writeFieldEnd()
        if self.simulator_step is not None:
            oprot.writeFieldBegin('simulator_step', TType.I32, 71)
            oprot.writeI32(self.simulator_step)
            oprot.writeFieldEnd()
        if self.send_step is not None:
            oprot.writeFieldBegin('send_step', TType.I32, 72)
            oprot.writeI32(self.send_step)
            oprot.writeFieldEnd()
        if self.recv_step is not None:
            oprot.writeFieldBegin('recv_step', TType.I32, 73)
            oprot.writeI32(self.recv_step)
            oprot.writeFieldEnd()
        if self.sense_body_step is not None:
            oprot.writeFieldBegin('sense_body_step', TType.I32, 74)
            oprot.writeI32(self.sense_body_step)
            oprot.writeFieldEnd()
        if self.lcm_step is not None:
            oprot.writeFieldBegin('lcm_step', TType.I32, 75)
            oprot.writeI32(self.lcm_step)
            oprot.writeFieldEnd()
        if self.player_say_msg_size is not None:
            oprot.writeFieldBegin('player_say_msg_size', TType.I32, 76)
            oprot.writeI32(self.player_say_msg_size)
            oprot.writeFieldEnd()
        if self.player_hear_max is not None:
            oprot.writeFieldBegin('player_hear_max', TType.I32, 77)
            oprot.writeI32(self.player_hear_max)
            oprot.writeFieldEnd()
        if self.player_hear_inc is not None:
            oprot.writeFieldBegin('player_hear_inc', TType.I32, 78)
            oprot.writeI32(self.player_hear_inc)
            oprot.writeFieldEnd()
        if self.player_hear_decay is not None:
            oprot.writeFieldBegin('player_hear_decay', TType.I32, 79)
            oprot.writeI32(self.player_hear_decay)
            oprot.writeFieldEnd()
        if self.catch_ban_cycle is not None:
            oprot.writeFieldBegin('catch_ban_cycle', TType.I32, 80)
            oprot.writeI32(self.catch_ban_cycle)
            oprot.writeFieldEnd()
        if self.slow_down_factor is not None:
            oprot.writeFieldBegin('slow_down_factor', TType.I32, 81)
            oprot.writeI32(self.slow_down_factor)
            oprot.writeFieldEnd()
        if self.use_offside is not None:
            oprot.writeFieldBegin('use_offside', TType.BOOL, 82)
            oprot.writeBool(self.use_offside)
            oprot.writeFieldEnd()
        if self.kickoff_offside is not None:
            oprot.writeFieldBegin('kickoff_offside', TType.BOOL, 83)
            oprot.writeBool(self.kickoff_offside)
            oprot.writeFieldEnd()
        if self.offside_kick_margin is not None:
            oprot.writeFieldBegin('offside_kick_margin', TType.DOUBLE, 84)
            oprot.writeDouble(self.offside_kick_margin)
            oprot.writeFieldEnd()
        if self.audio_cut_dist is not None:
            oprot.writeFieldBegin('audio_cut_dist', TType.DOUBLE, 85)
            oprot.writeDouble(self.audio_cut_dist)
            oprot.writeFieldEnd()
        if self.dist_quantize_step is not None:
            oprot.writeFieldBegin('dist_quantize_step', TType.DOUBLE, 86)
            oprot.writeDouble(self.dist_quantize_step)
            oprot.writeFieldEnd()
        if self.landmark_dist_quantize_step is not None:
            oprot.writeFieldBegin('landmark_dist_quantize_step', TType.DOUBLE, 87)
            oprot.writeDouble(self.landmark_dist_quantize_step)
            oprot.writeFieldEnd()
        if self.dir_quantize_step is not None:
            oprot.writeFieldBegin('dir_quantize_step', TType.DOUBLE, 88)
            oprot.writeDouble(self.dir_quantize_step)
            oprot.writeFieldEnd()
        if self.dist_quantize_step_l is not None:
            oprot.writeFieldBegin('dist_quantize_step_l', TType.DOUBLE, 89)
            oprot.writeDouble(self.dist_quantize_step_l)
            oprot.writeFieldEnd()
        if self.dist_quantize_step_r is not None:
            oprot.writeFieldBegin('dist_quantize_step_r', TType.DOUBLE, 90)
            oprot.writeDouble(self.dist_quantize_step_r)
            oprot.writeFieldEnd()
        if self.landmark_dist_quantize_step_l is not None:
            oprot.writeFieldBegin('landmark_dist_quantize_step_l', TType.DOUBLE, 91)
            oprot.writeDouble(self.landmark_dist_quantize_step_l)
            oprot.writeFieldEnd()
        if self.landmark_dist_quantize_step_r is not None:
            oprot.writeFieldBegin('landmark_dist_quantize_step_r', TType.DOUBLE, 92)
            oprot.writeDouble(self.landmark_dist_quantize_step_r)
            oprot.writeFieldEnd()
        if self.dir_quantize_step_l is not None:
            oprot.writeFieldBegin('dir_quantize_step_l', TType.DOUBLE, 93)
            oprot.writeDouble(self.dir_quantize_step_l)
            oprot.writeFieldEnd()
        if self.dir_quantize_step_r is not None:
            oprot.writeFieldBegin('dir_quantize_step_r', TType.DOUBLE, 94)
            oprot.writeDouble(self.dir_quantize_step_r)
            oprot.writeFieldEnd()
        if self.coach_mode is not None:
            oprot.writeFieldBegin('coach_mode', TType.BOOL, 95)
            oprot.writeBool(self.coach_mode)
            oprot.writeFieldEnd()
        if self.coach_with_referee_mode is not None:
            oprot.writeFieldBegin('coach_with_referee_mode', TType.BOOL, 96)
            oprot.writeBool(self.coach_with_referee_mode)
            oprot.writeFieldEnd()
        if self.use_old_coach_hear is not None:
            oprot.writeFieldBegin('use_old_coach_hear', TType.BOOL, 97)
            oprot.writeBool(self.use_old_coach_hear)
            oprot.writeFieldEnd()
        if self.slowness_on_top_for_left_team is not None:
            oprot.writeFieldBegin('slowness_on_top_for_left_team', TType.DOUBLE, 98)
            oprot.writeDouble(self.slowness_on_top_for_left_team)
            oprot.writeFieldEnd()
        if self.slowness_on_top_for_right_team is not None:
            oprot.writeFieldBegin('slowness_on_top_for_right_team', TType.DOUBLE, 99)
            oprot.writeDouble(self.slowness_on_top_for_right_team)
            oprot.writeFieldEnd()
        if self.start_goal_l is not None:
            oprot.writeFieldBegin('start_goal_l', TType.I32, 100)
            oprot.writeI32(self.start_goal_l)
            oprot.writeFieldEnd()
        if self.start_goal_r is not None:
            oprot.writeFieldBegin('start_goal_r', TType.I32, 101)
            oprot.writeI32(self.start_goal_r)
            oprot.writeFieldEnd()
        if self.fullstate_l is not None:
            oprot.writeFieldBegin('fullstate_l', TType.BOOL, 102)
            oprot.writeBool(self.fullstate_l)
            oprot.writeFieldEnd()
        if self.fullstate_r is not None:
            oprot.writeFieldBegin('fullstate_r', TType.BOOL, 103)
            oprot.writeBool(self.fullstate_r)
            oprot.writeFieldEnd()
        if self.drop_ball_time is not None:
            oprot.writeFieldBegin('drop_ball_time', TType.I32, 104)
            oprot.writeI32(self.drop_ball_time)
            oprot.writeFieldEnd()
        if self.synch_mode is not None:
            oprot.writeFieldBegin('synch_mode', TType.BOOL, 105)
            oprot.writeBool(self.synch_mode)
            oprot.writeFieldEnd()
        if self.synch_offset is not None:
            oprot.writeFieldBegin('synch_offset', TType.I32, 106)
            oprot.writeI32(self.synch_offset)
            oprot.writeFieldEnd()
        if self.synch_micro_sleep is not None:
            oprot.writeFieldBegin('synch_micro_sleep', TType.I32, 107)
            oprot.writeI32(self.synch_micro_sleep)
            oprot.writeFieldEnd()
        if self.point_to_ban is not None:
            oprot.writeFieldBegin('point_to_ban', TType.I32, 108)
            oprot.writeI32(self.point_to_ban)
            oprot.writeFieldEnd()
        if self.point_to_duration is not None:
            oprot.writeFieldBegin('point_to_duration', TType.I32, 109)
            oprot.writeI32(self.point_to_duration)
            oprot.writeFieldEnd()
        if self.player_port is not None:
            oprot.writeFieldBegin('player_port', TType.I32, 110)
            oprot.writeI32(self.player_port)
            oprot.writeFieldEnd()
        if self.trainer_port is not None:
            oprot.writeFieldBegin('trainer_port', TType.I32, 111)
            oprot.writeI32(self.trainer_port)
            oprot.writeFieldEnd()
        if self.online_coach_port is not None:
            oprot.writeFieldBegin('online_coach_port', TType.I32, 112)
            oprot.writeI32(self.online_coach_port)
            oprot.writeFieldEnd()
        if self.verbose_mode is not None:
            oprot.writeFieldBegin('verbose_mode', TType.BOOL, 113)
            oprot.writeBool(self.verbose_mode)
            oprot.writeFieldEnd()
        if self.coach_send_vi_step is not None:
            oprot.writeFieldBegin('coach_send_vi_step', TType.I32, 114)
            oprot.writeI32(self.coach_send_vi_step)
            oprot.writeFieldEnd()
        if self.replay_file is not None:
            oprot.writeFieldBegin('replay_file', TType.STRING, 115)
            oprot.writeString(self.replay_file.encode('utf-8') if sys.version_info[0] == 2 else self.replay_file)
            oprot.writeFieldEnd()
        if self.landmark_file is not None:
            oprot.writeFieldBegin('landmark_file', TType.STRING, 116)
            oprot.writeString(self.landmark_file.encode('utf-8') if sys.version_info[0] == 2 else self.landmark_file)
            oprot.writeFieldEnd()
        if self.send_comms is not None:
            oprot.writeFieldBegin('send_comms', TType.BOOL, 117)
            oprot.writeBool(self.send_comms)
            oprot.writeFieldEnd()
        if self.text_logging is not None:
            oprot.writeFieldBegin('text_logging', TType.BOOL, 118)
            oprot.writeBool(self.text_logging)
            oprot.writeFieldEnd()
        if self.game_logging is not None:
            oprot.writeFieldBegin('game_logging', TType.BOOL, 119)
            oprot.writeBool(self.game_logging)
            oprot.writeFieldEnd()
        if self.game_log_version is not None:
            oprot.writeFieldBegin('game_log_version', TType.I32, 120)
            oprot.writeI32(self.game_log_version)
            oprot.writeFieldEnd()
        if self.text_log_dir is not None:
            oprot.writeFieldBegin('text_log_dir', TType.STRING, 121)
            oprot.writeString(self.text_log_dir.encode('utf-8') if sys.version_info[0] == 2 else self.text_log_dir)
            oprot.writeFieldEnd()
        if self.game_log_dir is not None:
            oprot.writeFieldBegin('game_log_dir', TType.STRING, 122)
            oprot.writeString(self.game_log_dir.encode('utf-8') if sys.version_info[0] == 2 else self.game_log_dir)
            oprot.writeFieldEnd()
        if self.text_log_fixed_name is not None:
            oprot.writeFieldBegin('text_log_fixed_name', TType.STRING, 123)
            oprot.writeString(self.text_log_fixed_name.encode('utf-8') if sys.version_info[0] == 2 else self.text_log_fixed_name)
            oprot.writeFieldEnd()
        if self.game_log_fixed_name is not None:
            oprot.writeFieldBegin('game_log_fixed_name', TType.STRING, 124)
            oprot.writeString(self.game_log_fixed_name.encode('utf-8') if sys.version_info[0] == 2 else self.game_log_fixed_name)
            oprot.writeFieldEnd()
        if self.use_text_log_fixed is not None:
            oprot.writeFieldBegin('use_text_log_fixed', TType.BOOL, 125)
            oprot.writeBool(self.use_text_log_fixed)
            oprot.writeFieldEnd()
        if self.use_game_log_fixed is not None:
            oprot.writeFieldBegin('use_game_log_fixed', TType.BOOL, 126)
            oprot.writeBool(self.use_game_log_fixed)
            oprot.writeFieldEnd()
        if self.use_text_log_dated is not None:
            oprot.writeFieldBegin('use_text_log_dated', TType.BOOL, 127)
            oprot.writeBool(self.use_text_log_dated)
            oprot.writeFieldEnd()
        if self.use_game_log_dated is not None:
            oprot.writeFieldBegin('use_game_log_dated', TType.BOOL, 128)
            oprot.writeBool(self.use_game_log_dated)
            oprot.writeFieldEnd()
        if self.log_date_format is not None:
            oprot.writeFieldBegin('log_date_format', TType.STRING, 129)
            oprot.writeString(self.log_date_format.encode('utf-8') if sys.version_info[0] == 2 else self.log_date_format)
            oprot.writeFieldEnd()
        if self.log_times is not None:
            oprot.writeFieldBegin('log_times', TType.BOOL, 130)
            oprot.writeBool(self.log_times)
            oprot.writeFieldEnd()
        if self.record_message is not None:
            oprot.writeFieldBegin('record_message', TType.BOOL, 131)
            oprot.writeBool(self.record_message)
            oprot.writeFieldEnd()
        if self.text_log_compression is not None:
            oprot.writeFieldBegin('text_log_compression', TType.I32, 132)
            oprot.writeI32(self.text_log_compression)
            oprot.writeFieldEnd()
        if self.game_log_compression is not None:
            oprot.writeFieldBegin('game_log_compression', TType.I32, 133)
            oprot.writeI32(self.game_log_compression)
            oprot.writeFieldEnd()
        if self.use_profile is not None:
            oprot.writeFieldBegin('use_profile', TType.BOOL, 134)
            oprot.writeBool(self.use_profile)
            oprot.writeFieldEnd()
        if self.tackle_dist is not None:
            oprot.writeFieldBegin('tackle_dist', TType.DOUBLE, 135)
            oprot.writeDouble(self.tackle_dist)
            oprot.writeFieldEnd()
        if self.tackle_back_dist is not None:
            oprot.writeFieldBegin('tackle_back_dist', TType.DOUBLE, 136)
            oprot.writeDouble(self.tackle_back_dist)
            oprot.writeFieldEnd()
        if self.tackle_width is not None:
            oprot.writeFieldBegin('tackle_width', TType.DOUBLE, 137)
            oprot.writeDouble(self.tackle_width)
            oprot.writeFieldEnd()
        if self.tackle_exponent is not None:
            oprot.writeFieldBegin('tackle_exponent', TType.DOUBLE, 138)
            oprot.writeDouble(self.tackle_exponent)
            oprot.writeFieldEnd()
        if self.tackle_cycles is not None:
            oprot.writeFieldBegin('tackle_cycles', TType.I32, 139)
            oprot.writeI32(self.tackle_cycles)
            oprot.writeFieldEnd()
        if self.tackle_power_rate is not None:
            oprot.writeFieldBegin('tackle_power_rate', TType.DOUBLE, 140)
            oprot.writeDouble(self.tackle_power_rate)
            oprot.writeFieldEnd()
        if self.freeform_wait_period is not None:
            oprot.writeFieldBegin('freeform_wait_period', TType.I32, 141)
            oprot.writeI32(self.freeform_wait_period)
            oprot.writeFieldEnd()
        if self.freeform_send_period is not None:
            oprot.writeFieldBegin('freeform_send_period', TType.I32, 142)
            oprot.writeI32(self.freeform_send_period)
            oprot.writeFieldEnd()
        if self.free_kick_faults is not None:
            oprot.writeFieldBegin('free_kick_faults', TType.BOOL, 143)
            oprot.writeBool(self.free_kick_faults)
            oprot.writeFieldEnd()
        if self.back_passes is not None:
            oprot.writeFieldBegin('back_passes', TType.BOOL, 144)
            oprot.writeBool(self.back_passes)
            oprot.writeFieldEnd()
        if self.proper_goal_kicks is not None:
            oprot.writeFieldBegin('proper_goal_kicks', TType.BOOL, 145)
            oprot.writeBool(self.proper_goal_kicks)
            oprot.writeFieldEnd()
        if self.stopped_ball_vel is not None:
            oprot.writeFieldBegin('stopped_ball_vel', TType.DOUBLE, 146)
            oprot.writeDouble(self.stopped_ball_vel)
            oprot.writeFieldEnd()
        if self.max_goal_kicks is not None:
            oprot.writeFieldBegin('max_goal_kicks', TType.I32, 147)
            oprot.writeI32(self.max_goal_kicks)
            oprot.writeFieldEnd()
        if self.clang_del_win is not None:
            oprot.writeFieldBegin('clang_del_win', TType.I32, 148)
            oprot.writeI32(self.clang_del_win)
            oprot.writeFieldEnd()
        if self.clang_rule_win is not None:
            oprot.writeFieldBegin('clang_rule_win', TType.I32, 149)
            oprot.writeI32(self.clang_rule_win)
            oprot.writeFieldEnd()
        if self.auto_mode is not None:
            oprot.writeFieldBegin('auto_mode', TType.BOOL, 150)
            oprot.writeBool(self.auto_mode)
            oprot.writeFieldEnd()
        if self.kick_off_wait is not None:
            oprot.writeFieldBegin('kick_off_wait', TType.I32, 151)
            oprot.writeI32(self.kick_off_wait)
            oprot.writeFieldEnd()
        if self.connect_wait is not None:
            oprot.writeFieldBegin('connect_wait', TType.I32, 152)
            oprot.writeI32(self.connect_wait)
            oprot.writeFieldEnd()
        if self.game_over_wait is not None:
            oprot.writeFieldBegin('game_over_wait', TType.I32, 153)
            oprot.writeI32(self.game_over_wait)
            oprot.writeFieldEnd()
        if self.team_l_start is not None:
            oprot.writeFieldBegin('team_l_start', TType.STRING, 154)
            oprot.writeString(self.team_l_start.encode('utf-8') if sys.version_info[0] == 2 else self.team_l_start)
            oprot.writeFieldEnd()
        if self.team_r_start is not None:
            oprot.writeFieldBegin('team_r_start', TType.STRING, 155)
            oprot.writeString(self.team_r_start.encode('utf-8') if sys.version_info[0] == 2 else self.team_r_start)
            oprot.writeFieldEnd()
        if self.keepaway_mode is not None:
            oprot.writeFieldBegin('keepaway_mode', TType.BOOL, 156)
            oprot.writeBool(self.keepaway_mode)
            oprot.writeFieldEnd()
        if self.keepaway_length is not None:
            oprot.writeFieldBegin('keepaway_length', TType.DOUBLE, 157)
            oprot.writeDouble(self.keepaway_length)
            oprot.writeFieldEnd()
        if self.keepaway_width is not None:
            oprot.writeFieldBegin('keepaway_width', TType.DOUBLE, 158)
            oprot.writeDouble(self.keepaway_width)
            oprot.writeFieldEnd()
        if self.keepaway_logging is not None:
            oprot.writeFieldBegin('keepaway_logging', TType.BOOL, 159)
            oprot.writeBool(self.keepaway_logging)
            oprot.writeFieldEnd()
        if self.keepaway_log_dir is not None:
            oprot.writeFieldBegin('keepaway_log_dir', TType.STRING, 160)
            oprot.writeString(self.keepaway_log_dir.encode('utf-8') if sys.version_info[0] == 2 else self.keepaway_log_dir)
            oprot.writeFieldEnd()
        if self.keepaway_log_fixed_name is not None:
            oprot.writeFieldBegin('keepaway_log_fixed_name', TType.STRING, 161)
            oprot.writeString(self.keepaway_log_fixed_name.encode('utf-8') if sys.version_info[0] == 2 else self.keepaway_log_fixed_name)
            oprot.writeFieldEnd()
        if self.keepaway_log_fixed is not None:
            oprot.writeFieldBegin('keepaway_log_fixed', TType.BOOL, 162)
            oprot.writeBool(self.keepaway_log_fixed)
            oprot.writeFieldEnd()
        if self.keepaway_log_dated is not None:
            oprot.writeFieldBegin('keepaway_log_dated', TType.BOOL, 163)
            oprot.writeBool(self.keepaway_log_dated)
            oprot.writeFieldEnd()
        if self.keepaway_start is not None:
            oprot.writeFieldBegin('keepaway_start', TType.I32, 164)
            oprot.writeI32(self.keepaway_start)
            oprot.writeFieldEnd()
        if self.nr_normal_halfs is not None:
            oprot.writeFieldBegin('nr_normal_halfs', TType.I32, 165)
            oprot.writeI32(self.nr_normal_halfs)
            oprot.writeFieldEnd()
        if self.nr_extra_halfs is not None:
            oprot.writeFieldBegin('nr_extra_halfs', TType.I32, 166)
            oprot.writeI32(self.nr_extra_halfs)
            oprot.writeFieldEnd()
        if self.penalty_shoot_outs is not None:
            oprot.writeFieldBegin('penalty_shoot_outs', TType.BOOL, 167)
            oprot.writeBool(self.penalty_shoot_outs)
            oprot.writeFieldEnd()
        if self.pen_before_setup_wait is not None:
            oprot.writeFieldBegin('pen_before_setup_wait', TType.I32, 168)
            oprot.writeI32(self.pen_before_setup_wait)
            oprot.writeFieldEnd()
        if self.pen_setup_wait is not None:
            oprot.writeFieldBegin('pen_setup_wait', TType.I32, 169)
            oprot.writeI32(self.pen_setup_wait)
            oprot.writeFieldEnd()
        if self.pen_ready_wait is not None:
            oprot.writeFieldBegin('pen_ready_wait', TType.I32, 170)
            oprot.writeI32(self.pen_ready_wait)
            oprot.writeFieldEnd()
        if self.pen_taken_wait is not None:
            oprot.writeFieldBegin('pen_taken_wait', TType.I32, 171)
            oprot.writeI32(self.pen_taken_wait)
            oprot.writeFieldEnd()
        if self.pen_nr_kicks is not None:
            oprot.writeFieldBegin('pen_nr_kicks', TType.I32, 172)
            oprot.writeI32(self.pen_nr_kicks)
            oprot.writeFieldEnd()
        if self.pen_max_extra_kicks is not None:
            oprot.writeFieldBegin('pen_max_extra_kicks', TType.I32, 173)
            oprot.writeI32(self.pen_max_extra_kicks)
            oprot.writeFieldEnd()
        if self.pen_dist_x is not None:
            oprot.writeFieldBegin('pen_dist_x', TType.DOUBLE, 174)
            oprot.writeDouble(self.pen_dist_x)
            oprot.writeFieldEnd()
        if self.pen_random_winner is not None:
            oprot.writeFieldBegin('pen_random_winner', TType.BOOL, 175)
            oprot.writeBool(self.pen_random_winner)
            oprot.writeFieldEnd()
        if self.pen_allow_mult_kicks is not None:
            oprot.writeFieldBegin('pen_allow_mult_kicks', TType.BOOL, 176)
            oprot.writeBool(self.pen_allow_mult_kicks)
            oprot.writeFieldEnd()
        if self.pen_max_goalie_dist_x is not None:
            oprot.writeFieldBegin('pen_max_goalie_dist_x', TType.DOUBLE, 177)
            oprot.writeDouble(self.pen_max_goalie_dist_x)
            oprot.writeFieldEnd()
        if self.pen_coach_moves_players is not None:
            oprot.writeFieldBegin('pen_coach_moves_players', TType.BOOL, 178)
            oprot.writeBool(self.pen_coach_moves_players)
            oprot.writeFieldEnd()
        if self.module_dir is not None:
            oprot.writeFieldBegin('module_dir', TType.STRING, 179)
            oprot.writeString(self.module_dir.encode('utf-8') if sys.version_info[0] == 2 else self.module_dir)
            oprot.writeFieldEnd()
        if self.ball_stuck_area is not None:
            oprot.writeFieldBegin('ball_stuck_area', TType.DOUBLE, 180)
            oprot.writeDouble(self.ball_stuck_area)
            oprot.writeFieldEnd()
        if self.coach_msg_file is not None:
            oprot.writeFieldBegin('coach_msg_file', TType.STRING, 181)
            oprot.writeString(self.coach_msg_file.encode('utf-8') if sys.version_info[0] == 2 else self.coach_msg_file)
            oprot.writeFieldEnd()
        if self.max_tackle_power is not None:
            oprot.writeFieldBegin('max_tackle_power', TType.DOUBLE, 182)
            oprot.writeDouble(self.max_tackle_power)
            oprot.writeFieldEnd()
        if self.max_back_tackle_power is not None:
            oprot.writeFieldBegin('max_back_tackle_power', TType.DOUBLE, 183)
            oprot.writeDouble(self.max_back_tackle_power)
            oprot.writeFieldEnd()
        if self.player_speed_max_min is not None:
            oprot.writeFieldBegin('player_speed_max_min', TType.DOUBLE, 184)
            oprot.writeDouble(self.player_speed_max_min)
            oprot.writeFieldEnd()
        if self.extra_stamina is not None:
            oprot.writeFieldBegin('extra_stamina', TType.DOUBLE, 185)
            oprot.writeDouble(self.extra_stamina)
            oprot.writeFieldEnd()
        if self.synch_see_offset is not None:
            oprot.writeFieldBegin('synch_see_offset', TType.I32, 186)
            oprot.writeI32(self.synch_see_offset)
            oprot.writeFieldEnd()
        if self.extra_half_time is not None:
            oprot.writeFieldBegin('extra_half_time', TType.I32, 187)
            oprot.writeI32(self.extra_half_time)
            oprot.writeFieldEnd()
        if self.stamina_capacity is not None:
            oprot.writeFieldBegin('stamina_capacity', TType.DOUBLE, 188)
            oprot.writeDouble(self.stamina_capacity)
            oprot.writeFieldEnd()
        if self.max_dash_angle is not None:
            oprot.writeFieldBegin('max_dash_angle', TType.DOUBLE, 189)
            oprot.writeDouble(self.max_dash_angle)
            oprot.writeFieldEnd()
        if self.min_dash_angle is not None:
            oprot.writeFieldBegin('min_dash_angle', TType.DOUBLE, 190)
            oprot.writeDouble(self.min_dash_angle)
            oprot.writeFieldEnd()
        if self.dash_angle_step is not None:
            oprot.writeFieldBegin('dash_angle_step', TType.DOUBLE, 191)
            oprot.writeDouble(self.dash_angle_step)
            oprot.writeFieldEnd()
        if self.side_dash_rate is not None:
            oprot.writeFieldBegin('side_dash_rate', TType.DOUBLE, 192)
            oprot.writeDouble(self.side_dash_rate)
            oprot.writeFieldEnd()
        if self.back_dash_rate is not None:
            oprot.writeFieldBegin('back_dash_rate', TType.DOUBLE, 193)
            oprot.writeDouble(self.back_dash_rate)
            oprot.writeFieldEnd()
        if self.max_dash_power is not None:
            oprot.writeFieldBegin('max_dash_power', TType.DOUBLE, 194)
            oprot.writeDouble(self.max_dash_power)
            oprot.writeFieldEnd()
        if self.min_dash_power is not None:
            oprot.writeFieldBegin('min_dash_power', TType.DOUBLE, 195)
            oprot.writeDouble(self.min_dash_power)
            oprot.writeFieldEnd()
        if self.tackle_rand_factor is not None:
            oprot.writeFieldBegin('tackle_rand_factor', TType.DOUBLE, 196)
            oprot.writeDouble(self.tackle_rand_factor)
            oprot.writeFieldEnd()
        if self.foul_detect_probability is not None:
            oprot.writeFieldBegin('foul_detect_probability', TType.DOUBLE, 197)
            oprot.writeDouble(self.foul_detect_probability)
            oprot.writeFieldEnd()
        if self.foul_exponent is not None:
            oprot.writeFieldBegin('foul_exponent', TType.DOUBLE, 198)
            oprot.writeDouble(self.foul_exponent)
            oprot.writeFieldEnd()
        if self.foul_cycles is not None:
            oprot.writeFieldBegin('foul_cycles', TType.I32, 199)
            oprot.writeI32(self.foul_cycles)
            oprot.writeFieldEnd()
        if self.golden_goal is not None:
            oprot.writeFieldBegin('golden_goal', TType.BOOL, 200)
            oprot.writeBool(self.golden_goal)
            oprot.writeFieldEnd()
        if self.red_card_probability is not None:
            oprot.writeFieldBegin('red_card_probability', TType.DOUBLE, 201)
            oprot.writeDouble(self.red_card_probability)
            oprot.writeFieldEnd()
        if self.illegal_defense_duration is not None:
            oprot.writeFieldBegin('illegal_defense_duration', TType.I32, 202)
            oprot.writeI32(self.illegal_defense_duration)
            oprot.writeFieldEnd()
        if self.illegal_defense_number is not None:
            oprot.writeFieldBegin('illegal_defense_number', TType.I32, 203)
            oprot.writeI32(self.illegal_defense_number)
            oprot.writeFieldEnd()
        if self.illegal_defense_dist_x is not None:
            oprot.writeFieldBegin('illegal_defense_dist_x', TType.DOUBLE, 204)
            oprot.writeDouble(self.illegal_defense_dist_x)
            oprot.writeFieldEnd()
        if self.illegal_defense_width is not None:
            oprot.writeFieldBegin('illegal_defense_width', TType.DOUBLE, 205)
            oprot.writeDouble(self.illegal_defense_width)
            oprot.writeFieldEnd()
        if self.fixed_teamname_l is not None:
            oprot.writeFieldBegin('fixed_teamname_l', TType.STRING, 206)
            oprot.writeString(self.fixed_teamname_l.encode('utf-8') if sys.version_info[0] == 2 else self.fixed_teamname_l)
            oprot.writeFieldEnd()
        if self.fixed_teamname_r is not None:
            oprot.writeFieldBegin('fixed_teamname_r', TType.STRING, 207)
            oprot.writeString(self.fixed_teamname_r.encode('utf-8') if sys.version_info[0] == 2 else self.fixed_teamname_r)
            oprot.writeFieldEnd()
        if self.max_catch_angle is not None:
            oprot.writeFieldBegin('max_catch_angle', TType.DOUBLE, 208)
            oprot.writeDouble(self.max_catch_angle)
            oprot.writeFieldEnd()
        if self.min_catch_angle is not None:
            oprot.writeFieldBegin('min_catch_angle', TType.DOUBLE, 209)
            oprot.writeDouble(self.min_catch_angle)
            oprot.writeFieldEnd()
        if self.random_seed is not None:
            oprot.writeFieldBegin('random_seed', TType.I32, 210)
            oprot.writeI32(self.random_seed)
            oprot.writeFieldEnd()
        if self.long_kick_power_factor is not None:
            oprot.writeFieldBegin('long_kick_power_factor', TType.DOUBLE, 211)
            oprot.writeDouble(self.long_kick_power_factor)
            oprot.writeFieldEnd()
        if self.long_kick_delay is not None:
            oprot.writeFieldBegin('long_kick_delay', TType.I32, 212)
            oprot.writeI32(self.long_kick_delay)
            oprot.writeFieldEnd()
        if self.max_monitors is not None:
            oprot.writeFieldBegin('max_monitors', TType.I32, 213)
            oprot.writeI32(self.max_monitors)
            oprot.writeFieldEnd()
        if self.catchable_area is not None:
            oprot.writeFieldBegin('catchable_area', TType.DOUBLE, 214)
            oprot.writeDouble(self.catchable_area)
            oprot.writeFieldEnd()
        if self.real_speed_max is not None:
            oprot.writeFieldBegin('real_speed_max', TType.DOUBLE, 215)
            oprot.writeDouble(self.real_speed_max)
            oprot.writeFieldEnd()
        if self.pitch_half_length is not None:
            oprot.writeFieldBegin('pitch_half_length', TType.DOUBLE, 216)
            oprot.writeDouble(self.pitch_half_length)
            oprot.writeFieldEnd()
        if self.pitch_half_width is not None:
            oprot.writeFieldBegin('pitch_half_width', TType.DOUBLE, 217)
            oprot.writeDouble(self.pitch_half_width)
            oprot.writeFieldEnd()
        if self.our_penalty_area_line_x is not None:
            oprot.writeFieldBegin('our_penalty_area_line_x', TType.DOUBLE, 218)
            oprot.writeDouble(self.our_penalty_area_line_x)
            oprot.writeFieldEnd()
        if self.their_penalty_area_line_x is not None:
            oprot.writeFieldBegin('their_penalty_area_line_x', TType.DOUBLE, 219)
            oprot.writeDouble(self.their_penalty_area_line_x)
            oprot.writeFieldEnd()
        if self.penalty_area_half_width is not None:
            oprot.writeFieldBegin('penalty_area_half_width', TType.DOUBLE, 220)
            oprot.writeDouble(self.penalty_area_half_width)
            oprot.writeFieldEnd()
        if self.penalty_area_length is not None:
            oprot.writeFieldBegin('penalty_area_length', TType.DOUBLE, 221)
            oprot.writeDouble(self.penalty_area_length)
            oprot.writeFieldEnd()
        if self.goal_width is not None:
            oprot.writeFieldBegin('goal_width', TType.DOUBLE, 222)
            oprot.writeDouble(self.goal_width)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlayerParam(object):
    """
    Attributes:
     - agent_type
     - player_types
     - subs_max
     - pt_max
     - allow_mult_default_type
     - player_speed_max_delta_min
     - player_speed_max_delta_max
     - stamina_inc_max_delta_factor
     - player_decay_delta_min
     - player_decay_delta_max
     - inertia_moment_delta_factor
     - dash_power_rate_delta_min
     - dash_power_rate_delta_max
     - player_size_delta_factor
     - kickable_margin_delta_min
     - kickable_margin_delta_max
     - kick_rand_delta_factor
     - extra_stamina_delta_min
     - extra_stamina_delta_max
     - effort_max_delta_factor
     - effort_min_delta_factor
     - random_seed
     - new_dash_power_rate_delta_min
     - new_dash_power_rate_delta_max
     - new_stamina_inc_max_delta_factor
     - kick_power_rate_delta_min
     - kick_power_rate_delta_max
     - foul_detect_probability_delta_factor
     - catchable_area_l_stretch_min
     - catchable_area_l_stretch_max

    """


    def __init__(self, agent_type=None, player_types=None, subs_max=None, pt_max=None, allow_mult_default_type=None, player_speed_max_delta_min=None, player_speed_max_delta_max=None, stamina_inc_max_delta_factor=None, player_decay_delta_min=None, player_decay_delta_max=None, inertia_moment_delta_factor=None, dash_power_rate_delta_min=None, dash_power_rate_delta_max=None, player_size_delta_factor=None, kickable_margin_delta_min=None, kickable_margin_delta_max=None, kick_rand_delta_factor=None, extra_stamina_delta_min=None, extra_stamina_delta_max=None, effort_max_delta_factor=None, effort_min_delta_factor=None, random_seed=None, new_dash_power_rate_delta_min=None, new_dash_power_rate_delta_max=None, new_stamina_inc_max_delta_factor=None, kick_power_rate_delta_min=None, kick_power_rate_delta_max=None, foul_detect_probability_delta_factor=None, catchable_area_l_stretch_min=None, catchable_area_l_stretch_max=None,):
        self.agent_type = agent_type
        self.player_types = player_types
        self.subs_max = subs_max
        self.pt_max = pt_max
        self.allow_mult_default_type = allow_mult_default_type
        self.player_speed_max_delta_min = player_speed_max_delta_min
        self.player_speed_max_delta_max = player_speed_max_delta_max
        self.stamina_inc_max_delta_factor = stamina_inc_max_delta_factor
        self.player_decay_delta_min = player_decay_delta_min
        self.player_decay_delta_max = player_decay_delta_max
        self.inertia_moment_delta_factor = inertia_moment_delta_factor
        self.dash_power_rate_delta_min = dash_power_rate_delta_min
        self.dash_power_rate_delta_max = dash_power_rate_delta_max
        self.player_size_delta_factor = player_size_delta_factor
        self.kickable_margin_delta_min = kickable_margin_delta_min
        self.kickable_margin_delta_max = kickable_margin_delta_max
        self.kick_rand_delta_factor = kick_rand_delta_factor
        self.extra_stamina_delta_min = extra_stamina_delta_min
        self.extra_stamina_delta_max = extra_stamina_delta_max
        self.effort_max_delta_factor = effort_max_delta_factor
        self.effort_min_delta_factor = effort_min_delta_factor
        self.random_seed = random_seed
        self.new_dash_power_rate_delta_min = new_dash_power_rate_delta_min
        self.new_dash_power_rate_delta_max = new_dash_power_rate_delta_max
        self.new_stamina_inc_max_delta_factor = new_stamina_inc_max_delta_factor
        self.kick_power_rate_delta_min = kick_power_rate_delta_min
        self.kick_power_rate_delta_max = kick_power_rate_delta_max
        self.foul_detect_probability_delta_factor = foul_detect_probability_delta_factor
        self.catchable_area_l_stretch_min = catchable_area_l_stretch_min
        self.catchable_area_l_stretch_max = catchable_area_l_stretch_max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.agent_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.player_types = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.subs_max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pt_max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.allow_mult_default_type = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.player_speed_max_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.player_speed_max_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.stamina_inc_max_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.player_decay_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.player_decay_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.inertia_moment_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.dash_power_rate_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.dash_power_rate_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.player_size_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.kickable_margin_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.kickable_margin_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.kick_rand_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.extra_stamina_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.extra_stamina_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.effort_max_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.effort_min_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.random_seed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.new_dash_power_rate_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.new_dash_power_rate_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.new_stamina_inc_max_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.kick_power_rate_delta_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.kick_power_rate_delta_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.foul_detect_probability_delta_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.catchable_area_l_stretch_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.catchable_area_l_stretch_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PlayerParam')
        if self.agent_type is not None:
            oprot.writeFieldBegin('agent_type', TType.I32, 1)
            oprot.writeI32(self.agent_type)
            oprot.writeFieldEnd()
        if self.player_types is not None:
            oprot.writeFieldBegin('player_types', TType.I32, 2)
            oprot.writeI32(self.player_types)
            oprot.writeFieldEnd()
        if self.subs_max is not None:
            oprot.writeFieldBegin('subs_max', TType.I32, 3)
            oprot.writeI32(self.subs_max)
            oprot.writeFieldEnd()
        if self.pt_max is not None:
            oprot.writeFieldBegin('pt_max', TType.I32, 4)
            oprot.writeI32(self.pt_max)
            oprot.writeFieldEnd()
        if self.allow_mult_default_type is not None:
            oprot.writeFieldBegin('allow_mult_default_type', TType.BOOL, 5)
            oprot.writeBool(self.allow_mult_default_type)
            oprot.writeFieldEnd()
        if self.player_speed_max_delta_min is not None:
            oprot.writeFieldBegin('player_speed_max_delta_min', TType.DOUBLE, 6)
            oprot.writeDouble(self.player_speed_max_delta_min)
            oprot.writeFieldEnd()
        if self.player_speed_max_delta_max is not None:
            oprot.writeFieldBegin('player_speed_max_delta_max', TType.DOUBLE, 7)
            oprot.writeDouble(self.player_speed_max_delta_max)
            oprot.writeFieldEnd()
        if self.stamina_inc_max_delta_factor is not None:
            oprot.writeFieldBegin('stamina_inc_max_delta_factor', TType.DOUBLE, 8)
            oprot.writeDouble(self.stamina_inc_max_delta_factor)
            oprot.writeFieldEnd()
        if self.player_decay_delta_min is not None:
            oprot.writeFieldBegin('player_decay_delta_min', TType.DOUBLE, 9)
            oprot.writeDouble(self.player_decay_delta_min)
            oprot.writeFieldEnd()
        if self.player_decay_delta_max is not None:
            oprot.writeFieldBegin('player_decay_delta_max', TType.DOUBLE, 10)
            oprot.writeDouble(self.player_decay_delta_max)
            oprot.writeFieldEnd()
        if self.inertia_moment_delta_factor is not None:
            oprot.writeFieldBegin('inertia_moment_delta_factor', TType.DOUBLE, 11)
            oprot.writeDouble(self.inertia_moment_delta_factor)
            oprot.writeFieldEnd()
        if self.dash_power_rate_delta_min is not None:
            oprot.writeFieldBegin('dash_power_rate_delta_min', TType.DOUBLE, 12)
            oprot.writeDouble(self.dash_power_rate_delta_min)
            oprot.writeFieldEnd()
        if self.dash_power_rate_delta_max is not None:
            oprot.writeFieldBegin('dash_power_rate_delta_max', TType.DOUBLE, 13)
            oprot.writeDouble(self.dash_power_rate_delta_max)
            oprot.writeFieldEnd()
        if self.player_size_delta_factor is not None:
            oprot.writeFieldBegin('player_size_delta_factor', TType.DOUBLE, 14)
            oprot.writeDouble(self.player_size_delta_factor)
            oprot.writeFieldEnd()
        if self.kickable_margin_delta_min is not None:
            oprot.writeFieldBegin('kickable_margin_delta_min', TType.DOUBLE, 15)
            oprot.writeDouble(self.kickable_margin_delta_min)
            oprot.writeFieldEnd()
        if self.kickable_margin_delta_max is not None:
            oprot.writeFieldBegin('kickable_margin_delta_max', TType.DOUBLE, 16)
            oprot.writeDouble(self.kickable_margin_delta_max)
            oprot.writeFieldEnd()
        if self.kick_rand_delta_factor is not None:
            oprot.writeFieldBegin('kick_rand_delta_factor', TType.DOUBLE, 17)
            oprot.writeDouble(self.kick_rand_delta_factor)
            oprot.writeFieldEnd()
        if self.extra_stamina_delta_min is not None:
            oprot.writeFieldBegin('extra_stamina_delta_min', TType.DOUBLE, 18)
            oprot.writeDouble(self.extra_stamina_delta_min)
            oprot.writeFieldEnd()
        if self.extra_stamina_delta_max is not None:
            oprot.writeFieldBegin('extra_stamina_delta_max', TType.DOUBLE, 19)
            oprot.writeDouble(self.extra_stamina_delta_max)
            oprot.writeFieldEnd()
        if self.effort_max_delta_factor is not None:
            oprot.writeFieldBegin('effort_max_delta_factor', TType.DOUBLE, 20)
            oprot.writeDouble(self.effort_max_delta_factor)
            oprot.writeFieldEnd()
        if self.effort_min_delta_factor is not None:
            oprot.writeFieldBegin('effort_min_delta_factor', TType.DOUBLE, 21)
            oprot.writeDouble(self.effort_min_delta_factor)
            oprot.writeFieldEnd()
        if self.random_seed is not None:
            oprot.writeFieldBegin('random_seed', TType.I32, 22)
            oprot.writeI32(self.random_seed)
            oprot.writeFieldEnd()
        if self.new_dash_power_rate_delta_min is not None:
            oprot.writeFieldBegin('new_dash_power_rate_delta_min', TType.DOUBLE, 23)
            oprot.writeDouble(self.new_dash_power_rate_delta_min)
            oprot.writeFieldEnd()
        if self.new_dash_power_rate_delta_max is not None:
            oprot.writeFieldBegin('new_dash_power_rate_delta_max', TType.DOUBLE, 24)
            oprot.writeDouble(self.new_dash_power_rate_delta_max)
            oprot.writeFieldEnd()
        if self.new_stamina_inc_max_delta_factor is not None:
            oprot.writeFieldBegin('new_stamina_inc_max_delta_factor', TType.DOUBLE, 25)
            oprot.writeDouble(self.new_stamina_inc_max_delta_factor)
            oprot.writeFieldEnd()
        if self.kick_power_rate_delta_min is not None:
            oprot.writeFieldBegin('kick_power_rate_delta_min', TType.DOUBLE, 26)
            oprot.writeDouble(self.kick_power_rate_delta_min)
            oprot.writeFieldEnd()
        if self.kick_power_rate_delta_max is not None:
            oprot.writeFieldBegin('kick_power_rate_delta_max', TType.DOUBLE, 27)
            oprot.writeDouble(self.kick_power_rate_delta_max)
            oprot.writeFieldEnd()
        if self.foul_detect_probability_delta_factor is not None:
            oprot.writeFieldBegin('foul_detect_probability_delta_factor', TType.DOUBLE, 28)
            oprot.writeDouble(self.foul_detect_probability_delta_factor)
            oprot.writeFieldEnd()
        if self.catchable_area_l_stretch_min is not None:
            oprot.writeFieldBegin('catchable_area_l_stretch_min', TType.DOUBLE, 29)
            oprot.writeDouble(self.catchable_area_l_stretch_min)
            oprot.writeFieldEnd()
        if self.catchable_area_l_stretch_max is not None:
            oprot.writeFieldBegin('catchable_area_l_stretch_max', TType.DOUBLE, 30)
            oprot.writeDouble(self.catchable_area_l_stretch_max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlayerType(object):
    """
    Attributes:
     - agent_type
     - id
     - stamina_inc_max
     - player_decay
     - inertia_moment
     - dash_power_rate
     - player_size
     - kickable_margin
     - kick_rand
     - extra_stamina
     - effort_max
     - effort_min
     - kick_power_rate
     - foul_detect_probability
     - catchable_area_l_stretch
     - unum_far_length
     - unum_too_far_length
     - team_far_length
     - team_too_far_length
     - player_max_observation_length
     - ball_vel_far_length
     - ball_vel_too_far_length
     - ball_max_observation_length
     - flag_chg_far_length
     - flag_chg_too_far_length
     - flag_max_observation_length
     - kickable_area
     - reliable_catchable_dist
     - max_catchable_dist
     - real_speed_max
     - player_speed_max2
     - real_speed_max2
     - cycles_to_reach_max_speed
     - player_speed_max

    """


    def __init__(self, agent_type=None, id=None, stamina_inc_max=None, player_decay=None, inertia_moment=None, dash_power_rate=None, player_size=None, kickable_margin=None, kick_rand=None, extra_stamina=None, effort_max=None, effort_min=None, kick_power_rate=None, foul_detect_probability=None, catchable_area_l_stretch=None, unum_far_length=None, unum_too_far_length=None, team_far_length=None, team_too_far_length=None, player_max_observation_length=None, ball_vel_far_length=None, ball_vel_too_far_length=None, ball_max_observation_length=None, flag_chg_far_length=None, flag_chg_too_far_length=None, flag_max_observation_length=None, kickable_area=None, reliable_catchable_dist=None, max_catchable_dist=None, real_speed_max=None, player_speed_max2=None, real_speed_max2=None, cycles_to_reach_max_speed=None, player_speed_max=None,):
        self.agent_type = agent_type
        self.id = id
        self.stamina_inc_max = stamina_inc_max
        self.player_decay = player_decay
        self.inertia_moment = inertia_moment
        self.dash_power_rate = dash_power_rate
        self.player_size = player_size
        self.kickable_margin = kickable_margin
        self.kick_rand = kick_rand
        self.extra_stamina = extra_stamina
        self.effort_max = effort_max
        self.effort_min = effort_min
        self.kick_power_rate = kick_power_rate
        self.foul_detect_probability = foul_detect_probability
        self.catchable_area_l_stretch = catchable_area_l_stretch
        self.unum_far_length = unum_far_length
        self.unum_too_far_length = unum_too_far_length
        self.team_far_length = team_far_length
        self.team_too_far_length = team_too_far_length
        self.player_max_observation_length = player_max_observation_length
        self.ball_vel_far_length = ball_vel_far_length
        self.ball_vel_too_far_length = ball_vel_too_far_length
        self.ball_max_observation_length = ball_max_observation_length
        self.flag_chg_far_length = flag_chg_far_length
        self.flag_chg_too_far_length = flag_chg_too_far_length
        self.flag_max_observation_length = flag_max_observation_length
        self.kickable_area = kickable_area
        self.reliable_catchable_dist = reliable_catchable_dist
        self.max_catchable_dist = max_catchable_dist
        self.real_speed_max = real_speed_max
        self.player_speed_max2 = player_speed_max2
        self.real_speed_max2 = real_speed_max2
        self.cycles_to_reach_max_speed = cycles_to_reach_max_speed
        self.player_speed_max = player_speed_max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.agent_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.stamina_inc_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.player_decay = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.inertia_moment = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.dash_power_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.player_size = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.kickable_margin = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.kick_rand = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.extra_stamina = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.effort_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.effort_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.kick_power_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.foul_detect_probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.catchable_area_l_stretch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.unum_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.unum_too_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.team_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.team_too_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.player_max_observation_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.ball_vel_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.DOUBLE:
                    self.ball_vel_too_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.ball_max_observation_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.flag_chg_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.flag_chg_too_far_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.flag_max_observation_length = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.kickable_area = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.reliable_catchable_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.max_catchable_dist = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.real_speed_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.DOUBLE:
                    self.player_speed_max2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.DOUBLE:
                    self.real_speed_max2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.cycles_to_reach_max_speed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.DOUBLE:
                    self.player_speed_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PlayerType')
        if self.agent_type is not None:
            oprot.writeFieldBegin('agent_type', TType.I32, 1)
            oprot.writeI32(self.agent_type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.stamina_inc_max is not None:
            oprot.writeFieldBegin('stamina_inc_max', TType.DOUBLE, 3)
            oprot.writeDouble(self.stamina_inc_max)
            oprot.writeFieldEnd()
        if self.player_decay is not None:
            oprot.writeFieldBegin('player_decay', TType.DOUBLE, 4)
            oprot.writeDouble(self.player_decay)
            oprot.writeFieldEnd()
        if self.inertia_moment is not None:
            oprot.writeFieldBegin('inertia_moment', TType.DOUBLE, 5)
            oprot.writeDouble(self.inertia_moment)
            oprot.writeFieldEnd()
        if self.dash_power_rate is not None:
            oprot.writeFieldBegin('dash_power_rate', TType.DOUBLE, 6)
            oprot.writeDouble(self.dash_power_rate)
            oprot.writeFieldEnd()
        if self.player_size is not None:
            oprot.writeFieldBegin('player_size', TType.DOUBLE, 7)
            oprot.writeDouble(self.player_size)
            oprot.writeFieldEnd()
        if self.kickable_margin is not None:
            oprot.writeFieldBegin('kickable_margin', TType.DOUBLE, 8)
            oprot.writeDouble(self.kickable_margin)
            oprot.writeFieldEnd()
        if self.kick_rand is not None:
            oprot.writeFieldBegin('kick_rand', TType.DOUBLE, 9)
            oprot.writeDouble(self.kick_rand)
            oprot.writeFieldEnd()
        if self.extra_stamina is not None:
            oprot.writeFieldBegin('extra_stamina', TType.DOUBLE, 10)
            oprot.writeDouble(self.extra_stamina)
            oprot.writeFieldEnd()
        if self.effort_max is not None:
            oprot.writeFieldBegin('effort_max', TType.DOUBLE, 11)
            oprot.writeDouble(self.effort_max)
            oprot.writeFieldEnd()
        if self.effort_min is not None:
            oprot.writeFieldBegin('effort_min', TType.DOUBLE, 12)
            oprot.writeDouble(self.effort_min)
            oprot.writeFieldEnd()
        if self.kick_power_rate is not None:
            oprot.writeFieldBegin('kick_power_rate', TType.DOUBLE, 13)
            oprot.writeDouble(self.kick_power_rate)
            oprot.writeFieldEnd()
        if self.foul_detect_probability is not None:
            oprot.writeFieldBegin('foul_detect_probability', TType.DOUBLE, 14)
            oprot.writeDouble(self.foul_detect_probability)
            oprot.writeFieldEnd()
        if self.catchable_area_l_stretch is not None:
            oprot.writeFieldBegin('catchable_area_l_stretch', TType.DOUBLE, 15)
            oprot.writeDouble(self.catchable_area_l_stretch)
            oprot.writeFieldEnd()
        if self.unum_far_length is not None:
            oprot.writeFieldBegin('unum_far_length', TType.DOUBLE, 16)
            oprot.writeDouble(self.unum_far_length)
            oprot.writeFieldEnd()
        if self.unum_too_far_length is not None:
            oprot.writeFieldBegin('unum_too_far_length', TType.DOUBLE, 17)
            oprot.writeDouble(self.unum_too_far_length)
            oprot.writeFieldEnd()
        if self.team_far_length is not None:
            oprot.writeFieldBegin('team_far_length', TType.DOUBLE, 18)
            oprot.writeDouble(self.team_far_length)
            oprot.writeFieldEnd()
        if self.team_too_far_length is not None:
            oprot.writeFieldBegin('team_too_far_length', TType.DOUBLE, 19)
            oprot.writeDouble(self.team_too_far_length)
            oprot.writeFieldEnd()
        if self.player_max_observation_length is not None:
            oprot.writeFieldBegin('player_max_observation_length', TType.DOUBLE, 20)
            oprot.writeDouble(self.player_max_observation_length)
            oprot.writeFieldEnd()
        if self.ball_vel_far_length is not None:
            oprot.writeFieldBegin('ball_vel_far_length', TType.DOUBLE, 21)
            oprot.writeDouble(self.ball_vel_far_length)
            oprot.writeFieldEnd()
        if self.ball_vel_too_far_length is not None:
            oprot.writeFieldBegin('ball_vel_too_far_length', TType.DOUBLE, 22)
            oprot.writeDouble(self.ball_vel_too_far_length)
            oprot.writeFieldEnd()
        if self.ball_max_observation_length is not None:
            oprot.writeFieldBegin('ball_max_observation_length', TType.DOUBLE, 23)
            oprot.writeDouble(self.ball_max_observation_length)
            oprot.writeFieldEnd()
        if self.flag_chg_far_length is not None:
            oprot.writeFieldBegin('flag_chg_far_length', TType.DOUBLE, 24)
            oprot.writeDouble(self.flag_chg_far_length)
            oprot.writeFieldEnd()
        if self.flag_chg_too_far_length is not None:
            oprot.writeFieldBegin('flag_chg_too_far_length', TType.DOUBLE, 25)
            oprot.writeDouble(self.flag_chg_too_far_length)
            oprot.writeFieldEnd()
        if self.flag_max_observation_length is not None:
            oprot.writeFieldBegin('flag_max_observation_length', TType.DOUBLE, 26)
            oprot.writeDouble(self.flag_max_observation_length)
            oprot.writeFieldEnd()
        if self.kickable_area is not None:
            oprot.writeFieldBegin('kickable_area', TType.DOUBLE, 27)
            oprot.writeDouble(self.kickable_area)
            oprot.writeFieldEnd()
        if self.reliable_catchable_dist is not None:
            oprot.writeFieldBegin('reliable_catchable_dist', TType.DOUBLE, 28)
            oprot.writeDouble(self.reliable_catchable_dist)
            oprot.writeFieldEnd()
        if self.max_catchable_dist is not None:
            oprot.writeFieldBegin('max_catchable_dist', TType.DOUBLE, 29)
            oprot.writeDouble(self.max_catchable_dist)
            oprot.writeFieldEnd()
        if self.real_speed_max is not None:
            oprot.writeFieldBegin('real_speed_max', TType.DOUBLE, 30)
            oprot.writeDouble(self.real_speed_max)
            oprot.writeFieldEnd()
        if self.player_speed_max2 is not None:
            oprot.writeFieldBegin('player_speed_max2', TType.DOUBLE, 31)
            oprot.writeDouble(self.player_speed_max2)
            oprot.writeFieldEnd()
        if self.real_speed_max2 is not None:
            oprot.writeFieldBegin('real_speed_max2', TType.DOUBLE, 32)
            oprot.writeDouble(self.real_speed_max2)
            oprot.writeFieldEnd()
        if self.cycles_to_reach_max_speed is not None:
            oprot.writeFieldBegin('cycles_to_reach_max_speed', TType.I32, 33)
            oprot.writeI32(self.cycles_to_reach_max_speed)
            oprot.writeFieldEnd()
        if self.player_speed_max is not None:
            oprot.writeFieldBegin('player_speed_max', TType.DOUBLE, 34)
            oprot.writeDouble(self.player_speed_max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Empty(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Empty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitMessageFromServer(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitMessageFromServer')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ThriftVector2D)
ThriftVector2D.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
    (3, TType.DOUBLE, 'dist', None, None, ),  # 3
    (4, TType.DOUBLE, 'angle', None, None, ),  # 4
)
all_structs.append(Ball)
Ball.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'relative_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'seen_position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRUCT, 'heard_position', [ThriftVector2D, None], None, ),  # 4
    (5, TType.STRUCT, 'velocity', [ThriftVector2D, None], None, ),  # 5
    (6, TType.STRUCT, 'seen_velocity', [ThriftVector2D, None], None, ),  # 6
    (7, TType.STRUCT, 'heard_velocity', [ThriftVector2D, None], None, ),  # 7
    (8, TType.I32, 'pos_count', None, None, ),  # 8
    (9, TType.I32, 'seen_pos_count', None, None, ),  # 9
    (10, TType.I32, 'heard_pos_count', None, None, ),  # 10
    (11, TType.I32, 'vel_count', None, None, ),  # 11
    (12, TType.I32, 'seen_vel_count', None, None, ),  # 12
    (13, TType.I32, 'heard_vel_count', None, None, ),  # 13
    (14, TType.I32, 'lost_count', None, None, ),  # 14
    (15, TType.I32, 'ghost_count', None, None, ),  # 15
    (16, TType.DOUBLE, 'dist_from_self', None, None, ),  # 16
    (17, TType.DOUBLE, 'angle_from_self', None, None, ),  # 17
)
all_structs.append(Player)
Player.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'seen_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'heard_position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRUCT, 'velocity', [ThriftVector2D, None], None, ),  # 4
    (5, TType.STRUCT, 'seen_velocity', [ThriftVector2D, None], None, ),  # 5
    (6, TType.I32, 'pos_count', None, None, ),  # 6
    (7, TType.I32, 'seen_pos_count', None, None, ),  # 7
    (8, TType.I32, 'heard_pos_count', None, None, ),  # 8
    (9, TType.I32, 'vel_count', None, None, ),  # 9
    (10, TType.I32, 'seen_vel_count', None, None, ),  # 10
    (11, TType.I32, 'ghost_count', None, None, ),  # 11
    (12, TType.DOUBLE, 'dist_from_self', None, None, ),  # 12
    (13, TType.DOUBLE, 'angle_from_self', None, None, ),  # 13
    (14, TType.I32, 'id', None, None, ),  # 14
    (15, TType.I32, 'side', None, None, ),  # 15
    (16, TType.I32, 'uniform_number', None, None, ),  # 16
    (17, TType.I32, 'uniform_number_count', None, None, ),  # 17
    (18, TType.BOOL, 'is_goalie', None, None, ),  # 18
    (19, TType.DOUBLE, 'body_direction', None, None, ),  # 19
    (20, TType.I32, 'body_direction_count', None, None, ),  # 20
    (21, TType.DOUBLE, 'face_direction', None, None, ),  # 21
    (22, TType.I32, 'face_direction_count', None, None, ),  # 22
    (23, TType.DOUBLE, 'point_to_direction', None, None, ),  # 23
    (24, TType.I32, 'point_to_direction_count', None, None, ),  # 24
    (25, TType.BOOL, 'is_kicking', None, None, ),  # 25
    (26, TType.DOUBLE, 'dist_from_ball', None, None, ),  # 26
    (27, TType.DOUBLE, 'angle_from_ball', None, None, ),  # 27
    (28, TType.I32, 'ball_reach_steps', None, None, ),  # 28
    (29, TType.BOOL, 'is_tackling', None, None, ),  # 29
    (30, TType.I32, 'type_id', None, None, ),  # 30
)
all_structs.append(Self)
Self.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'seen_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'heard_position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRUCT, 'velocity', [ThriftVector2D, None], None, ),  # 4
    (5, TType.STRUCT, 'seen_velocity', [ThriftVector2D, None], None, ),  # 5
    (6, TType.I32, 'pos_count', None, None, ),  # 6
    (7, TType.I32, 'seen_pos_count', None, None, ),  # 7
    (8, TType.I32, 'heard_pos_count', None, None, ),  # 8
    (9, TType.I32, 'vel_count', None, None, ),  # 9
    (10, TType.I32, 'seen_vel_count', None, None, ),  # 10
    (11, TType.I32, 'ghost_count', None, None, ),  # 11
    (12, TType.I32, 'id', None, None, ),  # 12
    (13, TType.I32, 'side', None, None, ),  # 13
    (14, TType.I32, 'uniform_number', None, None, ),  # 14
    (15, TType.I32, 'uniform_number_count', None, None, ),  # 15
    (16, TType.BOOL, 'is_goalie', None, None, ),  # 16
    (17, TType.DOUBLE, 'body_direction', None, None, ),  # 17
    (18, TType.I32, 'body_direction_count', None, None, ),  # 18
    (19, TType.DOUBLE, 'face_direction', None, None, ),  # 19
    (20, TType.I32, 'face_direction_count', None, None, ),  # 20
    (21, TType.DOUBLE, 'point_to_direction', None, None, ),  # 21
    (22, TType.I32, 'point_to_direction_count', None, None, ),  # 22
    (23, TType.BOOL, 'is_kicking', None, None, ),  # 23
    (24, TType.DOUBLE, 'dist_from_ball', None, None, ),  # 24
    (25, TType.DOUBLE, 'angle_from_ball', None, None, ),  # 25
    (26, TType.I32, 'ball_reach_steps', None, None, ),  # 26
    (27, TType.BOOL, 'is_tackling', None, None, ),  # 27
    (28, TType.DOUBLE, 'relative_neck_direction', None, None, ),  # 28
    (29, TType.DOUBLE, 'stamina', None, None, ),  # 29
    (30, TType.BOOL, 'is_kickable', None, None, ),  # 30
    (31, TType.DOUBLE, 'catch_probability', None, None, ),  # 31
    (32, TType.DOUBLE, 'tackle_probability', None, None, ),  # 32
    (33, TType.DOUBLE, 'foul_probability', None, None, ),  # 33
    (34, TType.I32, 'view_width', None, None, ),  # 34
    (35, TType.I32, 'type_id', None, None, ),  # 35
    (36, TType.DOUBLE, 'kick_rate', None, None, ),  # 36
)
all_structs.append(InterceptInfo)
InterceptInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'action_type', None, None, ),  # 1
    (2, TType.I32, 'turn_steps', None, None, ),  # 2
    (3, TType.DOUBLE, 'turn_angle', None, None, ),  # 3
    (4, TType.I32, 'dash_steps', None, None, ),  # 4
    (5, TType.DOUBLE, 'dash_power', None, None, ),  # 5
    (6, TType.DOUBLE, 'dash_dir', None, None, ),  # 6
    (7, TType.STRUCT, 'final_self_position', [ThriftVector2D, None], None, ),  # 7
    (8, TType.DOUBLE, 'final_ball_dist', None, None, ),  # 8
    (9, TType.DOUBLE, 'final_stamina', None, None, ),  # 9
    (10, TType.DOUBLE, 'value', None, None, ),  # 10
)
all_structs.append(InterceptTable)
InterceptTable.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'self_reach_steps', None, None, ),  # 1
    (2, TType.I32, 'first_teammate_reach_steps', None, None, ),  # 2
    (3, TType.I32, 'second_teammate_reach_steps', None, None, ),  # 3
    (4, TType.I32, 'first_opponent_reach_steps', None, None, ),  # 4
    (5, TType.I32, 'second_opponent_reach_steps', None, None, ),  # 5
    (6, TType.I32, 'first_teammate_id', None, None, ),  # 6
    (7, TType.I32, 'second_teammate_id', None, None, ),  # 7
    (8, TType.I32, 'first_opponent_id', None, None, ),  # 8
    (9, TType.I32, 'second_opponent_id', None, None, ),  # 9
    (10, TType.LIST, 'self_intercept_info', (TType.STRUCT, [InterceptInfo, None], False), None, ),  # 10
)
all_structs.append(WorldModel)
WorldModel.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'intercept_table', [InterceptTable, None], None, ),  # 1
    (2, TType.STRING, 'our_team_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'their_team_name', 'UTF8', None, ),  # 3
    (4, TType.I32, 'our_side', None, None, ),  # 4
    (5, TType.I32, 'last_set_play_start_time', None, None, ),  # 5
    (6, TType.STRUCT, 'myself', [Self, None], None, ),  # 6
    (7, TType.STRUCT, 'ball', [Ball, None], None, ),  # 7
    (8, TType.LIST, 'teammates', (TType.STRUCT, [Player, None], False), None, ),  # 8
    (9, TType.LIST, 'opponents', (TType.STRUCT, [Player, None], False), None, ),  # 9
    (10, TType.LIST, 'unknowns', (TType.STRUCT, [Player, None], False), None, ),  # 10
    (11, TType.MAP, 'our_players_dict', (TType.I32, None, TType.STRUCT, [Player, None], False), None, ),  # 11
    (12, TType.MAP, 'their_players_dict', (TType.I32, None, TType.STRUCT, [Player, None], False), None, ),  # 12
    (13, TType.I32, 'our_goalie_uniform_number', None, None, ),  # 13
    (14, TType.I32, 'their_goalie_uniform_number', None, None, ),  # 14
    (15, TType.DOUBLE, 'offside_line_x', None, None, ),  # 15
    (16, TType.I32, 'offside_line_x_count', None, None, ),  # 16
    (17, TType.I32, 'kickable_teammate_id', None, None, ),  # 17
    (18, TType.I32, 'kickable_opponent_id', None, None, ),  # 18
    (19, TType.I32, 'last_kick_side', None, None, ),  # 19
    (20, TType.I32, 'last_kicker_uniform_number', None, None, ),  # 20
    (21, TType.I32, 'cycle', None, None, ),  # 21
    (22, TType.I32, 'game_mode_type', None, None, ),  # 22
    (23, TType.I32, 'left_team_score', None, None, ),  # 23
    (24, TType.I32, 'right_team_score', None, None, ),  # 24
    (25, TType.BOOL, 'is_our_set_play', None, None, ),  # 25
    (26, TType.BOOL, 'is_their_set_play', None, None, ),  # 26
    (27, TType.I32, 'stoped_cycle', None, None, ),  # 27
    (28, TType.I32, 'our_team_score', None, None, ),  # 28
    (29, TType.I32, 'their_team_score', None, None, ),  # 29
    (30, TType.BOOL, 'is_penalty_kick_mode', None, None, ),  # 30
    (31, TType.MAP, 'helios_home_positions', (TType.I32, None, TType.STRUCT, [ThriftVector2D, None], False), None, ),  # 31
)
all_structs.append(State)
State.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'agent_type', None, None, ),  # 1
    (2, TType.STRUCT, 'world_model', [WorldModel, None], None, ),  # 2
    (3, TType.STRUCT, 'full_world_model', [WorldModel, None], None, ),  # 3
)
all_structs.append(InitMessage)
InitMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'agent_type', None, None, ),  # 1
    (2, TType.BOOL, 'debug_mode', None, None, ),  # 2
)
all_structs.append(Dash)
Dash.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'power', None, None, ),  # 1
    (2, TType.DOUBLE, 'relative_direction', None, None, ),  # 2
)
all_structs.append(Turn)
Turn.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'relative_direction', None, None, ),  # 1
)
all_structs.append(Kick)
Kick.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'power', None, None, ),  # 1
    (2, TType.DOUBLE, 'relative_direction', None, None, ),  # 2
)
all_structs.append(Tackle)
Tackle.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'power_or_dir', None, None, ),  # 1
    (2, TType.BOOL, 'foul', None, None, ),  # 2
)
all_structs.append(Catch)
Catch.thrift_spec = (
)
all_structs.append(Move)
Move.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
)
all_structs.append(TurnNeck)
TurnNeck.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'moment', None, None, ),  # 1
)
all_structs.append(ChangeView)
ChangeView.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'view_width', None, None, ),  # 1
)
all_structs.append(BallMessage)
BallMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ball_position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'ball_velocity', [ThriftVector2D, None], None, ),  # 2
)
all_structs.append(PassMessage)
PassMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'receiver_uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'receiver_point', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'ball_position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRUCT, 'ball_velocity', [ThriftVector2D, None], None, ),  # 4
)
all_structs.append(InterceptMessage)
InterceptMessage.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'our', None, None, ),  # 1
    (2, TType.I32, 'uniform_number', None, None, ),  # 2
    (3, TType.I32, 'cycle', None, None, ),  # 3
)
all_structs.append(GoalieMessage)
GoalieMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'goalie_uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'goalie_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'goalie_body_direction', None, None, ),  # 3
)
all_structs.append(GoalieAndPlayerMessage)
GoalieAndPlayerMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'goalie_uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'goalie_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'goalie_body_direction', None, None, ),  # 3
    (4, TType.I32, 'player_uniform_number', None, None, ),  # 4
    (5, TType.STRUCT, 'player_position', [ThriftVector2D, None], None, ),  # 5
)
all_structs.append(OffsideLineMessage)
OffsideLineMessage.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'offside_line_x', None, None, ),  # 1
)
all_structs.append(DefenseLineMessage)
DefenseLineMessage.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'defense_line_x', None, None, ),  # 1
)
all_structs.append(WaitRequestMessage)
WaitRequestMessage.thrift_spec = (
)
all_structs.append(SetplayMessage)
SetplayMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'wait_step', None, None, ),  # 1
)
all_structs.append(PassRequestMessage)
PassRequestMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
)
all_structs.append(StaminaMessage)
StaminaMessage.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'stamina', None, None, ),  # 1
)
all_structs.append(RecoveryMessage)
RecoveryMessage.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'recovery', None, None, ),  # 1
)
all_structs.append(StaminaCapacityMessage)
StaminaCapacityMessage.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'stamina_capacity', None, None, ),  # 1
)
all_structs.append(DribbleMessage)
DribbleMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.I32, 'queue_count', None, None, ),  # 2
)
all_structs.append(BallGoalieMessage)
BallGoalieMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ball_position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'ball_velocity', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'goalie_position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.DOUBLE, 'goalie_body_direction', None, None, ),  # 4
)
all_structs.append(OnePlayerMessage)
OnePlayerMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 2
)
all_structs.append(TwoPlayerMessage)
TwoPlayerMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'first_uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'first_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.I32, 'second_uniform_number', None, None, ),  # 3
    (4, TType.STRUCT, 'second_position', [ThriftVector2D, None], None, ),  # 4
)
all_structs.append(ThreePlayerMessage)
ThreePlayerMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'first_uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'first_position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.I32, 'second_uniform_number', None, None, ),  # 3
    (4, TType.STRUCT, 'second_position', [ThriftVector2D, None], None, ),  # 4
    (5, TType.I32, 'third_uniform_number', None, None, ),  # 5
    (6, TType.STRUCT, 'third_position', [ThriftVector2D, None], None, ),  # 6
)
all_structs.append(SelfMessage)
SelfMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'self_position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'self_body_direction', None, None, ),  # 2
    (3, TType.DOUBLE, 'self_stamina', None, None, ),  # 3
)
all_structs.append(TeammateMessage)
TeammateMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'body_direction', None, None, ),  # 3
)
all_structs.append(OpponentMessage)
OpponentMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uniform_number', None, None, ),  # 1
    (2, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'body_direction', None, None, ),  # 3
)
all_structs.append(BallPlayerMessage)
BallPlayerMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ball_position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'ball_velocity', [ThriftVector2D, None], None, ),  # 2
    (3, TType.I32, 'uniform_number', None, None, ),  # 3
    (4, TType.STRUCT, 'player_position', [ThriftVector2D, None], None, ),  # 4
    (5, TType.DOUBLE, 'body_direction', None, None, ),  # 5
)
all_structs.append(Say)
Say.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ball_message', [BallMessage, None], None, ),  # 1
    (2, TType.STRUCT, 'pass_message', [PassMessage, None], None, ),  # 2
    (3, TType.STRUCT, 'intercept_message', [InterceptMessage, None], None, ),  # 3
    (4, TType.STRUCT, 'goalie_message', [GoalieMessage, None], None, ),  # 4
    (5, TType.STRUCT, 'goalie_and_player_message', [GoalieAndPlayerMessage, None], None, ),  # 5
    (6, TType.STRUCT, 'offside_line_message', [OffsideLineMessage, None], None, ),  # 6
    (7, TType.STRUCT, 'defense_line_message', [DefenseLineMessage, None], None, ),  # 7
    (8, TType.STRUCT, 'wait_request_message', [WaitRequestMessage, None], None, ),  # 8
    (9, TType.STRUCT, 'setplay_message', [SetplayMessage, None], None, ),  # 9
    (10, TType.STRUCT, 'pass_request_message', [PassRequestMessage, None], None, ),  # 10
    (11, TType.STRUCT, 'stamina_message', [StaminaMessage, None], None, ),  # 11
    (12, TType.STRUCT, 'recovery_message', [RecoveryMessage, None], None, ),  # 12
    (13, TType.STRUCT, 'stamina_capacity_message', [StaminaCapacityMessage, None], None, ),  # 13
    (14, TType.STRUCT, 'dribble_message', [DribbleMessage, None], None, ),  # 14
    (15, TType.STRUCT, 'ball_goalie_message', [BallGoalieMessage, None], None, ),  # 15
    (16, TType.STRUCT, 'one_player_message', [OnePlayerMessage, None], None, ),  # 16
    (17, TType.STRUCT, 'two_player_message', [TwoPlayerMessage, None], None, ),  # 17
    (18, TType.STRUCT, 'three_player_message', [ThreePlayerMessage, None], None, ),  # 18
    (19, TType.STRUCT, 'self_message', [SelfMessage, None], None, ),  # 19
    (20, TType.STRUCT, 'teammate_message', [TeammateMessage, None], None, ),  # 20
    (21, TType.STRUCT, 'opponent_message', [OpponentMessage, None], None, ),  # 21
    (22, TType.STRUCT, 'ball_player_message', [BallPlayerMessage, None], None, ),  # 22
)
all_structs.append(PointTo)
PointTo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
)
all_structs.append(PointToOf)
PointToOf.thrift_spec = (
)
all_structs.append(AttentionTo)
AttentionTo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'side', None, None, ),  # 1
    (2, TType.I32, 'unum', None, None, ),  # 2
)
all_structs.append(AttentionToOf)
AttentionToOf.thrift_spec = (
)
all_structs.append(AddText)
AddText.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(AddPoint)
AddPoint.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'point', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRING, 'color', 'UTF8', None, ),  # 3
)
all_structs.append(AddLine)
AddLine.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'start_point', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'end_point', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
)
all_structs.append(AddArc)
AddArc.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'center', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'radius', None, None, ),  # 3
    (4, TType.DOUBLE, 'start_angle', None, None, ),  # 4
    (5, TType.DOUBLE, 'span_angel', None, None, ),  # 5
    (6, TType.STRING, 'color', 'UTF8', None, ),  # 6
)
all_structs.append(AddCircle)
AddCircle.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'center', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'radius', None, None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'fill', None, None, ),  # 5
)
all_structs.append(AddTriangle)
AddTriangle.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'point1', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'point2', [ThriftVector2D, None], None, ),  # 3
    (4, TType.STRUCT, 'point3', [ThriftVector2D, None], None, ),  # 4
    (5, TType.STRING, 'color', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'fill', None, None, ),  # 6
)
all_structs.append(AddRectangle)
AddRectangle.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.DOUBLE, 'left', None, None, ),  # 2
    (3, TType.DOUBLE, 'top', None, None, ),  # 3
    (4, TType.DOUBLE, 'length', None, None, ),  # 4
    (5, TType.DOUBLE, 'width', None, None, ),  # 5
    (6, TType.STRING, 'color', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'fill', None, None, ),  # 7
)
all_structs.append(AddSector)
AddSector.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'center', [ThriftVector2D, None], None, ),  # 2
    (3, TType.DOUBLE, 'min_radius', None, None, ),  # 3
    (4, TType.DOUBLE, 'max_radius', None, None, ),  # 4
    (5, TType.DOUBLE, 'start_angle', None, None, ),  # 5
    (6, TType.DOUBLE, 'span_angel', None, None, ),  # 6
    (7, TType.STRING, 'color', 'UTF8', None, ),  # 7
    (8, TType.BOOL, 'fill', None, None, ),  # 8
)
all_structs.append(AddMessage)
AddMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
)
all_structs.append(Log)
Log.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'add_text', [AddText, None], None, ),  # 1
    (2, TType.STRUCT, 'add_point', [AddPoint, None], None, ),  # 2
    (3, TType.STRUCT, 'add_line', [AddLine, None], None, ),  # 3
    (4, TType.STRUCT, 'add_arc', [AddArc, None], None, ),  # 4
    (5, TType.STRUCT, 'add_circle', [AddCircle, None], None, ),  # 5
    (6, TType.STRUCT, 'add_triangle', [AddTriangle, None], None, ),  # 6
    (7, TType.STRUCT, 'add_rectangle', [AddRectangle, None], None, ),  # 7
    (8, TType.STRUCT, 'add_sector', [AddSector, None], None, ),  # 8
    (9, TType.STRUCT, 'add_message', [AddMessage, None], None, ),  # 9
)
all_structs.append(DebugClient)
DebugClient.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(Body_GoToPoint)
Body_GoToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'distance_threshold', None, None, ),  # 2
    (3, TType.DOUBLE, 'max_dash_power', None, None, ),  # 3
)
all_structs.append(Body_SmartKick)
Body_SmartKick.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'first_speed', None, None, ),  # 2
    (3, TType.DOUBLE, 'first_speed_threshold', None, None, ),  # 3
    (4, TType.I32, 'max_steps', None, None, ),  # 4
)
all_structs.append(Bhv_BeforeKickOff)
Bhv_BeforeKickOff.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'point', [ThriftVector2D, None], None, ),  # 1
)
all_structs.append(Bhv_BodyNeckToBall)
Bhv_BodyNeckToBall.thrift_spec = (
)
all_structs.append(Bhv_BodyNeckToPoint)
Bhv_BodyNeckToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'point', [ThriftVector2D, None], None, ),  # 1
)
all_structs.append(Bhv_Emergency)
Bhv_Emergency.thrift_spec = (
)
all_structs.append(Bhv_GoToPointLookBall)
Bhv_GoToPointLookBall.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'distance_threshold', None, None, ),  # 2
    (3, TType.DOUBLE, 'max_dash_power', None, None, ),  # 3
)
all_structs.append(Bhv_NeckBodyToBall)
Bhv_NeckBodyToBall.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'angle_buf', None, None, ),  # 1
)
all_structs.append(Bhv_NeckBodyToPoint)
Bhv_NeckBodyToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'angle_buf', None, None, ),  # 2
)
all_structs.append(Bhv_ScanField)
Bhv_ScanField.thrift_spec = (
)
all_structs.append(Body_AdvanceBall)
Body_AdvanceBall.thrift_spec = (
)
all_structs.append(Body_ClearBall)
Body_ClearBall.thrift_spec = (
)
all_structs.append(Body_Dribble)
Body_Dribble.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'distance_threshold', None, None, ),  # 2
    (3, TType.DOUBLE, 'dash_power', None, None, ),  # 3
    (4, TType.I32, 'dash_count', None, None, ),  # 4
    (5, TType.BOOL, 'dodge', None, None, ),  # 5
)
all_structs.append(Body_GoToPointDodge)
Body_GoToPointDodge.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'dash_power', None, None, ),  # 2
)
all_structs.append(Body_HoldBall)
Body_HoldBall.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'do_turn', None, None, ),  # 1
    (2, TType.STRUCT, 'turn_target_point', [ThriftVector2D, None], None, ),  # 2
    (3, TType.STRUCT, 'kick_target_point', [ThriftVector2D, None], None, ),  # 3
)
all_structs.append(Body_Intercept)
Body_Intercept.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'save_recovery', None, None, ),  # 1
    (2, TType.STRUCT, 'face_point', [ThriftVector2D, None], None, ),  # 2
)
all_structs.append(Body_KickOneStep)
Body_KickOneStep.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'first_speed', None, None, ),  # 2
    (3, TType.BOOL, 'force_mode', None, None, ),  # 3
)
all_structs.append(Body_StopBall)
Body_StopBall.thrift_spec = (
)
all_structs.append(Body_StopDash)
Body_StopDash.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'save_recovery', None, None, ),  # 1
)
all_structs.append(Body_TackleToPoint)
Body_TackleToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.DOUBLE, 'min_probability', None, None, ),  # 2
    (3, TType.DOUBLE, 'min_speed', None, None, ),  # 3
)
all_structs.append(Body_TurnToAngle)
Body_TurnToAngle.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'angle', None, None, ),  # 1
)
all_structs.append(Body_TurnToBall)
Body_TurnToBall.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'cycle', None, None, ),  # 1
)
all_structs.append(Body_TurnToPoint)
Body_TurnToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
    (2, TType.I32, 'cycle', None, None, ),  # 2
)
all_structs.append(Focus_MoveToPoint)
Focus_MoveToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
)
all_structs.append(Focus_Reset)
Focus_Reset.thrift_spec = (
)
all_structs.append(Neck_ScanField)
Neck_ScanField.thrift_spec = (
)
all_structs.append(Neck_ScanPlayers)
Neck_ScanPlayers.thrift_spec = (
)
all_structs.append(Neck_TurnToBallAndPlayer)
Neck_TurnToBallAndPlayer.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'side', None, None, ),  # 1
    (2, TType.I32, 'uniform_number', None, None, ),  # 2
    (3, TType.I32, 'count_threshold', None, None, ),  # 3
)
all_structs.append(Neck_TurnToBallOrScan)
Neck_TurnToBallOrScan.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count_threshold', None, None, ),  # 1
)
all_structs.append(Neck_TurnToBall)
Neck_TurnToBall.thrift_spec = (
)
all_structs.append(Neck_TurnToGoalieOrScan)
Neck_TurnToGoalieOrScan.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count_threshold', None, None, ),  # 1
)
all_structs.append(Neck_TurnToLowConfTeammate)
Neck_TurnToLowConfTeammate.thrift_spec = (
)
all_structs.append(Neck_TurnToPlayerOrScan)
Neck_TurnToPlayerOrScan.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'side', None, None, ),  # 1
    (2, TType.I32, 'uniform_number', None, None, ),  # 2
    (3, TType.I32, 'count_threshold', None, None, ),  # 3
)
all_structs.append(Neck_TurnToPoint)
Neck_TurnToPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'target_point', [ThriftVector2D, None], None, ),  # 1
)
all_structs.append(Neck_TurnToRelative)
Neck_TurnToRelative.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'angle', None, None, ),  # 1
)
all_structs.append(View_ChangeWidth)
View_ChangeWidth.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'view_width', None, None, ),  # 1
)
all_structs.append(View_Normal)
View_Normal.thrift_spec = (
)
all_structs.append(View_Synch)
View_Synch.thrift_spec = (
)
all_structs.append(View_Wide)
View_Wide.thrift_spec = (
)
all_structs.append(HeliosGoalie)
HeliosGoalie.thrift_spec = (
)
all_structs.append(HeliosGoalieMove)
HeliosGoalieMove.thrift_spec = (
)
all_structs.append(HeliosGoalieKick)
HeliosGoalieKick.thrift_spec = (
)
all_structs.append(HeliosShoot)
HeliosShoot.thrift_spec = (
)
all_structs.append(HeliosChainAction)
HeliosChainAction.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'direct_pass', None, None, ),  # 1
    (2, TType.BOOL, 'lead_pass', None, None, ),  # 2
    (3, TType.BOOL, 'through_pass', None, None, ),  # 3
    (4, TType.BOOL, 'short_dribble', None, None, ),  # 4
    (5, TType.BOOL, 'long_dribble', None, None, ),  # 5
    (6, TType.BOOL, 'cross', None, None, ),  # 6
    (7, TType.BOOL, 'simple_pass', None, None, ),  # 7
    (8, TType.BOOL, 'simple_dribble', None, None, ),  # 8
    (9, TType.BOOL, 'simple_shoot', None, None, ),  # 9
)
all_structs.append(HeliosBasicOffensive)
HeliosBasicOffensive.thrift_spec = (
)
all_structs.append(HeliosBasicMove)
HeliosBasicMove.thrift_spec = (
)
all_structs.append(HeliosSetPlay)
HeliosSetPlay.thrift_spec = (
)
all_structs.append(HeliosPenalty)
HeliosPenalty.thrift_spec = (
)
all_structs.append(HeliosCommunicaion)
HeliosCommunicaion.thrift_spec = (
)
all_structs.append(PlayerAction)
PlayerAction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dash', [Dash, None], None, ),  # 1
    (2, TType.STRUCT, 'turn', [Turn, None], None, ),  # 2
    (3, TType.STRUCT, 'kick', [Kick, None], None, ),  # 3
    (4, TType.STRUCT, 'tackle', [Tackle, None], None, ),  # 4
    (5, TType.STRUCT, 'catch_action', [Catch, None], None, ),  # 5
    (6, TType.STRUCT, 'move', [Move, None], None, ),  # 6
    (7, TType.STRUCT, 'turn_neck', [TurnNeck, None], None, ),  # 7
    (8, TType.STRUCT, 'change_view', [ChangeView, None], None, ),  # 8
    (9, TType.STRUCT, 'say', [Say, None], None, ),  # 9
    (10, TType.STRUCT, 'point_to', [PointTo, None], None, ),  # 10
    (11, TType.STRUCT, 'point_to_of', [PointToOf, None], None, ),  # 11
    (12, TType.STRUCT, 'attention_to', [AttentionTo, None], None, ),  # 12
    (13, TType.STRUCT, 'attention_to_of', [AttentionToOf, None], None, ),  # 13
    (14, TType.STRUCT, 'log', [Log, None], None, ),  # 14
    (15, TType.STRUCT, 'debug_client', [DebugClient, None], None, ),  # 15
    (16, TType.STRUCT, 'body_go_to_point', [Body_GoToPoint, None], None, ),  # 16
    (17, TType.STRUCT, 'body_smart_kick', [Body_SmartKick, None], None, ),  # 17
    (18, TType.STRUCT, 'bhv_before_kick_off', [Bhv_BeforeKickOff, None], None, ),  # 18
    (19, TType.STRUCT, 'bhv_body_neck_to_ball', [Bhv_BodyNeckToBall, None], None, ),  # 19
    (20, TType.STRUCT, 'bhv_body_neck_to_point', [Bhv_BodyNeckToPoint, None], None, ),  # 20
    (21, TType.STRUCT, 'bhv_emergency', [Bhv_Emergency, None], None, ),  # 21
    (22, TType.STRUCT, 'bhv_go_to_point_look_ball', [Bhv_GoToPointLookBall, None], None, ),  # 22
    (23, TType.STRUCT, 'bhv_neck_body_to_ball', [Bhv_NeckBodyToBall, None], None, ),  # 23
    (24, TType.STRUCT, 'bhv_neck_body_to_point', [Bhv_NeckBodyToPoint, None], None, ),  # 24
    (25, TType.STRUCT, 'bhv_scan_field', [Bhv_ScanField, None], None, ),  # 25
    (26, TType.STRUCT, 'body_advance_ball', [Body_AdvanceBall, None], None, ),  # 26
    (27, TType.STRUCT, 'body_clear_ball', [Body_ClearBall, None], None, ),  # 27
    (28, TType.STRUCT, 'body_dribble', [Body_Dribble, None], None, ),  # 28
    (29, TType.STRUCT, 'body_go_to_point_dodge', [Body_GoToPointDodge, None], None, ),  # 29
    (30, TType.STRUCT, 'body_hold_ball', [Body_HoldBall, None], None, ),  # 30
    (31, TType.STRUCT, 'body_intercept', [Body_Intercept, None], None, ),  # 31
    (32, TType.STRUCT, 'body_kick_one_step', [Body_KickOneStep, None], None, ),  # 32
    (33, TType.STRUCT, 'body_stop_ball', [Body_StopBall, None], None, ),  # 33
    (34, TType.STRUCT, 'body_stop_dash', [Body_StopDash, None], None, ),  # 34
    (35, TType.STRUCT, 'body_tackle_to_point', [Body_TackleToPoint, None], None, ),  # 35
    (36, TType.STRUCT, 'body_turn_to_angle', [Body_TurnToAngle, None], None, ),  # 36
    (37, TType.STRUCT, 'body_turn_to_ball', [Body_TurnToBall, None], None, ),  # 37
    (38, TType.STRUCT, 'body_turn_to_point', [Body_TurnToPoint, None], None, ),  # 38
    (39, TType.STRUCT, 'focus_move_to_point', [Focus_MoveToPoint, None], None, ),  # 39
    (40, TType.STRUCT, 'focus_reset', [Focus_Reset, None], None, ),  # 40
    (41, TType.STRUCT, 'neck_scan_field', [Neck_ScanField, None], None, ),  # 41
    (42, TType.STRUCT, 'neck_scan_players', [Neck_ScanPlayers, None], None, ),  # 42
    (43, TType.STRUCT, 'neck_turn_to_ball_and_player', [Neck_TurnToBallAndPlayer, None], None, ),  # 43
    (44, TType.STRUCT, 'neck_turn_to_ball_or_scan', [Neck_TurnToBallOrScan, None], None, ),  # 44
    (45, TType.STRUCT, 'neck_turn_to_ball', [Neck_TurnToBall, None], None, ),  # 45
    (46, TType.STRUCT, 'neck_turn_to_goalie_or_scan', [Neck_TurnToGoalieOrScan, None], None, ),  # 46
    (47, TType.STRUCT, 'neck_turn_to_low_conf_teammate', [Neck_TurnToLowConfTeammate, None], None, ),  # 47
    (48, TType.STRUCT, 'neck_turn_to_player_or_scan', [Neck_TurnToPlayerOrScan, None], None, ),  # 48
    (49, TType.STRUCT, 'neck_turn_to_point', [Neck_TurnToPoint, None], None, ),  # 49
    (50, TType.STRUCT, 'neck_turn_to_relative', [Neck_TurnToRelative, None], None, ),  # 50
    (51, TType.STRUCT, 'view_change_width', [View_ChangeWidth, None], None, ),  # 51
    (52, TType.STRUCT, 'view_normal', [View_Normal, None], None, ),  # 52
    (53, TType.STRUCT, 'view_synch', [View_Synch, None], None, ),  # 53
    (54, TType.STRUCT, 'view_wide', [View_Wide, None], None, ),  # 54
    (55, TType.STRUCT, 'helios_goalie', [HeliosGoalie, None], None, ),  # 55
    (56, TType.STRUCT, 'helios_goalie_move', [HeliosGoalieMove, None], None, ),  # 56
    (57, TType.STRUCT, 'helios_goalie_kick', [HeliosGoalieKick, None], None, ),  # 57
    (58, TType.STRUCT, 'helios_shoot', [HeliosShoot, None], None, ),  # 58
    (59, TType.STRUCT, 'helios_chain_action', [HeliosChainAction, None], None, ),  # 59
    (60, TType.STRUCT, 'helios_basic_offensive', [HeliosBasicOffensive, None], None, ),  # 60
    (61, TType.STRUCT, 'helios_basic_move', [HeliosBasicMove, None], None, ),  # 61
    (62, TType.STRUCT, 'helios_set_play', [HeliosSetPlay, None], None, ),  # 62
    (63, TType.STRUCT, 'helios_penalty', [HeliosPenalty, None], None, ),  # 63
    (64, TType.STRUCT, 'helios_communication', [HeliosCommunicaion, None], None, ),  # 64
)
all_structs.append(PlayerActions)
PlayerActions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'actions', (TType.STRUCT, [PlayerAction, None], False), None, ),  # 1
)
all_structs.append(ChangePlayerType)
ChangePlayerType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uniform_number', None, None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
)
all_structs.append(DoHeliosSubstitute)
DoHeliosSubstitute.thrift_spec = (
)
all_structs.append(DoHeliosSayPlayerTypes)
DoHeliosSayPlayerTypes.thrift_spec = (
)
all_structs.append(CoachAction)
CoachAction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'change_player_types', [ChangePlayerType, None], None, ),  # 1
    (2, TType.STRUCT, 'do_helios_substitute', [DoHeliosSubstitute, None], None, ),  # 2
    (3, TType.STRUCT, 'do_helios_say_player_types', [DoHeliosSayPlayerTypes, None], None, ),  # 3
)
all_structs.append(CoachActions)
CoachActions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'actions', (TType.STRUCT, [CoachAction, None], False), None, ),  # 1
)
all_structs.append(DoKickOff)
DoKickOff.thrift_spec = (
)
all_structs.append(DoMoveBall)
DoMoveBall.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 1
    (2, TType.STRUCT, 'velocity', [ThriftVector2D, None], None, ),  # 2
)
all_structs.append(DoMovePlayer)
DoMovePlayer.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'our_side', None, None, ),  # 1
    (2, TType.I32, 'uniform_number', None, None, ),  # 2
    (3, TType.STRUCT, 'position', [ThriftVector2D, None], None, ),  # 3
    (4, TType.DOUBLE, 'body_direction', None, None, ),  # 4
)
all_structs.append(DoRecover)
DoRecover.thrift_spec = (
)
all_structs.append(DoChangeMode)
DoChangeMode.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'game_mode_type', None, None, ),  # 1
    (2, TType.I32, 'side', None, None, ),  # 2
)
all_structs.append(DoChangePlayerType)
DoChangePlayerType.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'our_side', None, None, ),  # 1
    (2, TType.I32, 'uniform_number', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
)
all_structs.append(TrainerAction)
TrainerAction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'do_kick_off', [DoKickOff, None], None, ),  # 1
    (2, TType.STRUCT, 'do_move_ball', [DoMoveBall, None], None, ),  # 2
    (3, TType.STRUCT, 'do_move_player', [DoMovePlayer, None], None, ),  # 3
    (4, TType.STRUCT, 'do_recover', [DoRecover, None], None, ),  # 4
    (5, TType.STRUCT, 'do_change_mode', [DoChangeMode, None], None, ),  # 5
    (6, TType.STRUCT, 'do_change_player_type', [DoChangePlayerType, None], None, ),  # 6
)
all_structs.append(TrainerActions)
TrainerActions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'actions', (TType.STRUCT, [TrainerAction, None], False), None, ),  # 1
)
all_structs.append(ServerParam)
ServerParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'agent_type', None, None, ),  # 1
    (2, TType.DOUBLE, 'inertia_moment', None, None, ),  # 2
    (3, TType.DOUBLE, 'player_size', None, None, ),  # 3
    (4, TType.DOUBLE, 'player_decay', None, None, ),  # 4
    (5, TType.DOUBLE, 'player_rand', None, None, ),  # 5
    (6, TType.DOUBLE, 'player_weight', None, None, ),  # 6
    (7, TType.DOUBLE, 'player_speed_max', None, None, ),  # 7
    (8, TType.DOUBLE, 'player_accel_max', None, None, ),  # 8
    (9, TType.DOUBLE, 'stamina_max', None, None, ),  # 9
    (10, TType.DOUBLE, 'stamina_inc_max', None, None, ),  # 10
    (11, TType.DOUBLE, 'recover_init', None, None, ),  # 11
    (12, TType.DOUBLE, 'recover_dec_thr', None, None, ),  # 12
    (13, TType.DOUBLE, 'recover_min', None, None, ),  # 13
    (14, TType.DOUBLE, 'recover_dec', None, None, ),  # 14
    (15, TType.DOUBLE, 'effort_init', None, None, ),  # 15
    (16, TType.DOUBLE, 'effort_dec_thr', None, None, ),  # 16
    (17, TType.DOUBLE, 'effort_min', None, None, ),  # 17
    (18, TType.DOUBLE, 'effort_dec', None, None, ),  # 18
    (19, TType.DOUBLE, 'effort_inc_thr', None, None, ),  # 19
    (20, TType.DOUBLE, 'effort_inc', None, None, ),  # 20
    (21, TType.DOUBLE, 'kick_rand', None, None, ),  # 21
    (22, TType.BOOL, 'team_actuator_noise', None, None, ),  # 22
    (23, TType.DOUBLE, 'player_rand_factor_l', None, None, ),  # 23
    (24, TType.DOUBLE, 'player_rand_factor_r', None, None, ),  # 24
    (25, TType.DOUBLE, 'kick_rand_factor_l', None, None, ),  # 25
    (26, TType.DOUBLE, 'kick_rand_factor_r', None, None, ),  # 26
    (27, TType.DOUBLE, 'ball_size', None, None, ),  # 27
    (28, TType.DOUBLE, 'ball_decay', None, None, ),  # 28
    (29, TType.DOUBLE, 'ball_rand', None, None, ),  # 29
    (30, TType.DOUBLE, 'ball_weight', None, None, ),  # 30
    (31, TType.DOUBLE, 'ball_speed_max', None, None, ),  # 31
    (32, TType.DOUBLE, 'ball_accel_max', None, None, ),  # 32
    (33, TType.DOUBLE, 'dash_power_rate', None, None, ),  # 33
    (34, TType.DOUBLE, 'kick_power_rate', None, None, ),  # 34
    (35, TType.DOUBLE, 'kickable_margin', None, None, ),  # 35
    (36, TType.DOUBLE, 'control_radius', None, None, ),  # 36
    (37, TType.DOUBLE, 'control_radius_width', None, None, ),  # 37
    (38, TType.DOUBLE, 'max_power', None, None, ),  # 38
    (39, TType.DOUBLE, 'min_power', None, None, ),  # 39
    (40, TType.DOUBLE, 'max_moment', None, None, ),  # 40
    (41, TType.DOUBLE, 'min_moment', None, None, ),  # 41
    (42, TType.DOUBLE, 'max_neck_moment', None, None, ),  # 42
    (43, TType.DOUBLE, 'min_neck_moment', None, None, ),  # 43
    (44, TType.DOUBLE, 'max_neck_angle', None, None, ),  # 44
    (45, TType.DOUBLE, 'min_neck_angle', None, None, ),  # 45
    (46, TType.DOUBLE, 'visible_angle', None, None, ),  # 46
    (47, TType.DOUBLE, 'visible_distance', None, None, ),  # 47
    (48, TType.DOUBLE, 'wind_dir', None, None, ),  # 48
    (49, TType.DOUBLE, 'wind_force', None, None, ),  # 49
    (50, TType.DOUBLE, 'wind_angle', None, None, ),  # 50
    (51, TType.DOUBLE, 'wind_rand', None, None, ),  # 51
    (52, TType.DOUBLE, 'kickable_area', None, None, ),  # 52
    (53, TType.DOUBLE, 'catch_area_l', None, None, ),  # 53
    (54, TType.DOUBLE, 'catch_area_w', None, None, ),  # 54
    (55, TType.DOUBLE, 'catch_probability', None, None, ),  # 55
    (56, TType.I32, 'goalie_max_moves', None, None, ),  # 56
    (57, TType.DOUBLE, 'corner_kick_margin', None, None, ),  # 57
    (58, TType.DOUBLE, 'offside_active_area_size', None, None, ),  # 58
    (59, TType.BOOL, 'wind_none', None, None, ),  # 59
    (60, TType.BOOL, 'use_wind_random', None, None, ),  # 60
    (61, TType.I32, 'coach_say_count_max', None, None, ),  # 61
    (62, TType.I32, 'coach_say_msg_size', None, None, ),  # 62
    (63, TType.I32, 'clang_win_size', None, None, ),  # 63
    (64, TType.I32, 'clang_define_win', None, None, ),  # 64
    (65, TType.I32, 'clang_meta_win', None, None, ),  # 65
    (66, TType.I32, 'clang_advice_win', None, None, ),  # 66
    (67, TType.I32, 'clang_info_win', None, None, ),  # 67
    (68, TType.I32, 'clang_mess_delay', None, None, ),  # 68
    (69, TType.I32, 'clang_mess_per_cycle', None, None, ),  # 69
    (70, TType.I32, 'half_time', None, None, ),  # 70
    (71, TType.I32, 'simulator_step', None, None, ),  # 71
    (72, TType.I32, 'send_step', None, None, ),  # 72
    (73, TType.I32, 'recv_step', None, None, ),  # 73
    (74, TType.I32, 'sense_body_step', None, None, ),  # 74
    (75, TType.I32, 'lcm_step', None, None, ),  # 75
    (76, TType.I32, 'player_say_msg_size', None, None, ),  # 76
    (77, TType.I32, 'player_hear_max', None, None, ),  # 77
    (78, TType.I32, 'player_hear_inc', None, None, ),  # 78
    (79, TType.I32, 'player_hear_decay', None, None, ),  # 79
    (80, TType.I32, 'catch_ban_cycle', None, None, ),  # 80
    (81, TType.I32, 'slow_down_factor', None, None, ),  # 81
    (82, TType.BOOL, 'use_offside', None, None, ),  # 82
    (83, TType.BOOL, 'kickoff_offside', None, None, ),  # 83
    (84, TType.DOUBLE, 'offside_kick_margin', None, None, ),  # 84
    (85, TType.DOUBLE, 'audio_cut_dist', None, None, ),  # 85
    (86, TType.DOUBLE, 'dist_quantize_step', None, None, ),  # 86
    (87, TType.DOUBLE, 'landmark_dist_quantize_step', None, None, ),  # 87
    (88, TType.DOUBLE, 'dir_quantize_step', None, None, ),  # 88
    (89, TType.DOUBLE, 'dist_quantize_step_l', None, None, ),  # 89
    (90, TType.DOUBLE, 'dist_quantize_step_r', None, None, ),  # 90
    (91, TType.DOUBLE, 'landmark_dist_quantize_step_l', None, None, ),  # 91
    (92, TType.DOUBLE, 'landmark_dist_quantize_step_r', None, None, ),  # 92
    (93, TType.DOUBLE, 'dir_quantize_step_l', None, None, ),  # 93
    (94, TType.DOUBLE, 'dir_quantize_step_r', None, None, ),  # 94
    (95, TType.BOOL, 'coach_mode', None, None, ),  # 95
    (96, TType.BOOL, 'coach_with_referee_mode', None, None, ),  # 96
    (97, TType.BOOL, 'use_old_coach_hear', None, None, ),  # 97
    (98, TType.DOUBLE, 'slowness_on_top_for_left_team', None, None, ),  # 98
    (99, TType.DOUBLE, 'slowness_on_top_for_right_team', None, None, ),  # 99
    (100, TType.I32, 'start_goal_l', None, None, ),  # 100
    (101, TType.I32, 'start_goal_r', None, None, ),  # 101
    (102, TType.BOOL, 'fullstate_l', None, None, ),  # 102
    (103, TType.BOOL, 'fullstate_r', None, None, ),  # 103
    (104, TType.I32, 'drop_ball_time', None, None, ),  # 104
    (105, TType.BOOL, 'synch_mode', None, None, ),  # 105
    (106, TType.I32, 'synch_offset', None, None, ),  # 106
    (107, TType.I32, 'synch_micro_sleep', None, None, ),  # 107
    (108, TType.I32, 'point_to_ban', None, None, ),  # 108
    (109, TType.I32, 'point_to_duration', None, None, ),  # 109
    (110, TType.I32, 'player_port', None, None, ),  # 110
    (111, TType.I32, 'trainer_port', None, None, ),  # 111
    (112, TType.I32, 'online_coach_port', None, None, ),  # 112
    (113, TType.BOOL, 'verbose_mode', None, None, ),  # 113
    (114, TType.I32, 'coach_send_vi_step', None, None, ),  # 114
    (115, TType.STRING, 'replay_file', 'UTF8', None, ),  # 115
    (116, TType.STRING, 'landmark_file', 'UTF8', None, ),  # 116
    (117, TType.BOOL, 'send_comms', None, None, ),  # 117
    (118, TType.BOOL, 'text_logging', None, None, ),  # 118
    (119, TType.BOOL, 'game_logging', None, None, ),  # 119
    (120, TType.I32, 'game_log_version', None, None, ),  # 120
    (121, TType.STRING, 'text_log_dir', 'UTF8', None, ),  # 121
    (122, TType.STRING, 'game_log_dir', 'UTF8', None, ),  # 122
    (123, TType.STRING, 'text_log_fixed_name', 'UTF8', None, ),  # 123
    (124, TType.STRING, 'game_log_fixed_name', 'UTF8', None, ),  # 124
    (125, TType.BOOL, 'use_text_log_fixed', None, None, ),  # 125
    (126, TType.BOOL, 'use_game_log_fixed', None, None, ),  # 126
    (127, TType.BOOL, 'use_text_log_dated', None, None, ),  # 127
    (128, TType.BOOL, 'use_game_log_dated', None, None, ),  # 128
    (129, TType.STRING, 'log_date_format', 'UTF8', None, ),  # 129
    (130, TType.BOOL, 'log_times', None, None, ),  # 130
    (131, TType.BOOL, 'record_message', None, None, ),  # 131
    (132, TType.I32, 'text_log_compression', None, None, ),  # 132
    (133, TType.I32, 'game_log_compression', None, None, ),  # 133
    (134, TType.BOOL, 'use_profile', None, None, ),  # 134
    (135, TType.DOUBLE, 'tackle_dist', None, None, ),  # 135
    (136, TType.DOUBLE, 'tackle_back_dist', None, None, ),  # 136
    (137, TType.DOUBLE, 'tackle_width', None, None, ),  # 137
    (138, TType.DOUBLE, 'tackle_exponent', None, None, ),  # 138
    (139, TType.I32, 'tackle_cycles', None, None, ),  # 139
    (140, TType.DOUBLE, 'tackle_power_rate', None, None, ),  # 140
    (141, TType.I32, 'freeform_wait_period', None, None, ),  # 141
    (142, TType.I32, 'freeform_send_period', None, None, ),  # 142
    (143, TType.BOOL, 'free_kick_faults', None, None, ),  # 143
    (144, TType.BOOL, 'back_passes', None, None, ),  # 144
    (145, TType.BOOL, 'proper_goal_kicks', None, None, ),  # 145
    (146, TType.DOUBLE, 'stopped_ball_vel', None, None, ),  # 146
    (147, TType.I32, 'max_goal_kicks', None, None, ),  # 147
    (148, TType.I32, 'clang_del_win', None, None, ),  # 148
    (149, TType.I32, 'clang_rule_win', None, None, ),  # 149
    (150, TType.BOOL, 'auto_mode', None, None, ),  # 150
    (151, TType.I32, 'kick_off_wait', None, None, ),  # 151
    (152, TType.I32, 'connect_wait', None, None, ),  # 152
    (153, TType.I32, 'game_over_wait', None, None, ),  # 153
    (154, TType.STRING, 'team_l_start', 'UTF8', None, ),  # 154
    (155, TType.STRING, 'team_r_start', 'UTF8', None, ),  # 155
    (156, TType.BOOL, 'keepaway_mode', None, None, ),  # 156
    (157, TType.DOUBLE, 'keepaway_length', None, None, ),  # 157
    (158, TType.DOUBLE, 'keepaway_width', None, None, ),  # 158
    (159, TType.BOOL, 'keepaway_logging', None, None, ),  # 159
    (160, TType.STRING, 'keepaway_log_dir', 'UTF8', None, ),  # 160
    (161, TType.STRING, 'keepaway_log_fixed_name', 'UTF8', None, ),  # 161
    (162, TType.BOOL, 'keepaway_log_fixed', None, None, ),  # 162
    (163, TType.BOOL, 'keepaway_log_dated', None, None, ),  # 163
    (164, TType.I32, 'keepaway_start', None, None, ),  # 164
    (165, TType.I32, 'nr_normal_halfs', None, None, ),  # 165
    (166, TType.I32, 'nr_extra_halfs', None, None, ),  # 166
    (167, TType.BOOL, 'penalty_shoot_outs', None, None, ),  # 167
    (168, TType.I32, 'pen_before_setup_wait', None, None, ),  # 168
    (169, TType.I32, 'pen_setup_wait', None, None, ),  # 169
    (170, TType.I32, 'pen_ready_wait', None, None, ),  # 170
    (171, TType.I32, 'pen_taken_wait', None, None, ),  # 171
    (172, TType.I32, 'pen_nr_kicks', None, None, ),  # 172
    (173, TType.I32, 'pen_max_extra_kicks', None, None, ),  # 173
    (174, TType.DOUBLE, 'pen_dist_x', None, None, ),  # 174
    (175, TType.BOOL, 'pen_random_winner', None, None, ),  # 175
    (176, TType.BOOL, 'pen_allow_mult_kicks', None, None, ),  # 176
    (177, TType.DOUBLE, 'pen_max_goalie_dist_x', None, None, ),  # 177
    (178, TType.BOOL, 'pen_coach_moves_players', None, None, ),  # 178
    (179, TType.STRING, 'module_dir', 'UTF8', None, ),  # 179
    (180, TType.DOUBLE, 'ball_stuck_area', None, None, ),  # 180
    (181, TType.STRING, 'coach_msg_file', 'UTF8', None, ),  # 181
    (182, TType.DOUBLE, 'max_tackle_power', None, None, ),  # 182
    (183, TType.DOUBLE, 'max_back_tackle_power', None, None, ),  # 183
    (184, TType.DOUBLE, 'player_speed_max_min', None, None, ),  # 184
    (185, TType.DOUBLE, 'extra_stamina', None, None, ),  # 185
    (186, TType.I32, 'synch_see_offset', None, None, ),  # 186
    (187, TType.I32, 'extra_half_time', None, None, ),  # 187
    (188, TType.DOUBLE, 'stamina_capacity', None, None, ),  # 188
    (189, TType.DOUBLE, 'max_dash_angle', None, None, ),  # 189
    (190, TType.DOUBLE, 'min_dash_angle', None, None, ),  # 190
    (191, TType.DOUBLE, 'dash_angle_step', None, None, ),  # 191
    (192, TType.DOUBLE, 'side_dash_rate', None, None, ),  # 192
    (193, TType.DOUBLE, 'back_dash_rate', None, None, ),  # 193
    (194, TType.DOUBLE, 'max_dash_power', None, None, ),  # 194
    (195, TType.DOUBLE, 'min_dash_power', None, None, ),  # 195
    (196, TType.DOUBLE, 'tackle_rand_factor', None, None, ),  # 196
    (197, TType.DOUBLE, 'foul_detect_probability', None, None, ),  # 197
    (198, TType.DOUBLE, 'foul_exponent', None, None, ),  # 198
    (199, TType.I32, 'foul_cycles', None, None, ),  # 199
    (200, TType.BOOL, 'golden_goal', None, None, ),  # 200
    (201, TType.DOUBLE, 'red_card_probability', None, None, ),  # 201
    (202, TType.I32, 'illegal_defense_duration', None, None, ),  # 202
    (203, TType.I32, 'illegal_defense_number', None, None, ),  # 203
    (204, TType.DOUBLE, 'illegal_defense_dist_x', None, None, ),  # 204
    (205, TType.DOUBLE, 'illegal_defense_width', None, None, ),  # 205
    (206, TType.STRING, 'fixed_teamname_l', 'UTF8', None, ),  # 206
    (207, TType.STRING, 'fixed_teamname_r', 'UTF8', None, ),  # 207
    (208, TType.DOUBLE, 'max_catch_angle', None, None, ),  # 208
    (209, TType.DOUBLE, 'min_catch_angle', None, None, ),  # 209
    (210, TType.I32, 'random_seed', None, None, ),  # 210
    (211, TType.DOUBLE, 'long_kick_power_factor', None, None, ),  # 211
    (212, TType.I32, 'long_kick_delay', None, None, ),  # 212
    (213, TType.I32, 'max_monitors', None, None, ),  # 213
    (214, TType.DOUBLE, 'catchable_area', None, None, ),  # 214
    (215, TType.DOUBLE, 'real_speed_max', None, None, ),  # 215
    (216, TType.DOUBLE, 'pitch_half_length', None, None, ),  # 216
    (217, TType.DOUBLE, 'pitch_half_width', None, None, ),  # 217
    (218, TType.DOUBLE, 'our_penalty_area_line_x', None, None, ),  # 218
    (219, TType.DOUBLE, 'their_penalty_area_line_x', None, None, ),  # 219
    (220, TType.DOUBLE, 'penalty_area_half_width', None, None, ),  # 220
    (221, TType.DOUBLE, 'penalty_area_length', None, None, ),  # 221
    (222, TType.DOUBLE, 'goal_width', None, None, ),  # 222
)
all_structs.append(PlayerParam)
PlayerParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'agent_type', None, None, ),  # 1
    (2, TType.I32, 'player_types', None, None, ),  # 2
    (3, TType.I32, 'subs_max', None, None, ),  # 3
    (4, TType.I32, 'pt_max', None, None, ),  # 4
    (5, TType.BOOL, 'allow_mult_default_type', None, None, ),  # 5
    (6, TType.DOUBLE, 'player_speed_max_delta_min', None, None, ),  # 6
    (7, TType.DOUBLE, 'player_speed_max_delta_max', None, None, ),  # 7
    (8, TType.DOUBLE, 'stamina_inc_max_delta_factor', None, None, ),  # 8
    (9, TType.DOUBLE, 'player_decay_delta_min', None, None, ),  # 9
    (10, TType.DOUBLE, 'player_decay_delta_max', None, None, ),  # 10
    (11, TType.DOUBLE, 'inertia_moment_delta_factor', None, None, ),  # 11
    (12, TType.DOUBLE, 'dash_power_rate_delta_min', None, None, ),  # 12
    (13, TType.DOUBLE, 'dash_power_rate_delta_max', None, None, ),  # 13
    (14, TType.DOUBLE, 'player_size_delta_factor', None, None, ),  # 14
    (15, TType.DOUBLE, 'kickable_margin_delta_min', None, None, ),  # 15
    (16, TType.DOUBLE, 'kickable_margin_delta_max', None, None, ),  # 16
    (17, TType.DOUBLE, 'kick_rand_delta_factor', None, None, ),  # 17
    (18, TType.DOUBLE, 'extra_stamina_delta_min', None, None, ),  # 18
    (19, TType.DOUBLE, 'extra_stamina_delta_max', None, None, ),  # 19
    (20, TType.DOUBLE, 'effort_max_delta_factor', None, None, ),  # 20
    (21, TType.DOUBLE, 'effort_min_delta_factor', None, None, ),  # 21
    (22, TType.I32, 'random_seed', None, None, ),  # 22
    (23, TType.DOUBLE, 'new_dash_power_rate_delta_min', None, None, ),  # 23
    (24, TType.DOUBLE, 'new_dash_power_rate_delta_max', None, None, ),  # 24
    (25, TType.DOUBLE, 'new_stamina_inc_max_delta_factor', None, None, ),  # 25
    (26, TType.DOUBLE, 'kick_power_rate_delta_min', None, None, ),  # 26
    (27, TType.DOUBLE, 'kick_power_rate_delta_max', None, None, ),  # 27
    (28, TType.DOUBLE, 'foul_detect_probability_delta_factor', None, None, ),  # 28
    (29, TType.DOUBLE, 'catchable_area_l_stretch_min', None, None, ),  # 29
    (30, TType.DOUBLE, 'catchable_area_l_stretch_max', None, None, ),  # 30
)
all_structs.append(PlayerType)
PlayerType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'agent_type', None, None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.DOUBLE, 'stamina_inc_max', None, None, ),  # 3
    (4, TType.DOUBLE, 'player_decay', None, None, ),  # 4
    (5, TType.DOUBLE, 'inertia_moment', None, None, ),  # 5
    (6, TType.DOUBLE, 'dash_power_rate', None, None, ),  # 6
    (7, TType.DOUBLE, 'player_size', None, None, ),  # 7
    (8, TType.DOUBLE, 'kickable_margin', None, None, ),  # 8
    (9, TType.DOUBLE, 'kick_rand', None, None, ),  # 9
    (10, TType.DOUBLE, 'extra_stamina', None, None, ),  # 10
    (11, TType.DOUBLE, 'effort_max', None, None, ),  # 11
    (12, TType.DOUBLE, 'effort_min', None, None, ),  # 12
    (13, TType.DOUBLE, 'kick_power_rate', None, None, ),  # 13
    (14, TType.DOUBLE, 'foul_detect_probability', None, None, ),  # 14
    (15, TType.DOUBLE, 'catchable_area_l_stretch', None, None, ),  # 15
    (16, TType.DOUBLE, 'unum_far_length', None, None, ),  # 16
    (17, TType.DOUBLE, 'unum_too_far_length', None, None, ),  # 17
    (18, TType.DOUBLE, 'team_far_length', None, None, ),  # 18
    (19, TType.DOUBLE, 'team_too_far_length', None, None, ),  # 19
    (20, TType.DOUBLE, 'player_max_observation_length', None, None, ),  # 20
    (21, TType.DOUBLE, 'ball_vel_far_length', None, None, ),  # 21
    (22, TType.DOUBLE, 'ball_vel_too_far_length', None, None, ),  # 22
    (23, TType.DOUBLE, 'ball_max_observation_length', None, None, ),  # 23
    (24, TType.DOUBLE, 'flag_chg_far_length', None, None, ),  # 24
    (25, TType.DOUBLE, 'flag_chg_too_far_length', None, None, ),  # 25
    (26, TType.DOUBLE, 'flag_max_observation_length', None, None, ),  # 26
    (27, TType.DOUBLE, 'kickable_area', None, None, ),  # 27
    (28, TType.DOUBLE, 'reliable_catchable_dist', None, None, ),  # 28
    (29, TType.DOUBLE, 'max_catchable_dist', None, None, ),  # 29
    (30, TType.DOUBLE, 'real_speed_max', None, None, ),  # 30
    (31, TType.DOUBLE, 'player_speed_max2', None, None, ),  # 31
    (32, TType.DOUBLE, 'real_speed_max2', None, None, ),  # 32
    (33, TType.I32, 'cycles_to_reach_max_speed', None, None, ),  # 33
    (34, TType.DOUBLE, 'player_speed_max', None, None, ),  # 34
)
all_structs.append(Empty)
Empty.thrift_spec = (
)
all_structs.append(InitMessageFromServer)
InitMessageFromServer.thrift_spec = (
)
fix_spec(all_structs)
del all_structs
